-- megafunction wizard: %RAM: 2-PORT%
-- GENERATION: STANDARD
-- VERSION: WM1.0
-- MODULE: altsyncram 

-- ============================================================
-- File Name: RamTrueDualPort.vhd
-- Megafunction Name(s):
-- 			altsyncram
--
-- Simulation Library Files(s):
-- 			altera_mf
-- ============================================================
-- ************************************************************
-- THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
--
-- 12.1 Build 243 01/31/2013 SP 1 SJ Full Version
-- ************************************************************


--Copyright (C) 1991-2012 Altera Corporation
--Your use of Altera Corporation's design tools, logic functions 
--and other software and tools, and its AMPP partner logic 
--functions, and any output files from any of the foregoing 
--(including device programming or simulation files), and any 
--associated documentation or information are expressly subject 
--to the terms and conditions of the Altera Program License 
--Subscription Agreement, Altera MegaCore Function License 
--Agreement, or other applicable license agreement, including, 
--without limitation, that your use is for the sole purpose of 
--programming logic devices manufactured by Altera and sold by 
--Altera or its authorized distributors.  Please refer to the 
--applicable agreement for further details.


LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY altera_mf;
USE altera_mf.all;

ENTITY RamTrueDualPort IS
  GENERIC
  (
		ADDR_WIDTH : integer;
		DATA_WIDTH : integer := 8
  );
	PORT
	(
		clock_a		  : IN STD_LOGIC  := '1';
		clken_a		  : IN STD_LOGIC  := '1';
		addr_a		  : IN STD_LOGIC_VECTOR (ADDR_WIDTH-1 DOWNTO 0);
		din_a		    : IN STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
		dout_a		  : OUT STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
		wr_a		    : IN STD_LOGIC  := '0';
    
		clock_b		  : IN STD_LOGIC ;
		clken_b		  : IN STD_LOGIC  := '1';
		addr_b		  : IN STD_LOGIC_VECTOR (ADDR_WIDTH-1 DOWNTO 0);
		din_b		    : IN STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
		dout_b		  : OUT STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
		wr_b		    : IN STD_LOGIC  := '0'
	);
END RamTrueDualPort;


ARCHITECTURE SYN OF ramtruedualport IS

	SIGNAL sub_wire0	: STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
	SIGNAL sub_wire1	: STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);



	COMPONENT altsyncram
	GENERIC (
		address_reg_b		: STRING;
		clock_enable_input_a		: STRING;
		clock_enable_input_b		: STRING;
		clock_enable_output_a		: STRING;
		clock_enable_output_b		: STRING;
		indata_reg_b		: STRING;
		intended_device_family		: STRING;
		lpm_type		: STRING;
		numwords_a		: NATURAL;
		numwords_b		: NATURAL;
		operation_mode		: STRING;
		outdata_aclr_a		: STRING;
		outdata_aclr_b		: STRING;
		outdata_reg_a		: STRING;
		outdata_reg_b		: STRING;
		power_up_uninitialized		: STRING;
		read_during_write_mode_port_a		: STRING;
		read_during_write_mode_port_b		: STRING;
		widthad_a		: NATURAL;
		widthad_b		: NATURAL;
		width_a		: NATURAL;
		width_b		: NATURAL;
		width_byteena_a		: NATURAL;
		width_byteena_b		: NATURAL;
		wrcontrol_wraddress_reg_b		: STRING
	);
	PORT (
			clock0	: IN STD_LOGIC ;
			clocken1	: IN STD_LOGIC ;
			wren_a	: IN STD_LOGIC ;
			address_b	: IN STD_LOGIC_VECTOR (ADDR_WIDTH-1 DOWNTO 0);
			clock1	: IN STD_LOGIC ;
			clocken0	: IN STD_LOGIC ;
			data_b	: IN STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
			q_a	: OUT STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
			wren_b	: IN STD_LOGIC ;
			address_a	: IN STD_LOGIC_VECTOR (ADDR_WIDTH-1 DOWNTO 0);
			data_a	: IN STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0);
			q_b	: OUT STD_LOGIC_VECTOR (DATA_WIDTH-1 DOWNTO 0)
	);
	END COMPONENT;

BEGIN
	dout_a    <= sub_wire0(DATA_WIDTH-1 DOWNTO 0);
	dout_b    <= sub_wire1(DATA_WIDTH-1 DOWNTO 0);

	altsyncram_component : altsyncram
	GENERIC MAP (
		address_reg_b => "CLOCK1",
		clock_enable_input_a => "NORMAL",
		clock_enable_input_b => "NORMAL",
		clock_enable_output_a => "BYPASS",
		clock_enable_output_b => "BYPASS",
		indata_reg_b => "CLOCK1",
		intended_device_family => "Stratix III",
		lpm_type => "altsyncram",
		numwords_a => 2**ADDR_WIDTH,
		numwords_b => 2**ADDR_WIDTH,
		operation_mode => "BIDIR_DUAL_PORT",
		outdata_aclr_a => "NONE",
		outdata_aclr_b => "NONE",
		outdata_reg_a => "UNREGISTERED",
		outdata_reg_b => "UNREGISTERED",
		power_up_uninitialized => "FALSE",
		read_during_write_mode_port_a => "NEW_DATA_NO_NBE_READ",
		read_during_write_mode_port_b => "NEW_DATA_NO_NBE_READ",
		widthad_a => ADDR_WIDTH,
		widthad_b => ADDR_WIDTH,
		width_a => DATA_WIDTH,
		width_b => DATA_WIDTH,
		width_byteena_a => 1,
		width_byteena_b => 1,
		wrcontrol_wraddress_reg_b => "CLOCK1"
	)
	PORT MAP (
		clock0 => clock_a,
		clocken1 => clken_b,
		wren_a => wr_a,
		address_b => addr_b,
		clock1 => clock_b,
		clocken0 => clken_a,
		data_b => din_b,
		wren_b => wr_b,
		address_a => addr_a,
		data_a => din_a,
		q_a => sub_wire0,
		q_b => sub_wire1
	);



END SYN;
