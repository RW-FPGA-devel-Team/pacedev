*
*	Neo Geo-specific portions of NeoKong
*

* Neo Geo hardware definitions
.include "regdefs.68k"
.include "neogeo_gfx.68k"

* exports
    .global _jp_config
    .global _us_config
    .global _sp_config
   	.global IRQ1
   	.global IRQ3
   	.global DUMMY
   	.global TRAP
	  .global _user
		.global _player_start
		.global _demo_end
		.global _coin_sound
		.global	platform_init
		.global	render_tilemap
		.global render_sprites
    .global _end_of_ng_code
    .global _end_of_ng_data
    .global debug1
    .global debug2
* imports
		.global	_vram
    .global _flipscreen
    .global _palette_bank
		.global	_dipsw
		.global	_rotate
		.global _tilemap_set
		.global _sprite_set
    .global _render_palette_bank
		
		.text

    .align 4
_jp_config:
_us_config:
_sp_config:
    .ascii    "DONKEY KONG     "
    .word     0xffff
    .word     0xffff
    .byte     0xff
    .byte     0xff
    .byte     0x04                | lives
    .byte     0x04                | bonus life
    .byte     0x08                | coinage
    .byte     0x12                | cabinet
    .byte     0x00
    .byte     0x00
    .byte     0x00
    .byte     0x00
    .byte     0x00
    .byte     0x00
* item names are 12 characters    
    .ascii    "LIVES       "      | item 5
    .ascii    "3           "
    .ascii    "4           "
    .ascii    "5           "
    .ascii    "6           "
    .ascii    "BONUS LIFE  "      | item 6
    .ascii    "7000        "
    .ascii    "10000       "
    .ascii    "15000       "
    .ascii    "20000       "
    .ascii    "COINAGE     "      | item 7
    .ascii    "1C/1C       "
    .ascii    "1C/2C       "
    .ascii    "1C/3C       "
    .ascii    "1C/4C       "
    .ascii    "2C/1C       "
    .ascii    "3C/1C       "
    .ascii    "4C/1C       "
    .ascii    "5C/1C       "
    .ascii    "CABINET     "      | item 8
    .ascii    "HORIZONTAL  "
    .ascii    "VERTICAL    "

	.align 4
IRQ1:
	move.w	#2, 0x3C000C
	rte
    
	.align 4
IRQ3:
	move.w	#1, 0x3C000C
	rte

DUMMY:
	rte
	    
TRAP:
	rte
	    
_user:
		moveq			#0,d0
		move.b		(BIOS_USER_REQUEST),d0
		lsl.w			#2,d0
    movea.l   1f(pc,d0.w),a0
    jmp       (a0)
    .align 4
1:	.long			startup_init
		.long			eye_catcher
		.long			demo_game
		.long			title_display

startup_init:
* we're not doing things the NeoGeo way
		jmp				BIOSF_SYSTEM_RETURN

eye_catcher:
* we're not doing things the NeoGeo way
		jmp				BIOSF_SYSTEM_RETURN

demo_game:
		move		#0x2700,sr						| disable interrupts
    lea     0x10F300,sp
    move.b  #2,BIOS_USER_MODE     | tell BIOS we're running the game
		bsr			platform_init					| neo geo-specific init
		jmp			init

title_display:
* we're not doing things the NeoGeo way
    move.b  BIOS_SELECT_TIMER,d0
		jmp				BIOSF_SYSTEM_RETURN

_player_start:
* we're not doing things the NeoGeo way
		rts
				
_demo_end:
* we're not doing things the NeoGeo way
		rts
				
_coin_sound:
* we're not doing things the NeoGeo way
		rts
				
platform_init:

    KICK_WDOG
*		acknowlede interrupts
    move.w  	#7,REG_IRQACK

* clear fix layer (not used)
		jsr				BIOSF_FIX_CLEAR
		jsr				BIOSF_LSP_1ST

* setup palette
		lea				_dkong_palette.l,a0
		lea				PALETTES+64*16*2,a1               | start at palette #64
		moveq			#64-1,d7					                | 64 palettes
2:	moveq			#16-1,d6					                | 16 colours/palette
    KICK_WDOG
1:	move.w		(a0)+,(a1)+
		dbf				d6,1b
		dbf				d7,2b
		move.w  	#0x0000,(BACKDROPCOLOR)
		
* setup sprite tilemaps
* - DK tilemap, and DK sprite sizes only

		lea				VRAM_RW.l,a0
		move.w		#1,2(a0)					                | VRAM_MOD=1

* clear all sprite tiles & attributes
		move.w		#(SCB1),-2(a0)			          		| VRAM_ADDR=SCB1
		moveq			#0,d7		
		move.w		#448*32-1,d7											| 448 sprite tilemaps
1:	move.w		#0,(a0)														| clear tile
		move.w		#0,(a0)														| clear palette, attributes
		dbf				d7,1b		
* set all zoom to 1
		move.w		#(SCB2),-2(a0)										| VRAM_ADDR=SCB2
		move.w		#448,d7														| 448 sprites
2:	move.w		#0,(a0)														| clear zoom
		dbf				d7,2b		
		
.equ	TMSS,32
.equ  SPRSS,(TMSS+32)
.equ  NDKS,76

*   - shrinking coefficients
*     - horiztonal is still independant when chained
		move.w		#(SCB2+TMSS),-2(a0)			          | VRAM_ADDR=SCB2
		moveq			#0,d7
		moveq			#32-1,d7					                | 32 sprites
*1:	move.w		#0x076F,(a0)			                | fit screen
1:	move.w		#0x077F,(a0)			                | fit screen
		dbf				d7,1b                             
*			- for donkey kong sprites now             
		moveq			#(NDKS-1),d7					            | <NDKS> more sprites
2:	move.w		#0x0FFF,(a0)						          | full size
		dbf				d7,2b                             
*   - vertical position, sticky, size           
		move.w		#(SCB3+TMSS),-2(a0)			          | VRAM_ADDR=SCB3
*		move.w		#0,d0							                | YPOS=0
		move.w		#-16,d0							                | YPOS=0
		not.w			d0                                | }
		and.w			#0x1FF,d0                         | } from the video library
		sub.w			#0xF,d0                           | }
		lsl.w			#7,d0                             
		ori.w			#33,d0						                | size (full wrap)
		move.w		d0,(a0)						                | 1st sprite data
		ori.w			#0x0040,d0				                | set sticky bit
		moveq			#31-1,d7					                | 31 more sprites
3:	move.w		d0,(a0)						                | SCB3 data
		dbf				d7,3b
*		- horizontal position		
*     - only need to set the 1st when chained
		move.w		#(SCB4+TMSS),-2(a0)			          | VRAM_ADDR=SCB4
		moveq			#32-1,d7
		move.w		#16<<7,d0
4:	move.w		d0,(a0)						                | XPOS=0
		add.w			#16,d0
		dbf				d7,4b

* setup dipswitches (hard-code upright)
		lea				BIOS_GAME_DIP,a0
		move.b		6(a0),d0													| lives
		move.b		7(a0),d1													| bonus
		lsl.b			#2,d1
		or.b			d1,d0
		move.b		8(a0),d1													| coinage
		lsl.b			#4,d1
		or.b			d1,d0
		or.b			#0x80,d0													| cabinet=upright
		move.b		d0,(_dipsw)												| store dipswitches

* rotation (select graphics sets)
    move.w    #0x200,(_tilemap_set)
    move.w    #0x100,(_sprite_set)
		move.b		9(a0),d0													| horizontal/vertical
		move.b		d0,(_rotate)											| store rotate
    beq				5f
    ori.w     #0x100,(_tilemap_set)
    ori.w     #0x080,(_sprite_set)

* CD hardware only
.ifdef __cd__
    move.b    #0,(REG_DISBLSPR)                 | enable sprites
    move.b    #1,(REG_ENVIDEO)                  | enable video
.endif

5:	KICK_WDOG
    rts

* render DK tilemap

render_tilemap:

* palette, rotate helper		
		moveq			#0,d1
		move.b    (_palette_bank),d1
    lsl.b     #4,d1
    ori.w     #64,d1                            | base palette 64
    move.w    d1,(_render_palette_bank)
*    move.b		(_rotate),d0
    tst.b			(_rotate)
    bne				render_tilemap_rotated
    
		lea				VRAM_RW.l,a0
		move.w		#(SCB1+TMSS*32*2),-2(a0)	        | VRAM_ADDR=SCB1
		move.w		#1,2(a0)					                | VRAM_MOD=1
		lea				_vram,a1
		lea       _dkong_clut,a2
		moveq			#32-1,d7
1:	moveq			#32-1,d6
		move.w		d7,d2							                | Y
		btst      #0,d0                             | rotate screen?
		beq       2f                                | no, skip
		addq.w		#1,d2                             
		neg.w			d2                                
		and.w			#31,d2                            
	  move.w    d2,d5                             | save for clut (rotated)
	  bra       3f                                
2:	lsl				#5,d2							                | *2*32
3:	move.w		d6,d1							                | X
		addq.w		#1,d1                   
		neg.w			d1                      
		and.w			#31,d1                  
		btst      #0,d0                   
		beq       4f                      
		lsl				#5,d1
4:  btst      #0,d0
    bne       5f
    move.w    d1,d5                             | save for clut lookup
5:	add.w			d2,d1							                | address
		moveq			#0,d3
		move.b		0(a1,d1.w),d3                     | tile from VRAM
		or.w			(_tilemap_set),d3                 | tileset
    move.w		d3,(a0)						                | neo geo tile
    move.b    0(a2,d5.w),d4                     | clut
    and.w     #0x0f,d4
    or.w      (_render_palette_bank),d4
    lsl       #8,d4
		move.w		d4,(a0)			                      | palette
		dbf				d6,3b		
		dbf				d7,1b		
    KICK_WDOG
    rts

render_tilemap_rotated:

		lea				VRAM_RW.l,a0
		move.w		#(SCB1+TMSS*32*2),-2(a0)	      	| VRAM_ADDR=SCB1
		move.w		#1,2(a0)					                | VRAM_MOD=1
		lea				_vram,a1
		lea       _dkong_clut,a2
		moveq			#0,d7
1:	moveq			#0,d6
		move.w		d7,d2							                | Y
    move.b    0(a2,d2.w),d4                     | clut
    and.w     #0x0f,d4
    or.w      (_render_palette_bank),d4
    lsl       #8,d4															| palette
2:	move.w		d6,d1							                | X
		lsl				#5,d1
		add.w			d2,d1							                | address
		moveq			#0,d3
		move.b		0(a1,d1.w),d3                     | tile from VRAM
		or.w			(_tilemap_set),d3                 | tileset
    move.w		d3,(a0)						                | neo geo tile
* need 12 cpu clock cycles between VRAM accesses
    nop
    nop
    nop
    nop
		move.w		d4,(a0)			                      | palette
		addq.w		#1,d6
		cmpi.w		#32,d6
		bne				2b
		addq.w		#1,d7
		cmpi.w		#32,d7
		bne				1b
    KICK_WDOG
    rts

render_sprites:

* palette helper		
		move.b    (_palette_bank),d1
    and.w     #0x00ff,d1
    lsl.b     #4,d1
    ori.w     #64,d1                            | base palette 64
    move.w    d1,(_render_palette_bank)

		move.b		#2,d2															| flipx
		move.b		#1,d3															| flipy
    move.w    #0,d4                             | offset of DKY(NGX)
    move.w    #3,d5                             | offset of DKX(NGY)
    tst.b     (_rotate)
    beq       0f
    eor.b			#3,d2
    eor.b			#3,d3
    exg       d4,d5

0:	lea				VRAM_RW.l,a0
		move.w		#32*2,2(a0)												| VRAM_MOD=64

* - tile
		move.w		#(SCB1+SPRSS*32*2),-2(a0)					| start sprite=<SPRSS>
		moveq			#(NDKS-1),d7											| <NDKS> sprites to render
		LEA_SRAM_A 0,a1															| start of sprite ram
1:	move.b		1(a1),d0													| tile
		and.w			#0x007f,d0
		or.w			(_sprite_set),d0									| tileset for sprites
		move.w		d0,(a0)														| tile
		adda			#4,a1															| next sprite
		dbf				d7,1b
* - palette, flip
*	  - color = (m_sprite_ram[offs + 2] & 0x0f) + 16 * m_palette_bank;
		move.w		#(SCB1+SPRSS*32*2+1),-2(a0)				| start sprite=<SPRSS>
		moveq			#(NDKS-1),d7											| <NDKS> sprites to render
		LEA_SRAM_A 0,a1															| start of sprite ram
2:	move.b		1(a1),d1													| flipy
		move.b    2(a1),d0                          | flipx,colour
    and.w     #0x000f,d0
    or.w      (_render_palette_bank),d0         | 16 * m_palette_bank
    lsl.w     #8,d0
    btst			#7,d1															| flipy?
    beq				3f																| no, skip
    or.b			d3,d0															| flip 'y'
3:  move.b    2(a1),d1                          | flipx,colour
    btst      #7,d1                             | flipx?
    beq       4f                                | no, skip
    or.b      d2,d0                             | flip 'x'       
4:  move.w		d0,(a0)														| palette
		adda			#4,a1															| next sprite
		dbf				d7,2b

		move.w		#1,2(a0)													| VRAM_MOD=1

* vertical position, sticky, size
		move.w		#(SCB3+SPRSS),-2(a0)							| VRAM_ADDR=SCB3
		moveq			#(NDKS-1),d7											| <NDKS> sprites to render
		LEA_SRAM_A 0,a1															| start of sprite ram
3:	move.b		0(a1,d5.w),d0											| Y coordinate
		tst.b			(_rotate)
    bne       4f
		sub.b			#19,d0														| temp fudge for non-rotate
    bra				5f
4:	add.b			#24,d0														| temp fudge for rotate
		not.w     d0		
5: 	and.w     #0x00ff,d0
		not.w			d0                      					| }
		and.w			#0x1FF,d0               					| } from the video library
		sub.w			#0xF,d0                 					| }
		lsl.w			#7,d0                   					
		ori.w			#1,d0						      						| size=1
		move.w		d0,(a0)														| SCB3 data
		adda			#4,a1															| next sprite
		dbf				d7,3b
*		- horizontal position		
		move.w		#(SCB4+SPRSS),-2(a0)							| VRAM_ADDR=SCB4
		moveq			#(NDKS-1),d7											| <NDKS> sprites to render
		LEA_SRAM_A 0,a1															| start of sprite ram
8:	move.b		0(a1,d4.w),d0											| X coordinate
*    add.b     #(0xf7+1),d0                      | MAME source
		add.b			#0x08,d0													| my fudge
		and.w			#0x00ff,d0
		lsl.w			#7,d0
		move.w		d0,(a0)														| SCB4 data
		adda			#4,a1															| next sprite
		dbf				d7,8b
		rts

_end_of_ng_code:
		
/*
* now read some out again

		lea				junk,a1

		move.w		#SCB1,d1
		move.w		#1024,d7
1:	move.w		d1,(a0)						| VRAM_ADDR
		move.w		(a0),(a1)+				| tile
		move.w		(a0),(a1)+				| attributes
		add.w			#2,d1
		dbf				d7,1b		
    KICK_WDOG

		move.w		#SCB2,d1
		moveq			#32-1,d7					| 32 tiles
1:	move.w		d1,(a0)						| VRAM_ADDR
		move.w		(a0),(a1)+				| shrinking coefficients
		add.w			#2,d1
		dbf				d7,1b
    KICK_WDOG

		move.w		#SCB3,d1
		moveq			#32-1,d7					| 31 more sprites
1:	move.w		d1,(a0)						| VRAM_ADDR
		move.w		(a0),(a1)+				| VPOS
		add.w			#2,d1
		dbf				d7,1b
    KICK_WDOG

		move.w		#SCB4,d1
		moveq			#32-1,d7
1:	move.w		d1,(a0)						| VRAM_ADDR
		move.w		(a0),(a1)+				| HPOS
		add.w			#2,d1
		dbf				d7,1b
    KICK_WDOG

		rts
*/
		
		.text
		
_dkong_palette:
		.word		0x8000, 0x199F, 0x30FF, 0x4F00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB5, 0x4F00, 0x100A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x4F00, 0x20F0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6F60, 0x6FB0, 0x4F00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x5F0A, 0x6FF0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F00, 0x100F, 0x30FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x6F60, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100A, 0x7FFF, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x6F60, 0x6FB5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x30FF, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F00, 0x6FB0, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4D95, 0x6FB5, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x0000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x199F, 0x30FF, 0x4F00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB5, 0x4F00, 0x100A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6F60, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6F60, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6F60, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6F60, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x6F60, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100A, 0x7FFF, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x6F60, 0x6FB5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x30FF, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F00, 0x6FB0, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4D95, 0x6FB5, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x0000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x199F, 0x30FF, 0x4F00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB5, 0x4F00, 0x100A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F25, 0x0900, 0x30FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F25, 0x0900, 0x30FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F25, 0x0900, 0x30FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F25, 0x0900, 0x30FF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x6F60, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100A, 0x7FFF, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x6F60, 0x6FB5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x30FF, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F00, 0x6FB0, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4D95, 0x6FB5, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x0000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x199F, 0x30FF, 0x4F00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB5, 0x4F00, 0x100A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x30FF, 0x6FB0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x30FF, 0x6FB0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x30FF, 0x6FB0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x30FF, 0x6FB0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x7FFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4B00, 0x6FB5, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x6F60, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100A, 0x7FFF, 0x5F4A, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x100F, 0x6F60, 0x6FB5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x7FFF, 0x30FF, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4F00, 0x6FB0, 0x6F60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x4D95, 0x6FB5, 0x100F, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
		.word		0x0000, 0x6FB0, 0x4F00, 0x0000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

_dkong_clut:
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03 
    .byte   0x00, 0x01, 0x01, 0x02, 0x06, 0x06, 0x04, 0x06, 0x06, 0x06, 0x06, 0x03, 0x06, 0x03, 0x04, 0x03 
    .byte   0x06, 0x06, 0x06, 0x06, 0x04, 0x03, 0x04, 0x05, 0x04, 0x06, 0x05, 0x03, 0x05, 0x03, 0x06, 0x03

.ifeq 1
_dkong_vram:
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0xE0 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF5, 0xE5, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF1, 0xE1 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x8D, 0x7D, 0x8C, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF5, 0xE5, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF1, 0xE1 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x6F, 0x00, 0x7C, 0x10, 0x10, 0x10, 0xF0, 0x10, 0xF6, 0xE6, 0x10 
		.byte		0x10, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0xF0, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0xF2, 0xE2 
		.byte		0x10, 0x10, 0x10, 0x00, 0x10, 0x6E, 0x00, 0x7C, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0xF6, 0xE6, 0x10 
		.byte		0x10, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0xF0, 0xE0, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0xF2, 0xE2 
		.byte		0x10, 0x10, 0x10, 0x00, 0x10, 0x6D, 0x09, 0x7C, 0x10, 0x10, 0xF7, 0xC7, 0xC0, 0xD7, 0xE7, 0x10 
		.byte		0x10, 0x10, 0x10, 0xF1, 0xC1, 0xC0, 0xD1, 0xE1, 0x10, 0x10, 0x10, 0xF3, 0xC3, 0xC0, 0xD3, 0xE3 
		.byte		0xFB, 0x10, 0x10, 0x34, 0x10, 0x6C, 0x04, 0x7C, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0xF7, 0xE7, 0x10 
		.byte		0x10, 0x10, 0x10, 0xF1, 0xE1, 0x10, 0xF1, 0xE1, 0x10, 0x10, 0x10, 0xF3, 0xE3, 0x10, 0xF3, 0xE3 
		.byte		0x10, 0x10, 0x10, 0x1C, 0x10, 0x8F, 0x7F, 0x8E, 0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0xF0, 0xC0 
		.byte		0x10, 0x10, 0xC0, 0xD0, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0xF4, 0xE4 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0xF0, 0xE0 
		.byte		0x10, 0x10, 0x10, 0xF0, 0xE0, 0x10, 0xF2, 0xE2, 0x10, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0xF4, 0xE4 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF5, 0xE5, 0x10, 0x10, 0xF1, 0xE1 
		.byte		0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0x10, 0xF1, 0xE1, 0x10, 0xF5, 0xE5 
		.byte		0x15, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF5, 0xE5, 0x10, 0x10, 0xF1, 0xE1 
		.byte		0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0x10, 0xF1, 0xE1, 0x10, 0xF5, 0xE5 
		.byte		0x22, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF2, 0xE2 
		.byte		0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF6, 0xE6 
		.byte		0x1F, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0xC0, 0xC0, 0xD4, 0xE4, 0x10, 0x10, 0xF2, 0xE2 
		.byte		0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0x10, 0xF6, 0xE6 
		.byte		0x13, 0x05, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF3, 0xE3 
		.byte		0x10, 0x10, 0xF5, 0xE5, 0x10, 0x10, 0xF5, 0xE5, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF7, 0xE7 
		.byte		0x23, 0x06, 0x10, 0x10, 0x0F, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF3, 0xE3 
		.byte		0x10, 0x10, 0xF5, 0xC5, 0xC0, 0xC0, 0xD5, 0xE5, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF7, 0xE7 
		.byte		0x10, 0x07, 0x10, 0x10, 0x0E, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF4, 0xE4 
		.byte		0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0xF6, 0xE6, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x18, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF4, 0xE4 
		.byte		0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF6, 0xC6, 0xC0, 0xC0, 0xD6, 0xE6, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x17, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xC4, 0x10, 0xC0, 0xD5, 0xE5 
		.byte		0x10, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF5, 0xE5, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x19, 0x10, 0x10, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xD4, 0xE4, 0x10, 0x10, 0xF5, 0xE5 
		.byte		0x10, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0xF7, 0xE7, 0x10, 0x10, 0xF5, 0xC5, 0x10, 0x10, 0xC0, 0xD0 
		.byte		0x18, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF6, 0xC6 
		.byte		0xC0, 0xC0, 0xD2, 0xE2, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0x10, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xD4, 0xE4, 0x10, 0x10, 0xF6, 0xE6 
		.byte		0x10, 0x10, 0xF2, 0xC2, 0x10, 0x10, 0xC0, 0xD0, 0xE0, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF7, 0xE7 
		.byte		0x10, 0x10, 0xF1, 0xE1, 0x10, 0x10, 0x10, 0xF1, 0xE1, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0xF7, 0xE7 
		.byte		0x10, 0x10, 0xF1, 0xE1, 0x10, 0x10, 0x10, 0xF1, 0xE1, 0x10, 0xF3, 0xE3, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x20, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0xF0, 0x10, 0x10, 0x10, 0x10, 0xF2, 0xE2, 0x10, 0xF2, 0xE2, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x25, 0x07, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF0 
		.byte		0xC0, 0xC0, 0xD0, 0xE0, 0x10, 0x10, 0x10, 0xF2, 0xC2, 0xC0, 0xD2, 0xE2, 0x10, 0x10, 0x10, 0xF0 
		.byte		0xFB, 0x03, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF1 
		.byte		0xE1, 0xF7, 0xE7, 0x10, 0x10, 0x10, 0x10, 0xF3, 0xE3, 0x10, 0xF1, 0xE1, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0xF1 
		.byte		0xE1, 0xF7, 0xE7, 0x10, 0x10, 0x10, 0x10, 0xF3, 0xE3, 0x10, 0xF1, 0xE1, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0xF6, 0xE6, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF4, 0xE4, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0xF6, 0xE6, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0, 0xE0, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 
		.byte		0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xF0
.endif

_end_of_ng_data:
	