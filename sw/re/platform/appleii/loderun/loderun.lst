zeropg:0000		;
zeropg:0000		; +-------------------------------------------------------------------------+
zeropg:0000		; |   This file	has been generated by The Interactive Disassembler (IDA)    |
zeropg:0000		; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
zeropg:0000		; |			 License info: 48-B437-7294-77			    |
zeropg:0000		; |			   Chris Nott, Virtual Logic			    |
zeropg:0000		; +-------------------------------------------------------------------------+
zeropg:0000		;
zeropg:0000		; Input	MD5   :	8B92D90C0F5E109321D37C5E468F3C89
zeropg:0000		; Input	CRC32 :	69DB7B1A
zeropg:0000
zeropg:0000
zeropg:0000		; ; Processor:	      M65C02
zeropg:0000		; ; Target assembler: SVENSON ELECTRONICS 6502/65C02 ASSEMBLER - V.1.0 - MAY, 1988
zeropg:0000
zeropg:0000		; ===========================================================================
zeropg:0000
zeropg:0000		; Segment type:	Regular
zeropg:0000				;.segment zeropg
zeropg:0000 64		current_col:	.BYTE $64			; DATA XREF: ROM:60B2r
zeropg:0000								; init_read_unpack_display_level+4w ...
zeropg:0001 76		current_row:	.BYTE $76			; DATA XREF: ROM:60B6r
zeropg:0001								; ROM:loc_60F5r ...
zeropg:0002 00		x_offset_within_tile:.BYTE 0			; 0..4
zeropg:0003 00		y_offset_within_tile:.BYTE 0			; 0..4
zeropg:0004 00		sprite_index:	.BYTE 0
zeropg:0005 00		dir:		.BYTE 0
zeropg:0006 00		lsb_row_level_data_addr:.BYTE 0			; DATA XREF: init_read_unpack_display_level+34w
zeropg:0006								; init_read_unpack_display_level:loc_629Cw ...
zeropg:0007 00		msb_row_level_data_addr:.BYTE 0			; DATA XREF: init_read_unpack_display_level+3Bw
zeropg:0007								; sub_62C7+12w	...
zeropg:0008 60		byte_8:		.BYTE $60			; DATA XREF: init_read_unpack_display_level+36w
zeropg:0008								; init_read_unpack_display_level+66w ...
zeropg:0009 00		byte_9:		.BYTE 0				; DATA XREF: init_read_unpack_display_level+40w
zeropg:0009								; init_and_draw_level+13w ...
zeropg:000A 18 00	word_A:		.WORD $18			; DATA XREF: render_char_in_buffer+1Fr
zeropg:000A								; render_char_in_buffer+74r ...
zeropg:000A								; base ptr for indirect	indexed	addressing
zeropg:000C 00		lsb_line_addr_pg1:.BYTE	0			; DATA XREF: ROM:6037w
zeropg:000C								; read_level_data+40w ...
zeropg:000C								; lsb of line address
zeropg:000D 00		msb_line_addr_pg1:.BYTE	0			; DATA XREF: read_level_data+3Cw
zeropg:000D								; init_and_draw_level+BCw ...
zeropg:000D								; msb of line address
zeropg:000E 00		lsb_line_addr_pg2:.BYTE	0			; DATA XREF: init_and_draw_level+C0w
zeropg:000E								; init_and_draw_level+C7w ...
zeropg:000F 00		msb_line_addr_pg2:.BYTE	0			; DATA XREF: init_and_draw_level+B8w
zeropg:000F								; init_and_draw_level+CCw ...
zeropg:0010 00 00	msg_addr:	.WORD 0				; DATA XREF: display_message+1w
zeropg:0010								; display_message+Ar ...
zeropg:0012 00		curr_guard_col:	.BYTE 0				; DATA XREF: ROM:6D14r
zeropg:0012								; ROM:6D43r ...
zeropg:0013 00		curr_guard_row:	.BYTE 0				; DATA XREF: ROM:check_guard_fallingr
zeropg:0013								; ROM:6D2Cr ...
zeropg:0014 00		curr_guard_sprite:.BYTE	0			; DATA XREF: ROM:loc_6D75w
zeropg:0014								; calc_guard_xychar+10r ...
zeropg:0015 00		curr_guard_dir:	.BYTE 0				; DATA XREF: ROM:6D6Fr
zeropg:0015								; ROM:6FFCw ...
zeropg:0016 00		curr_guard_state:.BYTE 0			; DATA XREF: ROM:6CEAr
zeropg:0016								; ROM:6CF0w ...
zeropg:0017 00		curr_guard_x_offset:.BYTE 0			; DATA XREF: ROM:6E74w
zeropg:0017								; ROM:6FCFr ...
zeropg:0018 00		curr_guard_y_offset:.BYTE 0			; DATA XREF: ROM:6D20r
zeropg:0018								; ROM:loc_6D26r ...
zeropg:0019 00		curr_guard:	.BYTE 0				; DATA XREF: init_read_unpack_display_level+Dw
zeropg:0019								; ROM:update_guardsw ...
zeropg:001A 00		nibble_cnt:	.BYTE 0				; DATA XREF: init_read_unpack_display_level+13w
zeropg:001A								; init_read_unpack_display_level:loc_627Er ...
zeropg:001B 00		scanline:	.BYTE 0				; DATA XREF: find_farthest_left_right+4w
zeropg:001B								; find_farthest_left_right+Ar ...
zeropg:001C 00		col_addr_offset:.BYTE 0				; DATA XREF: display_char_pg2+12w
zeropg:001C								; display_char_pg2+34r	...
zeropg:001D 00		scanline_cnt:	.BYTE 0				; DATA XREF: display_char_pg2+25w
zeropg:001D								; display_char_pg2+4Cw	...
zeropg:001E 00		msg_char:	.BYTE 0				; DATA XREF: sub_62C7+1Fw
zeropg:001E								; sub_62C7+27r	...
zeropg:001F 00		hires_page_msb_1:.BYTE 0			; DATA XREF: read_disk_and_chk_sig-33Aw
zeropg:001F								; calc_line_addr_in_0C+8r ...
zeropg:0020 00		unk_20:		.BYTE	0
zeropg:0021 28				.BYTE $28 ; (
zeropg:0022 00				.BYTE	0
zeropg:0023 4C		unk_23:		.BYTE $4C ; L
zeropg:0024 00		unk_24:		.BYTE	0
zeropg:0025 00		unk_25:		.BYTE	0
zeropg:0026 0E				.BYTE $E
zeropg:0027 18				.BYTE $18
zeropg:0028 00				.BYTE	0
zeropg:0029 04				.BYTE	4
zeropg:002A 00				.BYTE 0
zeropg:002B 60				.BYTE $60
zeropg:002C 00				.BYTE	0
zeropg:002D 00				.BYTE 0
zeropg:002E 00				.BYTE 0
zeropg:002F 00				.BYTE 0
zeropg:0030 00		unk_30:		.BYTE	0
zeropg:0031 00				.BYTE	0
zeropg:0032 FF				.BYTE $FF
zeropg:0033 00				.BYTE	0
zeropg:0034 00				.BYTE	0
zeropg:0035 00				.BYTE 0
zeropg:0036 50 8E	off_36:		.WORD loc_8E50
zeropg:0038 B5		byte_38:	.BYTE $B5			; DATA XREF: ROM:loc_6091r
zeropg:0039 B7		unk_39:		.BYTE $B7 ; ·
zeropg:003A 00				.BYTE	0
zeropg:003B 00				.BYTE	0
zeropg:003C FF				.BYTE $FF
zeropg:003D 05				.BYTE	5
zeropg:003E 00				.BYTE 0
zeropg:003F 00				.BYTE 0
zeropg:0040 00				.BYTE	0
zeropg:0041 18				.BYTE $18
zeropg:0042 00				.BYTE	0
zeropg:0043 00				.BYTE	0
zeropg:0044 00				.BYTE 0
zeropg:0045 00		unk_45:		.BYTE	0
zeropg:0046 00				.BYTE 0
zeropg:0047 00				.BYTE 0
zeropg:0048 00				.BYTE 0
zeropg:0049 00				.BYTE 0
zeropg:004A 00				.BYTE	0
zeropg:004B 00				.BYTE	0
zeropg:004C 00				.BYTE	0
zeropg:004D 00				.BYTE	0
zeropg:004E 00				.BYTE	0
zeropg:004F 00				.BYTE 0
zeropg:0050 00		lchar_mask:	.BYTE 0				; DATA XREF: read_disk_and_chk_sig+2Cw
zeropg:0050								; read_disk_and_chk_sig+34r ...
zeropg:0051 00		rchar_mask:	.BYTE 0				; DATA XREF: display_char_pg2+1Ew
zeropg:0051								; display_char_pg2+42r	...
zeropg:0052 00		byte_52:	.BYTE 0				; DATA XREF: draw_sprite+6r
zeropg:0052								; display_transparent_char+14w	...
zeropg:0053 00		guard_respawn_col:.BYTE	0			; DATA XREF: ROM:6064w
zeropg:0053								; check_guard_pickup_gold+27r ...
zeropg:0054 00		byte_54:	.BYTE 0				; DATA XREF: ROM:60C3w
zeropg:0054								; sub_8811r ...
zeropg:0055 00		guard_ai_col:	.BYTE 0				; DATA XREF: guard_aiw
zeropg:0055								; guard_ai+Er ...
zeropg:0056 00		guard_ai_row:	.BYTE 0				; DATA XREF: guard_ai+2w
zeropg:0056								; guard_ai:loc_70F7r ...
zeropg:0057 00		target_col:	.BYTE 0				; DATA XREF: guard_ai+2Aw
zeropg:0057								; guard_ai:guard_left_of_playerw ...
zeropg:0058 00		guard_ai_dir:	.BYTE 0				; DATA XREF: guard_ai+B0w
zeropg:0058								; guard_ai+C6r	...
zeropg:0059 00		guard_ai_best_delta:.BYTE 0			; DATA XREF: guard_ai+B4w
zeropg:0059								; guard_ai_left+2Er ...
zeropg:005A 00		farthest_left:	.BYTE 0				; DATA XREF: guard_ai_leftr
zeropg:005A								; guard_ai_left+16r ...
zeropg:005B 00		farthest_right:	.BYTE 0				; DATA XREF: guard_ai_rightr
zeropg:005B								; guard_ai_right+16r ...
zeropg:005C 00		farthest_updown_plyr_row:.BYTE 0		; DATA XREF: ROM:6126w
zeropg:005C								; ROM:6138w ...
zeropg:005D 00		byte_5D:	.BYTE 0				; DATA XREF: find_farthest_up+2w
zeropg:005D								; find_farthest_up+Er ...
zeropg:005E 00		byte_5E:	.BYTE 0				; DATA XREF: find_farthest_up:loc_72FDr
zeropg:005E								; find_farthest_upw ...
zeropg:005F 00		guard_trap_cnt_init:.BYTE 0
zeropg:0060 00		byte_60:	.BYTE 0				; DATA XREF: ROM:60D1w
zeropg:0060								; handle_guards:loc_6C92r
zeropg:0061 00		byte_61:	.BYTE 0
zeropg:0062 00		byte_62:	.BYTE 0
zeropg:0063 00		byte_63:	.BYTE 0
zeropg:0064 00		byte_64:	.BYTE 0
zeropg:0065 00		unk_65:		.BYTE	0
zeropg:0066 00		unk_66:		.BYTE	0
zeropg:0067 00		unk_67:		.BYTE	0
zeropg:0068 00		unk_68:		.BYTE	0
zeropg:0069 00				.BYTE 0
zeropg:006A 00		unk_6A:		.BYTE	0
zeropg:006B 00		unk_6B:		.BYTE	0
zeropg:006C 00		unk_6C:		.BYTE	0
zeropg:006D 00		unk_6D:		.BYTE	0
zeropg:006E 00				.BYTE	0
zeropg:006F 00		unk_6F:		.BYTE	0
zeropg:0070 00		unk_70:		.BYTE	0
zeropg:0071 00		col_pixel_shift:.BYTE 0				; DATA XREF: display_char_pg2+14w
zeropg:0071								; display_char_pg2+29r	...
zeropg:0072 00		unk_72:		.BYTE	0
zeropg:0073 00		unk_73:		.BYTE	0
zeropg:0074 00		unk_74:		.BYTE	0
zeropg:0075 00				.BYTE 0
zeropg:0076 00		unk_76:		.BYTE	0
zeropg:0077 00		unk_77:		.BYTE	0
zeropg:0078 00		unk_78:		.BYTE	0
zeropg:0079 00		unk_79:		.BYTE	0
zeropg:007A 00		unk_7A:		.BYTE	0
zeropg:007B 00		unk_7B:		.BYTE	0
zeropg:007C 00		unk_7C:		.BYTE	0
zeropg:007D 00		unk_7D:		.BYTE	0
zeropg:007E 00		unk_7E:		.BYTE	0
zeropg:007F 00		unk_7F:		.BYTE	0
zeropg:0080 00		unk_80:		.BYTE	0
zeropg:0081 00				.BYTE 0
zeropg:0082 00		unk_82:		.BYTE	0
zeropg:0083 00		unk_83:		.BYTE	0
zeropg:0084 00		unk_84:		.BYTE	0
zeropg:0085 00		col:		.BYTE 0				; DATA XREF: ROM:60B4w
zeropg:0085								; init_read_unpack_display_level+44w ...
zeropg:0086 00		row:		.BYTE 0				; DATA XREF: read_disk_and_chk_sig-342w
zeropg:0086								; ROM:loc_603Fw ...
zeropg:0087 00		display_char_page:.BYTE	0			; DATA XREF: read_disk_and_chk_sig-338w
zeropg:0087								; ROM:7870w ...
zeropg:0088 00		byte_88:	.BYTE 0				; DATA XREF: respawn_guards_and_update_holes+14w
zeropg:0088								; respawn_guards_and_update_holes:restore_brickr ...
zeropg:0089 00		hundreds:	.BYTE 0				; DATA XREF: ROM:792Fr
zeropg:0089								; display_no_lives+Dr ...
zeropg:0089								; hundreds?
zeropg:008A 00		tens:		.BYTE 0				; DATA XREF: ROM:7934r
zeropg:008A								; ROM:794Cr ...
zeropg:008A								; tens
zeropg:008B 00		units:		.BYTE 0				; DATA XREF: ROM:7939r
zeropg:008B								; ROM:7951r ...
zeropg:008B								; units?
zeropg:008C 06		game_speed:	.BYTE 6				; DATA XREF: read_controls:speed_upr
zeropg:008C								; read_controls+AEw ...
zeropg:008D 00		no_guards:	.BYTE 0				; DATA XREF: ROM:60C8r
zeropg:008D								; init_read_unpack_display_level+Bw ...
zeropg:008E 00		score_1e1_1:	.BYTE 0				; DATA XREF: ROM:6058w
zeropg:008E								; update_and_display_score+2r ...
zeropg:008F 00		score_1e3_1e2:	.BYTE 0				; DATA XREF: ROM:605Aw
zeropg:008F								; update_and_display_score+7r ...
zeropg:0090 00		score_1e5_1e4:	.BYTE 0				; DATA XREF: ROM:605Cw
zeropg:0090								; update_and_display_score+Dr ...
zeropg:0091 00		score_1e6:	.BYTE 0				; DATA XREF: ROM:605Ew
zeropg:0091								; update_and_display_score+13r	...
zeropg:0092 00		packed_byte_cnt:.BYTE 0
zeropg:0093 00		no_gold:	.BYTE 0				; DATA XREF: ROM:60EEr
zeropg:0093								; ROM:60FFr ...
zeropg:0094 00		unk_94:		.BYTE	0
zeropg:0095 CA		paddles_detected:.BYTE $CA			; DATA XREF: ROM:loc_6199r
zeropg:0095								; read_controls-55r ...
zeropg:0096 00		level_0_based:	.BYTE 0				; DATA XREF: read_disk_and_chk_sig-33Ew
zeropg:0096								; ROM:611Cw ...
zeropg:0097 00		unused_97:	.BYTE 0				; DATA XREF: ROM:6060w
zeropg:0097								; ROM:60C5r ...
zeropg:0098 00		no_lives:	.BYTE 0				; DATA XREF: ROM:6070w
zeropg:0098								; ROM:611Ew ...
zeropg:0099 FF		byte_99:	.BYTE $FF			; DATA XREF: ROM:61C6r
zeropg:0099								; ROM:61CBw ...
zeropg:009A 00		level_active:	.BYTE 0				; DATA XREF: ROM:60E7r
zeropg:009A								; ROM:610Ar ...
zeropg:009B 00		byte_9B:	.BYTE 0				; DATA XREF: handle_player+6Aw
zeropg:009B								; handle_player:check_falling_soundr ...
zeropg:009C 00		dig_dir:	.BYTE 0
zeropg:009D 00		game_active:	.BYTE 0				; DATA XREF: ROM:61C4w
zeropg:009D								; ROM:6208w ...
zeropg:009E 00		key_1:		.BYTE 0
zeropg:009F 00		key_2:		.BYTE 0
zeropg:00A0 00		dig_sprite:	.BYTE 0
zeropg:00A1 00		timer:		.BYTE 0				; DATA XREF: ROM:77B5w
zeropg:00A1								; ROM:77D2w ...
zeropg:00A2 00		editor_n:	.BYTE 0
zeropg:00A3 00		no_eos_ladder_tiles:.BYTE 0			; DATA XREF: init_read_unpack_display_level+7w
zeropg:00A3								; init_and_draw_level+23r ...
zeropg:00A4 00		byte_A4:	.BYTE 0				; DATA XREF: handle_player+D4w
zeropg:00A4								; sub_8811+25r	...
zeropg:00A5 00		byte_A5:	.BYTE 0
zeropg:00A6 00		level:		.BYTE 0				; DATA XREF: ROM:next_levelw
zeropg:00A6								; ROM:61C0w ...
zeropg:00A7 00		attract_mode:	.BYTE 0				; DATA XREF: read_disk_and_chk_sig-340w
zeropg:00A7								; ROM:6072r ...
zeropg:00A8 00		lsb_demo_inp_ptr:.BYTE 0			; DATA XREF: ROM:6068w
zeropg:00A8								; read_controls-36r ...
zeropg:00A9 00		msb_demo_inp_ptr:.BYTE 0
zeropg:00AA 00		demo_inp_key_1_2:.BYTE 0
zeropg:00AB 00		demo_inp_cnt:	.BYTE 0
zeropg:00AC 00		byte_AC:	.BYTE 0				; DATA XREF: ROM:61C2w
zeropg:00AC								; ROM:61D7r ...
zeropg:00AD 00				.BYTE 0
zeropg:00AE 00				.BYTE	0
zeropg:00AF 00				.BYTE	0
zeropg:00B0 00				.BYTE	0
zeropg:00B1 00				.BYTE	0
zeropg:00B2 00				.BYTE	0
zeropg:00B3 00				.BYTE	0
zeropg:00B4 00				.BYTE	0
zeropg:00B5 00				.BYTE	0
zeropg:00B6 00				.BYTE	0
zeropg:00B7 00				.BYTE 0
zeropg:00B8 00				.BYTE	0
zeropg:00B9 00				.BYTE	0
zeropg:00BA 00				.BYTE	0
zeropg:00BB 00				.BYTE	0
zeropg:00BC 00				.BYTE	0
zeropg:00BD 00				.BYTE	0
zeropg:00BE 00				.BYTE	0
zeropg:00BF 00				.BYTE	0
zeropg:00C0 00				.BYTE	0
zeropg:00C1 00				.BYTE	0
zeropg:00C2 00				.BYTE	0
zeropg:00C3 00				.BYTE	0
zeropg:00C4 00				.BYTE	0
zeropg:00C5 00				.BYTE	0
zeropg:00C6 00				.BYTE	0
zeropg:00C7 00				.BYTE	0
zeropg:00C8 00				.BYTE	0
zeropg:00C9 00				.BYTE	0
zeropg:00CA 00				.BYTE	0
zeropg:00CB 00				.BYTE	0
zeropg:00CC 00				.BYTE	0
zeropg:00CD 00				.BYTE	0
zeropg:00CE 00				.BYTE	0
zeropg:00CF 00				.BYTE	0
zeropg:00D0 00				.BYTE	0
zeropg:00D1 00				.BYTE	0
zeropg:00D2 00				.BYTE	0
zeropg:00D3 00				.BYTE	0
zeropg:00D4 00				.BYTE	0
zeropg:00D5 00				.BYTE	0
zeropg:00D6 00				.BYTE	0
zeropg:00D7 00				.BYTE	0
zeropg:00D8 00				.BYTE	0
zeropg:00D9 00				.BYTE	0
zeropg:00DA 00				.BYTE	0
zeropg:00DB 00				.BYTE	0
zeropg:00DC 00				.BYTE	0
zeropg:00DD 00				.BYTE	0
zeropg:00DE 00				.BYTE	0
zeropg:00DF 00 00 00	char_render_buf:.BYTE 0, 0, 0			; DATA XREF: display_char_pg2+3Ar
zeropg:00DF								; display_char_pg2+44r	...
zeropg:00DF								; 3 bytes per scanline
zeropg:00DF								; 11 scanlines per char
zeropg:00E2 00 00 00			.BYTE 0, 0, 0
zeropg:00E5 00 00 00			.BYTE 0, 0, 0
zeropg:00E8 00 00 00			.BYTE 0, 0, 0
zeropg:00EB 00 00 00			.BYTE 0, 0, 0
zeropg:00EE 00 00 00			.BYTE 0, 0, 0
zeropg:00F1 00 00 00			.BYTE 0, 0, 0
zeropg:00F4 00 00 00			.BYTE 0, 0, 0
zeropg:00F7 00 00 FF			.BYTE 0, 0, $FF
zeropg:00FA B0 13 00			.BYTE $B0, $13,	0
zeropg:00FD FF 00 BD	byte_FD:	.BYTE $FF, 0, $BD
zeropg:00FD		; end of 'zeropg'
zeropg:00FD
c00:0C00	     ; ===========================================================================
c00:0C00
c00:0C00	     ; Segment type: Regular
c00:0C00			     ;.segment c00
c00:0C00			     * =  $C00
c00:0C00 ?? ?? ?? ??+eos_ladder_col: .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C00 ?? ?? ?? ??+						     ; DATA XREF: init_and_draw_level+32w
c00:0C00 ?? ?? ?? ??+						     ; draw_end_of_screen_ladder+2w ...
c00:0C00 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C00 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C30 ?? ?? ?? ??+eos_ladder_row: .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C30 ?? ?? ?? ??+						     ; DATA XREF: init_and_draw_level+2Ew
c00:0C30 ?? ?? ?? ??+						     ; draw_end_of_screen_ladder+16r
c00:0C30 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C30 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0C60 ?? ?? ?? ??+guard_col:	     .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C60 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+53w
c00:0C60							     ; ROM:75ACw ...
c00:0C68 ?? ?? ?? ??+guard_row:	     .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C68 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+58w
c00:0C68							     ; ROM:75B1w ...
c00:0C70 ?? ?? ?? ??+guard_state:    .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C70 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+5Dw
c00:0C70							     ; ROM:75C0w ...
c00:0C70							     ; -ve = carrying gold
c00:0C70							     ; 7-12 = wriggling	to escape hole
c00:0C78 ?? ?? ?? ??+guard_x_offset: .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C78 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+65w
c00:0C78							     ; ROM:75B6w ...
c00:0C80 ?? ?? ?? ??+guard_y_offset: .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C80 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+68w
c00:0C80							     ; ROM:75BBw ...
c00:0C88 ?? ?? ?? ??+guard_sprite:   .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C88 ?? ?? ?? ??						     ; DATA XREF: init_and_draw_level+60w
c00:0C88							     ; ROM:75CAw ...
c00:0C90 ?? ?? ?? ??+guard_dir:	     .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C90 ?? ?? ?? ??						     ; DATA XREF: ROM:75C5w
c00:0C90							     ; copy_guard_to_curr+1Br
c00:0C98 ?? ?? ?? ??+guard_cnt:	     .BYTE 0,0,0,0,0,0,0,0 ; (uninited)
c00:0C98 ?? ?? ?? ??						     ; DATA XREF: init_read_unpack_display_level:loc_625Aw
c00:0C98							     ; ROM:6CFDr ...
c00:0CA0 ?? ?? ?? ??+hole_col:	     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CA0 ?? ?? ?? ??+						     ; DATA XREF: dig_left+49Dw
c00:0CA0 ?? ?? ?? ??+						     ; respawn_guards_and_update_holes+20r ...
c00:0CA0 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CC0 ?? ?? ?? ??+hole_row:	     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CC0 ?? ?? ?? ??+						     ; DATA XREF: dig_left+498w
c00:0CC0 ?? ?? ?? ??+						     ; respawn_guards_and_update_holes+25r ...
c00:0CC0 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CE0 ?? ?? ?? ??+hole_cnt:	     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CE0 ?? ?? ?? ??+						     ; DATA XREF: init_read_unpack_display_level:loc_6252w
c00:0CE0 ?? ?? ?? ??+						     ; dig_left+491r ...
c00:0CE0 ?? ?? ?? ??+		     .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; (uninited)
c00:0CE0 ?? ?? ?? ??+; end of 'c00'
c00:0CE0 ?? ?? ?? ??+
data:0F00	      ;	===========================================================================
data:0F00
data:0F00	      ;	Segment	type: Regular
data:0F00			      ;.segment	data
data:0F00			      *	=  $F00
data:0F00 12 85	18 85+title_screen:   .BYTE $12, $85, $18, $85,	$1C, $94, $23, $A8, 0, $11, $A0, $95, $18 ; >0 line x offset in	bytes
data:0F00 1C 94	23 A8+		      .BYTE $85, $1C, $94, $23,	$A8, 0,	$11, $A0, $95, $18, $85, $1C, $94 ; <0 graphic byte data
data:0F00 00 11	A0 95+		      .BYTE $23, $A8, 0, $11, $A8, $D0,	$18, $85, $1C, $94, $23, $A8, 0	; =0 end of line
data:0F00 18 85	1C 94+		      .BYTE 6, $94, $C,	$85, $11, $A8, $D0, $18, $85, $1C, $94,	$23, $A8
data:0F00 23 A8	00 11+		      .BYTE 0, 6, $94, $C, $85,	$11, $A8, $D0, $18, $85, $1C, $94, $23
data:0F00 A0 95	18 85+		      .BYTE $A8, 0, 6, $94, $C,	$85, $11, $A8, $D0, $18, $85, $1C, $94
data:0F00 1C 94	23 A8+		      .BYTE $23, $A8, 0, 4, $84, $A0, $D5, $82,	$90, $80, $81, $A8, $D5
data:0F00 00 11	A8 D0+		      .BYTE $80, $84, $11, $A8,	$D0, $18, $85, $1C, $94, $23, $A8, 0, 4
data:0F00 18 85	1C 94+		      .BYTE $94, $A0, $D5, $82,	$94, $80, $85, $A8, $D5, $80, $85, $11
data:0F00 23 A8	00 06+		      .BYTE $A8, $94, $18, $85,	$1C, $94, $23, $A8, 0, 4, $D5, $A0, $D5
data:0F00 94 0C	85 11+		      .BYTE $82, $D5, $A0, $95,	$A8, $D5, $A0, $95, $11, $A8, $95, $80
data:0F00 A8 D0	18 85+		      .BYTE $85, $A8, $80, $A8,	$85, $A8, $80, $A8, $D4, $82, $94, $A8
data:0F00 1C 94	23 A8+		      .BYTE $C0, $82, $C0, $AA,	0, 4, $D5, $82,	$94, $A0, $D5, $A0, $D5
data:0F00 00 06	94 0C+		      .BYTE $80, $85, $A8, $95,	$11, $A8, $95, $A0, $85, $AA, $81, $AA
data:0F00 85 11	A8 D0+		      .BYTE $85, $AA, $81, $AA,	$D4, $8A, $94, $A8, $D0, $8A, $D0, $AA
data:0F00 18 85	1C 94+		      .BYTE 0, 4, $D5, $8A, $94, $A8, $D5, $A0,	$D5, $82, $85, $AA, $95
data:0F00 23 A8	00 06+		      .BYTE $11, $A8, $95, $A0,	$85, $AA, $80, $AA, $85, $AA, $81, $AA
data:0F00 94 0C	85 11+		      .BYTE $D4, $8A, $94, $A8,	$D0, $8A, $D0, $AA, 0, 4, $94, $AA, $94
data:0F00 A8 D0	18 85+		      .BYTE $AA, $94, $80, $C5,	$8A, $C5, $8A, $85, $11, $A8, $D4, $A8
data:0F00 1C 94	23 A8+		      .BYTE $C1, $8A, $C4, $82,	$C5, $82, $C5, $8A, $94, $A8, $94, $A8
data:0F00 00 04	84 A0+		      .BYTE $94, $A8, $94, $A8,	0, 4, $94, $A8,	$D5, $8A, $94, $80, $85
data:0F00 D5 82	90 80+		      .BYTE $AA, $D5, $82, $85,	$11, $A8, $D0, $A8, $C0, $82, $C5, $82
data:0F00 81 A8	D5 80+		      .BYTE $C5, $82, $C5, $82,	$94, $A8, $94, $A8, $94, $A8, $94, $A8
data:0F00 84 11	A8 D0+		      .BYTE 0, 4, $90, $A0, $D5, $82, $94, $80,	$85, $A8, $D5, $80, $85
data:0F00 18 85	1C 94+		      .BYTE $11, $A8, $D0, $A8,	$C0, $82, $C5, $82, $C5, $82, $C5, $82
data:0F00 23 A8	00 04+		      .BYTE $94, $A8, $94, $A8,	$94, $A8, $94, $A8, 0, 4, $D0, $80, $D5
data:0F00 94 A0	D5 82+		      .BYTE $80, $85, $80, $94,	$A0, $95, $A0, $81, $11, $A8, $D0, $A8
data:0F00 94 80	85 A8+		      .BYTE $C0, $82, $C5, $82,	$C5, $AA, $C1, $82, $94, $A8, $94, $A8
data:0F00 D5 80	85 11+		      .BYTE $94, $A8, $94, $A8,	0, 4, $D0, 8, $85, $80,	$94, $D, $A0, $81
data:0F00 A8 94	18 85+		      .BYTE $11, $A8, $D0, $A8,	$C0, $82, $C5, $82, $C5, $AA, $C1, $82
data:0F00 1C 94	23 A8+		      .BYTE $94, $A8, $94, $A8,	$94, $A8, $94, $A8, 0, 4, $D0, 8, $85
data:0F00 00 04	D5 A0+		      .BYTE $80, $94, $D, $A0, $81, $11, $A8, $D0, $A8,	$C0, $82, $C5
data:0F00 D5 82	D5 A0+		      .BYTE $82, $C5, $AA, $C0,	$82, $94, $A8, $94, $A8, $94, $A8, $94
data:0F00 95 A8	D5 A0+		      .BYTE $A8, 0, 4, $D0, 8, $85, $80, $94, $D, $A0, $81, $11, $A8, $D0
data:0F00 95 11	A8 95+		      .BYTE $A8, $C0, $82, $C5,	$82, $C5, $82, $C0, $82, $94, $A8, $94
data:0F00 80 85	A8 80+		      .BYTE $A8, $94, $A8, $94,	$A8, 0,	4, $D0,	8, $85,	$8A, $94, $D, $A0
data:0F00 A8 85	A8 80+		      .BYTE $81, $11, $A8, $D0,	$A8, $C0, $80, $C5, $82, $C5, $82, $C4
data:0F00 A8 D4	82 94+		      .BYTE $82, $94, $A8, $94,	$A8, $94, $A8, $94, $A8, 0, 4, $C0, $82
data:0F00 A8 C0	82 C0+		      .BYTE $80, $A0, $81, $8A,	$D0, $D, $A8, $11, $A8,	$D0, $A8, $80
data:0F00 AA 00	04 D5+		      .BYTE $80, $C5, $82, $C5,	$82, $C5, $82, $94, $A8, $94, $A8, $94
data:0F00 82 94	A0 D5+		      .BYTE $A8, $94, $A8, 0, 4, $C0, $82, $80,	$A0, $81, $8A, $D0, $D
data:0F00 A0 D5	80 85+		      .BYTE $A8, $11, $A8, $95,	$A8, $80, $AA, $81, $AA, $81, $AA, $C1
data:0F00 A8 95	11 A8+		      .BYTE $82, $D0, $8A, $D0,	$8A, $94, $A8, $D0, $8A, 0, 4, $C0, $82
data:0F00 95 A0	85 AA+		      .BYTE $80, $A0, $D1, $AA,	$D1, $D, $A8, $11, $A8,	$95, $A8, $80
data:0F00 81 AA	85 AA+		      .BYTE $AA, $81, $AA, $81,	$AA, $C1, $82, $D0, $8A, $D0, $8A, $94
data:0F00 81 AA	D4 8A+		      .BYTE $A8, $D0, $8A, 0, 4, $C0, $82, $80,	$A0, $D1, $AA, $D1, $D
data:0F00 94 A8	D0 8A+		      .BYTE $A8, $11, $A8, $85,	$A8, $80, $A8, $80, $A8, $80, $A8, $C0
data:0F00 D0 AA	00 04+		      .BYTE $82, $C0, $82, $C0,	$82, $94, $A8, $C0, $82, 0, 5, $AA, $D5
data:0F00 D5 8A	94 A8+		      .BYTE $A2, $D1, $AA, $D1,	$A8, $D5, $8A, 0, 5, $AA, $D5, $82, $81
data:0F00 D5 A0	D5 82+		      .BYTE $8A, $90, $A8, $D5,	$8A, 0,	5, $AA,	$D5, $82, $85, $8A, $94
data:0F00 85 AA	95 11+		      .BYTE $A8, $D5, $8A, 0, 7, $8A, $95, $8A,	$95, $8A, $13, $A0, $85
data:0F00 A8 95	A0 85+		      .BYTE $17, $A0, $81, 0, 7, $8A, $D4, $AA,	$85, $8A, $13, $A8, $85
data:0F00 AA 80	AA 85+		      .BYTE $17, $A8, $81, 0, 7, $8A, $D0, $AA,	$81, $8A, $13, $A8, $85
data:0F00 AA 81	AA D4+		      .BYTE $17, $A8, $D1, 0, 7, $A8, $C0, $AA,	$C0, $82, $13, $AA, $17
data:0F00 8A 94	A8 D0+		      .BYTE $AA, $D0, 0, 7, $A8, $A, $C0, $82, $13, $8A, $17, $8A, $D0
data:0F00 8A D0	AA 00+		      .BYTE 0, 7, $A8, $A, $C0,	$82, $13, $8A, $17, $8A, $D0, 0, 7, $A8
data:0F00 04 94	AA 94+		      .BYTE $A,	$C0, $82, $13, $8A, $17, $8A, $D0, 0, 7, $A8, $A, $C0
data:0F00 AA 94	80 C5+		      .BYTE $82, $13, $8A, $17,	$8A, $D0, 0, 7,	$A0, $81, $80, $D0, $13
data:0F00 8A C5	8A 85+		      .BYTE $8A, $17, $8A, $D0,	0, 7, $A0, $81,	$80, $D0, $13, $A8, $80
data:0F00 11 A8	D4 A8+		      .BYTE $A8, $C0, $AA, $D4,	$82, $85, $8A, $94, $A0, $81, $A0, $C1
data:0F00 C1 8A	C4 82+		      .BYTE $8A, 0, 7, $A0, $81, $80, $D0, $13,	$A8, $80, $AA, $C1, $AA
data:0F00 C5 82	C5 8A+		      .BYTE $D4, $82, $85, $8A,	$94, $A8, $85, $A8, $C1, $AA, 0, 7, $A0
data:0F00 94 A8	94 A8+		      .BYTE $81, $80, $D0, $13,	$A8, $80, $AA, $C1, $AA, $D4, $82, $85
data:0F00 94 A8	94 A8+		      .BYTE $8A, $94, $A8, $85,	$A8, $D1, $AA, 0, 8, $D5, $AA, $95, $13
data:0F00 00 04	94 A8+		      .BYTE $A8, $C1, $82, $85,	$8A, $D0, $80, $85, $8A, $94, $8A, $94
data:0F00 D5 8A	94 80+		      .BYTE $AA, $D0, $A0, $81,	0, 8, $D5, $AA,	$95, $13, $A0, $C1, $82
data:0F00 85 AA	D5 82+		      .BYTE $85, $8A, $D0, $80,	$85, $8A, $94, $82, $94, $8A, $D0, $A0
data:0F00 85 11	A8 D0+		      .BYTE $81, 0, 8, $D5, $AA, $95, $13, $A0,	$C5, $82, $85, $8A, $D0
data:0F00 A8 C0	82 C5+		      .BYTE $80, $85, $8A, $94,	$80, $94, $8A, $D0, $A0, $81, 0, $14, $C5
data:0F00 82 C5	82 C5+		      .BYTE $82, $85, $8A, $D0,	$80, $85, $8A, $94, $A0, $95, $8A, $D0
data:0F00 82 94	A8 94+		      .BYTE $AA, 0, $14, $C5, $82, $85,	$8A, $D0, $80, $85, $8A, $94, $A8
data:0F00 A8 94	A8 94+		      .BYTE $95, $8A, $D0, $AA,	0, $14,	$C5, $82, $85, $8A, $D0, $80, $85
data:0F00 A8 00	04 90+		      .BYTE $8A, $94, $A8, $95,	$8A, $D0, $8A, 0, $14, $C5, $82, $85, $8A
data:0F00 A0 D5	82 94+		      .BYTE $D0, $80, $85, $8A,	$94, $8A, $94, $8A, $D0, 0, $14, $C5, $82
data:0F00 80 85	A8 D5+		      .BYTE $85, $8A, $D0, $80,	$85, $8A, $94, $8A, $94, $8A, $D0, $80
data:0F00 80 85	11 A8+		      .BYTE $81, 0, $13, $A0, $C5, $82,	$85, $8A, $D0, $82, $85, $8A, $94
data:0F00 D0 A8	C0 82+		      .BYTE $8A, $94, $8A, $D0,	$A0, $81, 0, $13, $AA, $81, $AA, $81, $8A
data:0F00 C5 82	C5 82+		      .BYTE $C0, $8A, $D4, $AA,	$85, $A8, $85, $8A, $C0, $AA, 0, $13, $AA
data:0F00 C5 82	94 A8+		      .BYTE $81, $AA, $81, $8A,	$C0, $8A, $D4, $AA, $85, $A8, $85, $8A
data:0F00 94 A8	94 A8+		      .BYTE $C0, $AA, 0, $13, $AA, $80,	$A8, $80, $8A, $80, $8A, $D0, $A0
data:0F00 94 A8	00 04+		      .BYTE $81, $A0, $81, $8A,	$80, $8A, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0
data:0F00 D0 80	D5 80+		      .BYTE 0, $D, $D0,	$8A, 0,	$D, $D0, $A8, $17, $C0,	$82, 0,	$D, $D0
data:0F00 85 80	94 A0+		      .BYTE $A8, $17, $C0, $82,	0, $D, $D0, $A8, $D0, $82, $95,	$A0, $95
data:0F00 95 A0	81 11+		      .BYTE $A8, $81, $AA, $D0,	$8A, $D4, $82, 0, $D, $D0, $8A,	$94, $A0
data:0F00 A8 D0	A8 C0+		      .BYTE $D1, $A8, $80, $8A,	$C5, $A2, $C1, $82, $85, 0, $D,	$D0, $80
data:0F00 82 C5	82 C5+		      .BYTE $94, $A0, $D1, $A8,	$80, $8A, $C5, $A2, $C1, $82, $85, 0, $D
data:0F00 AA C1	82 94+		      .BYTE $D0, $80, $94, $A0,	$95, $A0, $85, $AA, $C1, $A2, $C1, $82
data:0F00 A8 94	A8 94+		      .BYTE $D4, 0, $D,	$D0, $80, $94, $A0, $81, $80, $94, $8A,	$C0, $A2
data:0F00 A8 94	A8 00+		      .BYTE $C1, $82, $C0, $82,	0, $D, $D0, $80, $94, $A0, $81,	$80, $94
data:0F00 04 D0	08 85+		      .BYTE $8A, $C0, $A2, $C1,	$82, $C0, $82, 0, $D, $D0, $80,	$94, $80
data:0F00 80 94	0D A0+		      .BYTE $95, $A8, $85, $A8,	$C1, $A2, $81, $8A, $D5, 0, 0, 0, 0, 0
data:0F00 81 11	A8 D0+		      .BYTE 0, 0, 0, 0,	0, 0, $C0, $FF,	$9F, 9,	$C0, $FF, $9F, $11, $FE
data:0F00 A8 C0	82 C5+		      .BYTE $FF, $FF, $9F, 0, $E0, $FF,	$BF, 9,	$E0, $FF, $BF, $11, $FF
data:0F00 82 C5	AA C1+		      .BYTE $FF, $FF, $BF, 0, $80, $FF,	$BF, $A, $FF, $BF, $11,	$FC, $FF
data:0F00 82 94	A8 94+		      .BYTE $FF, $BF, 0, $80, $FF, $BF,	$A, $FF, $BF, $11, $FC,	$FF, $FF
data:0F00 A8 94	A8 94+		      .BYTE $BF, 0, $80, $FF, $BF, $A, $FF, $BF, $11, $FE, $FF,	$FF, $BF
data:0F00 A8 00	04 D0+		      .BYTE 0, $C0, $FF, $BF, $A, $FF, $9F, $11, $FE, $FF, $FF,	$BF, 0
data:0F00 08 85	80 94+		      .BYTE $C0, $FF, $BF, $A, $FF, $9F, $11, $FE, $FF,	$FF, $BF, 0, $C0
data:0F00 0D A0	81 11+		      .BYTE $FF, $9F, $A, $FF, $9F, $11, $FE, $FF, $FF,	$BF, 0,	$C0, $FF
data:0F00 A8 D0	A8 C0+		      .BYTE $9F, $80, $F0, $FF,	$FF, $83, $F8, $FF, $FF, $9F, $F8, $FF
data:0F00 82 C5	82 C5+		      .BYTE $FF, $80, $80, $FF,	$BF, $FC, $9F, $F8, $FF, $FC, $BF, $FC
data:0F00 AA C0	82 94+		      .BYTE $FF, $F8, $FF, $F0,	$FF, $F3, $FF, $80, $FF, $FF, $9F, $FE
data:0F00 A8 94	A8 94+		      .BYTE $9F, $BE, 0, $C0, $FF, $9F,	$80, $FC, $FF, $FF, $87, $FC, $FF
data:0F00 A8 94	A8 00+		      .BYTE $FF, $9F, $FC, $FF,	$FF, $81, $80, $FF, $BF, $F8, $9F, $FC
data:0F00 04 D0	08 85+		      .BYTE $FF, $F9, $FF, $F8,	$FF, $FE, $FF, $E1, $FF, $FB, $FF, $C0
data:0F00 80 94	0D A0+		      .BYTE $FF, $FF, $9F, $FF,	$BF, $BF, 0, $E0, $FF, $9F, $80, $FC, $FF
data:0F00 81 11	A8 D0+		      .BYTE $FF, $87, $FE, $FF,	$FF, $8F, $FE, $FF, $FF, $81, $80, $FF
data:0F00 A8 C0	82 C5+		      .BYTE $BF, $F8, $9F, $F0,	$FF, $F9, $FF, $F8, $FF, $FE, $FF, $E1
data:0F00 82 C5	82 C0+		      .BYTE $FF, $FB, $FF, $E1,	$FF, $FF, $BF, $FC, $FF, $BF, 0, $E0, $FF
data:0F00 82 94	A8 94+		      .BYTE $9F, $80, $FE, $FF,	$FF, $87, $FF, $FF, $FF, $8F, $FE, $FF
data:0F00 A8 94	A8 94+		      .BYTE $FF, $81, $80, $FF,	$BF, $F8, $9F, $F0, $FF, $F9, $FF, $F8
data:0F00 A8 00	04 D0+		      .BYTE $FF, $FF, $FF, $E1,	$FF, $FF, $FF, $E1, $FF, $FF, $BF, $FC
data:0F00 08 85	8A 94+		      .BYTE $FF, $BF, 0, $E0, $FF, $8F,	$80, $FE, $FF, $FF, $87, $FF, $FF
data:0F00 0D A0	81 11+		      .BYTE $FF, $8F, $FF, $FF,	$FF, $81, $80, $FF, $9F, $FC, $9F, $F0
data:0F00 A8 D0	A8 C0+		      .BYTE $FF, $F8, $BF, $F8,	$FF, $FF, $FF, $E1, $FF, $FF, $FF, $F1
data:0F00 80 C5	82 C5+		      .BYTE $FF, $FF, $BF, $FE,	$FF, $9F, 0, $E0, $FF, $8F, $80, $FE, $FF
data:0F00 82 C4	82 94+		      .BYTE $FF, $C7, $FF, $FF,	$FF, $8F, $FF, $FF, $FF, $81, $C0, $FF
data:0F00 A8 94	A8 94+		      .BYTE $9F, $FC, $8F, $F0,	$FF, $FC, $BF, $F8, $FF, $FF, $FF, $E1
data:0F00 A8 94	A8 00+		      .BYTE $FF, $FF, $FF, $F0,	$FF, $FF, $BF, $FE, $FF, $9F, 0, $F0, $FF
data:0F00 04 C0	82 80+		      .BYTE $8F, $80, $FE, $FF,	$FF, $C7, $FF, $FF, $FF, $C7, $FF, $FF
data:0F00 A0 81	8A D0+		      .BYTE $FF, $81, $C0, $FF,	$9F, $FE, $8F, $F0, $FF, $FC, $BF, $F8
data:0F00 0D A8	11 A8+		      .BYTE $FF, $FF, $FF, $E1,	$FF, $FF, $FF, $F0, $FF, $FF, $9F, $FE
data:0F00 D0 A8	80 80+		      .BYTE $FF, $9F, 0, $F0, $FF, $8F,	$80, $FF, $FF, $FF, $E7, $FF, $FF
data:0F00 C5 82	C5 82+		      .BYTE $FF, $C7, $FF, $FF,	$FF, $81, $C0, $FF, $FF, $FF, $8F, $F0
data:0F00 C5 82	94 A8+		      .BYTE $FF, $FC, $BF, $F8,	$FF, $FF, $FF, $E1, $FF, $FF, $FF, $F0
data:0F00 94 A8	94 A8+		      .BYTE $FF, $FF, $9F, $FE,	$FF, $8F, 0, $F0, $FF, $87, $80, $FF, $87
data:0F00 94 A8	00 04+		      .BYTE $FF, $E7, $FF, $E1,	$FF, $C7, $FF, $C3, $FF, $81, $C0, $FF
data:0F00 C0 82	80 A0+		      .BYTE $FF, $FF, $8F, $F8,	$BF, $FC, $BF, $F8, $FF, $FC, $FF, $F0
data:0F00 81 8A	D0 0D+		      .BYTE $FF, $F9, $FF, $F8,	$FF, $E1, $9F, $FE, $BF, 0, $F0, $FF, $87
data:0F00 A8 11	A8 95+		      .BYTE $80, $FF, $C7, $FF,	$E3, $FF, $E1, $FF, $E7, $FF, $E1, $FF
data:0F00 A8 80	AA 81+		      .BYTE $81, $E0, $FF, $FF,	$FF, $87, $F8, $BF, $FC, $9F, $FC, $FF
data:0F00 AA 81	AA C1+		      .BYTE $FC, $FF, $F0, $FF,	$F8, $FF, $F8, $FF, $F0, $9F, $FF, $9F
data:0F00 82 D0	8A D0+		      .BYTE 0, $F0, $FF, $87, $80, $FF,	$C7, $FF, $E3, $FF, $F1, $FF, $E7
data:0F00 8A 94	A8 D0+		      .BYTE $FF, $E1, $FF, $80,	$E0, $FF, $FF, $FF, $81, $F8, $BF, $FE
data:0F00 8A 00	04 C0+		      .BYTE $9F, $FC, $BF, $FC,	$FF, $F0, $FF, $F8, $BF, $F8, $FF, $F0
data:0F00 82 80	A0 D1+		      .BYTE $8F, $FF, $9F, 0, $F8, $FF,	$87, $C0, $FF, $C3, $FF, $F3, $FF
data:0F00 AA D1	0D A8+		      .BYTE $F1, $FF, $E3, $FF,	$FF, $FF, $80, $E0, $FF, $FF, $FF, $80
data:0F00 11 A8	95 A8+		      .BYTE $F8, $BF, $FE, $9F,	$FC, $BF, $FC, $FF, $F0, $FF, $F8, $BF
data:0F00 80 AA	81 AA+		      .BYTE $F8, $FF, $FF, $8F,	$FF, $8F, 0, $F8, $FF, $87, $C0, $FF, $C3
data:0F00 81 AA	C1 82+		      .BYTE $FF, $F3, $FF, $F0,	$FF, $F3, $FF, $FF, $FF, $80, $E0, $FF
data:0F00 D0 8A	D0 8A+		      .BYTE $FF, $BF, $80, $F8,	$9F, $FE, $9F, $FC, $BF, $FC, $BF, $F8
data:0F00 94 A8	D0 8A+		      .BYTE $FF, $FC, $BF, $FC,	$FF, $FF, $8F, $FF, $8F, 0, $F8, $FF, $83
data:0F00 00 04	C0 82+		      .BYTE $C0, $FF, $C3, $FF,	$F3, $FF, $F0, $FF, $F3, $FF, $FF, $BF
data:0F00 80 A0	D1 AA+		      .BYTE $80, $E0, $FF, $FF,	$BF, $80, $FC, $9F, $FE, $8F, $FC, $BF
data:0F00 D1 0D	A8 11+		      .BYTE $FC, $BF, $F8, $BF,	$FC, $BF, $FC, $FF, $FF, $CF, $FF, $8F
data:0F00 A8 85	A8 80+		      .BYTE 0, $F8, $FF, $83, $C0, $FF,	$E3, $FF, $F9, $FF, $F0, $FF, $F3
data:0F00 A8 80	A8 80+		      .BYTE $FF, $FF, $BF, $80,	$F0, $FF, $FF, $BF, $80, $FC, $9F, $FE
data:0F00 A8 C0	82 C0+		      .BYTE $8F, $FE, $BF, $FE,	$BF, $F8, $BF, $FC, $9F, $FC, $FF, $FF
data:0F00 82 C0	82 94+		      .BYTE $C7, $FF, $8F, 0, $F8, $FF,	$83, $E0, $FF, $E1, $FF, $F9, $FF
data:0F00 A8 C0	82 00+		      .BYTE $F8, $FF, $F9, $FF,	$83, $80, $80, $F0, $FF, $FF, $FF, $80
data:0F00 05 AA	D5 A2+		      .BYTE $FC, $9F, $FF, $8F,	$FE, $9F, $FE, $BF, $F8, $BF, $FC, $9F
data:0F00 D1 AA	D1 A8+		      .BYTE $FC, $BF, $80, $C0,	$FF, $87, 0, $FC, $FF, $83, $E0, $FF, $E1
data:0F00 D5 8A	00 05+		      .BYTE $FF, $F9, $BF, $F8,	$FF, $F9, $FF, $81, $80, $80, $F0, $FF
data:0F00 AA D5	82 81+		      .BYTE $FF, $FF, $80, $FC,	$9F, $FF, $8F, $FE, $9F, $FE, $9F, $F8
data:0F00 8A 90	A8 D5+		      .BYTE $BF, $FE, $9F, $FE,	$BF, $80, $C0, $FF, $87, 0, $FC, $FF, $81
data:0F00 8A 00	05 AA+		      .BYTE $E0, $FF, $E1, $FF,	$F9, $BF, $F8, $FF, $F9, $FF, $81, $80
data:0F00 D5 82	85 8A+		      .BYTE $80, $F0, $FF, $FB,	$FF, $81, $FE, $8F, $FF, $8F, $FE, $9F
data:0F00 94 A8	D5 8A+		      .BYTE $FE, $9F, $FC, $BF,	$FE, $9F, $FE, $9F, $80, $C0, $FF, $87
data:0F00 00 07	8A 95+		      .BYTE 0, $FC, $FF, $81, $E4, $FF,	$F1, $FF, $F8, $BF, $F8, $FF, $F9
data:0F00 8A 95	8A 13+		      .BYTE $FF, $80, $90, $80,	$F8, $FF, $F3, $FF, $81, $FE, $CF, $FF
data:0F00 A0 85	17 A0+		      .BYTE $87, $FF, $9F, $FF,	$9F, $FC, $9F, $FE, $9F, $FE, $9F, $80
data:0F00 81 00	07 8A+		      .BYTE $E2, $FF, $87, 0, $FC, $FF,	$81, $E6, $FF, $F1, $FF, $F8, $BF
data:0F00 D4 AA	85 8A+		      .BYTE $FC, $FF, $F9, $FF,	$81, $98, $80, $F8, $FF, $F3, $FF, $81
data:0F00 13 A8	85 17+		      .BYTE $FE, $CF, $FF, $87,	$FF, $8F, $FF, $9F, $FC, $9F, $FE, $8F
data:0F00 A8 81	00 07+		      .BYTE $FE, $BF, $80, $E3,	$FF, $83, 0, $FE, $FF, $FF, $F7, $FF, $FF
data:0F00 8A D0	AA 81+		      .BYTE $FF, $F8, $FF, $FF,	$FF, $FC, $FF, $FF, $9F, $80, $F8, $FF
data:0F00 8A 13	A8 85+		      .BYTE $F3, $FF, $93, $FE,	$FF, $FF, $87, $FF, $8F, $FF, $8F, $FC
data:0F00 17 A8	D1 00+		      .BYTE $9F, $FE, $8F, $FE,	$FF, $FF, $E3, $FF, $83, 0, $FE, $FF, $FF
data:0F00 07 A8	C0 AA+		      .BYTE $F7, $FF, $FF, $FF,	$FC, $FF, $FF, $FF, $FC, $FF, $FF, $9F
data:0F00 C0 82	13 AA+		      .BYTE $80, $F8, $FF, $F3,	$FF, $9F, $FF, $FF, $FF, $87, $FF, $8F
data:0F00 17 AA	D0 00+		      .BYTE $FF, $8F, $FE, $9F,	$FF, $8F, $FE, $FF, $FF, $E3, $FF, $83
data:0F00 07 A8	0A C0+		      .BYTE 0, $FE, $FF, $FF, $F3, $FF,	$FF, $FF, $FC, $FF, $FF, $FF, $FC
data:0F00 82 13	8A 17+		      .BYTE $FF, $FF, $8F, $80,	$F8, $FF, $E1, $FF, $9F, $FF, $FF, $FF
data:0F00 8A D0	00 07+		      .BYTE $83, $FF, $8F, $FF,	$8F, $FE, $8F, $FF, $8F, $FF, $FF, $FF
data:0F00 A8 0A	C0 82+		      .BYTE $E3, $FF, $83, 0, $FE, $FF,	$FF, $F3, $FF, $FF, $BF, $FC, $FF
data:0F00 13 8A	17 8A+		      .BYTE $FF, $FF, $FC, $FF,	$FF, $8F, $80, $FC, $FF, $E1, $FF, $9F
data:0F00 D0 00	07 A8+		      .BYTE $FF, $FF, $FF, $C3,	$FF, $C7, $FF, $8F, $FE, $8F, $FF, $87
data:0F00 0A C0	82 13+		      .BYTE $FF, $FF, $FF, $F3,	$FF, $81, 0, $FE, $FF, $FF, $F3, $FF, $FF
data:0F00 8A 17	8A D0+		      .BYTE $BF, $FC, $FF, $FF,	$BF, $FC, $FF, $FF, $8F, $80, $FC, $FF
data:0F00 00 07	A8 0A+		      .BYTE $E1, $FF, $8F, $FF,	$FF, $FF, $C3, $FF, $C7, $FF, $8F, $FE
data:0F00 C0 82	13 8A+		      .BYTE $8F, $FF, $87, $FF,	$FF, $FF, $F1, $FF, $81, 0, $FE, $FF, $FF
data:0F00 17 8A	D0 00+		      .BYTE $F3, $FF, $FF, $BF,	$FC, $FF, $FF, $BF, $FC, $FF, $FF, $8F
data:0F00 07 A0	81 80+		      .BYTE $80, $FC, $FF, $E1,	$FF, $CF, $FF, $FF, $FF, $C3, $FF, $C7
data:0F00 D0 13	8A 17+		      .BYTE $FF, $87, $FE, $CF,	$FF, $87, $FE, $FF, $FF, $F1, $FF, $81
data:0F00 8A D0	00 07+		      .BYTE 0, $FE, $FF, $FF, $F1, $FF,	$FF, $BF, $FC, $FF, $FE, $BF, $F8
data:0F00 A0 81	80 D0+		      .BYTE $FF, $FF, $87, $80,	$FC, $FF, $C1, $FF, $CF, $FF, $FF, $FF
data:0F00 13 A8	80 A8+		      .BYTE $C3, $FF, $C7, $FF,	$87, $FF, $C7, $FF, $87, $FE, $FF, $FF
data:0F00 C0 AA	D4 82+		      .BYTE $F1, $FF, $81, 0, $FE, $FF,	$FF, $E1, $FF, $FF, $9F, $F8, $BF
data:0F00 85 8A	94 A0+		      .BYTE $FE, $BF, $F8, $FF,	$FF, $87, $80, $FC, $FF, $C1, $FF, $C7
data:0F00 81 A0	C1 8A+		      .BYTE $FF, $EF, $FF, $C3,	$FF, $C7, $FF, $87, $FF, $C7, $FF, $87
data:0F00 00 07	A0 81+		      .BYTE $FE, $FF, $FF, $F1,	$FF, $81, 0, $FE, $FF, $FF, $E1, $FF, $FF
data:0F00 80 D0	13 A8+		      .BYTE $9F, $F8, $BF, $FE,	$FF, $F1, $FF, $FF, $87, $80, $FC, $FF
data:0F00 80 AA	C1 AA+		      .BYTE $C3, $FF, $C7, $FF,	$E7, $FF, $CF, $FF, $DF, $FF, $9F, $FF
data:0F00 D4 82	85 8A+		      .BYTE $9F, $FF, $9F, $FC,	$FF, $FF, $F0, $FF, $87, 0, $FC, $FF, $FF
data:0F00 94 A8	85 A8+		      .BYTE $C0, $FF, $FF, $8F,	$F0, $9F, $FC, $FF, $E0, $FF, $FF, $83
data:0F00 C1 AA	00 07+		      .BYTE $80, $F0, $FF, $81,	$FF, $87, $FF, $E7, $FF, $C7, $FF, $CF
data:0F00 A0 81	80 D0+		      .BYTE $FF, $8F, $FE, $8F,	$FF, $8F, $F8, $FF, $BF, $F0, $FF, $83
data:0F00 13 A8	80 AA+		      .BYTE 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, $12, $AA, $81, 0, $12, $8A
data:0F00 C1 AA	D4 82+		      .BYTE $85, 0, $12, $8A, $85, 0, $12, $8A,	$85, 0,	$12, $AA, $C1
data:0F00 85 8A	94 A8+		      .BYTE $A2, $81, 0, $12, $8A, $C5,	$A2, $81, 0, $12, $8A, $C5, $A2
data:0F00 85 A8	D1 AA+		      .BYTE $81, 0, $12, $8A, $C5, $A2,	$81, 0,	$12, $8A, $C5, $A2, $81
data:0F00 00 08	D5 AA+		      .BYTE 0, $12, $AA, $81, $AA, $81,	0, $14,	$A0, $81, 0, $14, $A0
data:0F00 95 13	A8 C1+		      .BYTE $81, 0, $14, $AA, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, $B, $A0
data:0F00 82 85	8A D0+		      .BYTE $D5, $14, $D0, $AA,	0, $B, $A0, $C1, $82, $14, $94,	$19, $A0
data:0F00 80 85	8A 94+		      .BYTE $C1, $82, 0, $B, $A0, $C1, $82, $14, $94, $18, $D0,	$A0, $C1
data:0F00 8A 94	AA D0+		      .BYTE $82, 0, $B,	$A0, $C1, $82, $14, $94, $18, $D0, $A0,	$C1, $82
data:0F00 A0 81	00 08+		      .BYTE 0, $B, $A0,	$C1, $82, $14, $94, $19, $A0, $C1, $82,	0, $B
data:0F00 D5 AA	95 13+		      .BYTE $A0, $C1, $82, $D5,	$A0, $C1, $82, $D5, $82, $D0, $8A, $D0
data:0F00 A0 C1	82 85+		      .BYTE $AA, $D0, $A8, $C5,	$AA, $81, 0, $B, $A0, $C1, $A2,	$C1, $A2
data:0F00 8A D0	80 85+		      .BYTE $C1, $A2, $C1, $82,	$80, $A8, $94, $A2, $D1, $A0, $C1, $82
data:0F00 8A 94	82 94+		      .BYTE $85, 0, $B,	$A0, $C1, $A2, $C1, $A2, $C1, $A2, $C1,	$82, $80
data:0F00 8A D0	A0 81+		      .BYTE $A8, $94, $A2, $D1,	$A0, $C1, $82, $85, 0, $B, $A0,	$C1, $A2
data:0F00 00 08	D5 AA+		      .BYTE $C1, $A2, $C1, $A2,	$C1, $82, $80, $A8, $94, $A2, $D1, $A0
data:0F00 95 13	A0 C5+		      .BYTE $C1, $82, $85, 0, $B, $A0, $C1, $A2, $C1, $A2, $C1,	$A2, $C1
data:0F00 82 85	8A D0+		      .BYTE $82, $80, $A8, $94,	$A2, $D1, $A0, $C1, $82, $85, 0, $B, $A0
data:0F00 80 85	8A 94+		      .BYTE $C1, $A2, $C1, $A2,	$C1, $A2, $C1, $82, $80, $A8, $94, $A2
data:0F00 80 94	8A D0+		      .BYTE $D1, $A0, $C1, $82,	$85, 0,	$B, $A0, $D5, $80, $D5,	$80, $D5
data:0F00 A0 81	00 14+		      .BYTE $80, $D5, $82, $D4,	$8A, $94, $A2, $D1, $80, $C5, $82, $85
data:0F00 C5 82	85 8A+		      .BYTE 0, $12, $C0, $82, 0, $12, $C0, $82,	0, $12,	$C0, $82, 0, $12
data:0F00 D0 80	85 8A+		      .BYTE $D5, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, $B, $B0, $9E
data:0F00 94 A0	95 8A+		      .BYTE $83, $F8, $81, $13,	$C0, $81, $B0, $C0, $81, $80, $E3, $C3
data:0F00 D0 AA	00 14+		      .BYTE $87, $8F, 0, $B, $98, $B3, $86, $8C, $83, $13, $C0,	$81, $B0
data:0F00 C5 82	85 8A+		      .BYTE $C0, $81, $80, $B3,	$E6, $CC, $99, 0, $B, $8C, $83,	$8C, $8C
data:0F00 D0 80	85 8A+		      .BYTE $15, $B0, $F0, $87,	$80, $B3, $E6, $8C, $98, 0, $B,	$8C, $83
data:0F00 94 A8	95 8A+		      .BYTE $8C, $8C, $E0, $E3,	$C7, $99, $CE, $F1, $F1, $C3, $81, $80
data:0F00 D0 AA	00 14+		      .BYTE $B3, $C6, $87, $8E,	0, $B, $8C, $83, $8C, $8C, $B0,	$E6, $CC
data:0F00 C5 82	85 8A+		      .BYTE $99, $C3, $99, $B3,	$C6, $81, $80, $E3, $E7, $8C, $98, 0, $B
data:0F00 D0 80	85 8A+		      .BYTE $8C, $83, $8C, $8C,	$B0, $E6, $CC, $99, $C3, $99, $B3, $C6
data:0F00 94 A8	95 8A+		      .BYTE $81, $80, $83, $E6,	$8C, $98, 0, $B, $98, $B3, $86,	$8C, $B3
data:0F00 D0 8A	00 14+		      .BYTE $E6, $CC, $99, $C3,	$99, $B3, $C6, $81, $80, $83, $E6, $CC
data:0F00 C5 82	85 8A+		      .BYTE $99, 0, $B,	$B0, $9E, $83, $F8, $E1, $E3, $87, $9F,	$C3, $F1
data:0F00 D0 80	85 8A+		      .BYTE $B3, $86, $87, $80,	$E3, $C3, $87, $8F, 0, $10, $E0, $80, $98
data:0F00 94 8A	94 8A+		      .BYTE $15, $83, 0, $10, $E0, $80,	$98, $15, $83, 0, $10, $E0, $80
data:0F00 D0 00	14 C5+		      .BYTE $8F, $80, $F0, $81,	0
data:1A85 00 00	00 00+lsb_line_addr:  .BYTE 0, 0, 0, 0,	0, 0, 0, 0, $80, $80, $80, $80,	$80, $80, $80
data:1A85 00 00	00 00+						      ;	DATA XREF: calc_line_addr_in_0Cr
data:1A85 80 80	80 80+						      ;	get_line_addr_pgs_1_2r
data:1A85 80 80	80 80+		      .BYTE $80, 0, 0, 0, 0, 0,	0, 0, 0, $80, $80, $80,	$80, $80, $80 ;	lsb of line address
data:1A85 00 00	00 00+		      .BYTE $80, $80, 0, 0, 0, 0, 0, 0,	0, 0, $80, $80,	$80, $80, $80
data:1A85 00 00	00 00+		      .BYTE $80, $80, $80, 0, 0, 0, 0, 0, 0, 0,	0, $80,	$80, $80, $80
data:1A85 80 80	80 80+		      .BYTE $80, $80, $80, $80,	$28, $28, $28, $28, $28, $28, $28, $28
data:1A85 80 80	80 80+		      .BYTE $A8, $A8, $A8, $A8,	$A8, $A8, $A8, $A8, $28, $28, $28, $28
data:1A85 00 00	00 00+		      .BYTE $28, $28, $28, $28,	$A8, $A8, $A8, $A8, $A8, $A8, $A8, $A8
data:1A85 00 00	00 00+		      .BYTE $28, $28, $28, $28,	$28, $28, $28, $28, $A8, $A8, $A8, $A8
data:1A85 80 80	80 80+		      .BYTE $A8, $A8, $A8, $A8,	$28, $28, $28, $28, $28, $28, $28, $28
data:1A85 80 80	80 80+		      .BYTE $A8, $A8, $A8, $A8,	$A8, $A8, $A8, $A8, $50, $50, $50, $50
data:1A85 00 00	00 00+		      .BYTE $50, $50, $50, $50,	$D0, $D0, $D0, $D0, $D0, $D0, $D0, $D0
data:1A85 00 00	00 00+		      .BYTE $50, $50, $50, $50,	$50, $50, $50, $50, $D0, $D0, $D0, $D0
data:1A85 80 80	80 80+		      .BYTE $D0, $D0, $D0, $D0,	$50, $50, $50, $50, $50, $50, $50, $50
data:1A85 80 80	80 80+		      .BYTE $D0, $D0, $D0, $D0,	$D0, $D0, $D0, $D0, $50, $50, $50, $50
data:1A85 28 28	28 28+		      .BYTE $50, $50, $50, $50,	$D0, $D0, $D0, $D0, $D0, $D0, $D0, $D0
data:1B45 00 04	08 0C+msb_line_addr:  .BYTE 0, 4, 8, $C, $10, $14, $18,	$1C, 0,	4, 8, $C, $10, $14, $18
data:1B45 10 14	18 1C+						      ;	DATA XREF: calc_line_addr_in_0C+5r
data:1B45 00 04	08 0C+						      ;	get_line_addr_pgs_1_2+7r
data:1B45 10 14	18 1C+		      .BYTE $1C, 1, 5, 9, $D, $11, $15,	$19, $1D, 1, 5,	9, $D, $11, $15	; msb of line address
data:1B45 01 05	09 0D+		      .BYTE $19, $1D, 2, 6, $A,	$E, $12, $16, $1A, $1E,	2, 6, $A, $E, $12
data:1B45 11 15	19 1D+		      .BYTE $16, $1A, $1E, 3, 7, $B, $F, $13, $17, $1B,	$1F, 3,	7, $B
data:1B45 01 05	09 0D+		      .BYTE $F,	$13, $17, $1B, $1F, 0, 4, 8, $C, $10, $14, $18,	$1C, 0
data:1B45 11 15	19 1D+		      .BYTE 4, 8, $C, $10, $14,	$18, $1C, 1, 5,	9, $D, $11, $15, $19, $1D
data:1B45 02 06	0A 0E+		      .BYTE 1, 5, 9, $D, $11, $15, $19,	$1D, 2,	6, $A, $E, $12,	$16, $1A
data:1B45 12 16	1A 1E+		      .BYTE $1E, 2, 6, $A, $E, $12, $16, $1A, $1E, 3, 7, $B, $F, $13, $17
data:1B45 02 06	0A 0E+		      .BYTE $1B, $1F, 3, 7, $B,	$F, $13, $17, $1B, $1F,	0, 4, 8, $C, $10
data:1B45 12 16	1A 1E+		      .BYTE $14, $18, $1C, 0, 4, 8, $C,	$10, $14, $18, $1C, 1, 5, 9, $D
data:1B45 03 07	0B 0F+		      .BYTE $11, $15, $19, $1D,	1, 5, 9, $D, $11, $15, $19, $1D, 2, 6
data:1B45 13 17	1B 1F+		      .BYTE $A,	$E, $12, $16, $1A, $1E,	2, 6, $A, $E, $12, $16,	$1A, $1E
data:1B45 03 07	0B 0F+		      .BYTE 3, 7, $B, $F, $13, $17, $1B, $1F, 3, 7, $B,	$F, $13, $17, $1B
data:1B45 13 17	1B 1F+		      .BYTE $1F
data:1C05 00 1C	38 54+lsb_row_addr:   .BYTE 0, $1C, $38, $54, $70, $8C,	$A8, $C4, $E0, $FC, $18, $34, $50
data:1C05 70 8C	A8 C4+						      ;	DATA XREF: init_read_unpack_display_level:loc_6269r
data:1C05 E0 FC	18 34+						      ;	sub_62C7+Ar ...
data:1C05 50 6C	88 A4		      .BYTE $6C, $88, $A4	      ;	lsb_row_address
data:1C15 08 08	08 08+msb_row_addr_1: .BYTE 8, 8, 8, 8,	8, 8, 8, 8, 8, 8, 9, 9,	9, 9, 9, 9
data:1C15 08 08	08 08+						      ;	DATA XREF: init_read_unpack_display_level+38r
data:1C15 08 08	09 09+						      ;	sub_62C7+Fr ...
data:1C15 09 09	09 09						      ;	msb row	address
data:1C25 0A 0A	0A 0A+msb_row_addr_2: .BYTE $A,	$A, $A,	$A, $A,	$A, $A,	$A, $A,	$A, $B,	$B, $B,	$B, $B
data:1C25 0A 0A	0A 0A+						      ;	DATA XREF: init_read_unpack_display_level+3Dr
data:1C25 0A 0A	0B 0B+						      ;	init_and_draw_level+10r ...
data:1C25 0B 0B	0B 0B		      .BYTE $B			      ;	msb row	address	(copy)
data:1C35 00 05	0A 0F+col_x_5_tbl:    .BYTE 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75
data:1C35 14 19	1E 23+						      ;	DATA XREF: calc_colx5_scanline+4r
data:1C35 28 2D	32 37+		      .BYTE 80,	85, 90,	95, 100, 105, 110, 115,	120, 125, 130, 135
data:1C51 00 0B	16 21+row_to_scanline_tbl:.BYTE	0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143
data:1C51 2C 37	42 4D+						      ;	DATA XREF: calc_colx5_scanliner
data:1C51 58 63	6E 79+		      .BYTE 154, 165, 181	      ;	scanline number	for each tile row
data:1C62 00 01	02 04+col_to_addr_tbl:.BYTE 0, 1, 2, 4,	5, 7, 8, $A, $B, $C, $E, $F, $11, $12, $14, $15
data:1C62 05 07	08 0A+						      ;	DATA XREF: calc_col_addr_shiftr
data:1C62 0B 0C	0E 0F+		      .BYTE $16, $18, $19, $1B,	$1C, $1E, $1F, $20, $22, $23, $25, $26
data:1C7E 00 03	06 02+col_pixel_shift_tbl:.BYTE	0, 3, 6, 2, 5, 1, 4, 0,	3, 6, 2, 5, 1, 4, 0, 3,	6, 2, 5, 1
data:1C7E 05 01	04 00+						      ;	DATA XREF: calc_col_addr_shift+4r
data:1C7E 03 06	02 05+		      .BYTE 4, 0, 3, 6,	2, 5, 1, 4
data:1C9A 00 00	00 00+movement_offset_to_addr_tbl:.BYTE	0, 0, 0, 0, 1, 1, 1, 2,	2, 2, 2, 3, 3, 3, 4, 4,	4, 4, 5, 5
data:1C9A 01 01	01 02+						      ;	DATA XREF: calc_addr_shift_for_xr
data:1C9A 02 02	02 03+		      .BYTE 5, 6, 6, 6,	6, 7, 7, 7, 8, 8, 8, 8,	9, 9, 9, $A, $A, $A, $A
data:1C9A 03 03	04 04+		      .BYTE $B,	$B, $B,	$C, $C,	$C, $C,	$D, $D,	$D, $E,	$E, $E,	$E, $F
data:1C9A 04 04	05 05+		      .BYTE $F,	$F, $10, $10, $10, $10,	$11, $11, $11, $12, $12, $12, $12
data:1C9A 05 06	06 06+		      .BYTE $13, $13, $13, $14,	$14, $14, $14, $15, $15, $15, $16, $16
data:1C9A 06 07	07 07+		      .BYTE $16, $16, $17, $17,	$17, $18, $18, $18, $18, $19, $19, $19
data:1C9A 08 08	08 08+		      .BYTE $1A, $1A, $1A, $1A,	$1B, $1B, $1B, $1C, $1C, $1C, $1C, $1D
data:1C9A 09 09	09 0A+		      .BYTE $1D, $1D, $1E, $1E,	$1E, $1E, $1F, $1F, $1F, $20, $20, $20
data:1C9A 0A 0A	0A 0B+		      .BYTE $20, $21, $21, $21,	$22, $22, $22, $22, $23, $23, $23, $24
data:1C9A 0B 0B	0C 0C+		      .BYTE $24, $24, $24, $25,	$25, $25, $26, $26, $26, $26, $27, $27
data:1C9A 0C 0C	0D 0D+		      .BYTE $27
data:1D26 00 02	04 06+movement_offset_to_shift_tbl:.BYTE 0, 2, 4, 6, 1,	3, 5, 0, 2, 4, 6, 1, 3,	5, 0, 2, 4, 6, 1, 3
data:1D26 01 03	05 00+						      ;	DATA XREF: calc_addr_shift_for_x+4r
data:1D26 02 04	06 01+		      .BYTE 5, 0, 2, 4,	6, 1, 3, 5, 0, 2, 4, 6,	1, 3, 5, 0, 2, 4, 6, 1
data:1D26 03 05	00 02+		      .BYTE 3, 5, 0, 2,	4, 6, 1, 3, 5, 0, 2, 4,	6, 1, 3, 5, 0, 2, 4, 6
data:1D26 04 06	01 03+		      .BYTE 1, 3, 5, 0,	2, 4, 6, 1, 3, 5, 0, 2,	4, 6, 1, 3, 5, 0, 2, 4
data:1D26 05 00	02 04+		      .BYTE 6, 1, 3, 5,	0, 2, 4, 6, 1, 3, 5, 0,	2, 4, 6, 1, 3, 5, 0, 2
data:1D26 06 01	03 05+		      .BYTE 4, 6, 1, 3,	5, 0, 2, 4, 6, 1, 3, 5,	0, 2, 4, 6, 1, 3, 5, 0
data:1D26 00 02	04 06+		      .BYTE 2, 4, 6, 1,	3, 5, 0, 2, 4, 6, 1, 3,	5, 0, 2, 4, 6, 1, 3, 5
data:1DB2 01			      .BYTE   1
data:1DB3 20			      .BYTE $20
data:1DB4 58			      .BYTE $58	; X
data:1DB5 FC			      .BYTE $FC	; ü
data:1DB6 20			      .BYTE $20
data:1DB7 93			      .BYTE $93	; 
data:1DB8 FE			      .BYTE $FE	; þ
data:1DB9 20			      .BYTE $20
data:1DBA 89			      .BYTE $89	; 
data:1DBB FE			      .BYTE $FE	; þ
data:1DBC A0			      .BYTE $A0	;  
data:1DBD 00			      .BYTE   0
data:1DBE B9			      .BYTE $B9	; ¹
data:1DBF 34			      .BYTE $34	; 4
data:1DC0 08			      .BYTE   8
data:1DC1 F0			      .BYTE $F0	; ð
data:1DC2 0E			      .BYTE  $E
data:1DC3 20			      .BYTE $20
data:1DC4 F0			      .BYTE $F0	; ð
data:1DC5 FD			      .BYTE $FD	; ý
data:1DC6 C9			      .BYTE $C9	; É
data:1DC7 8D			      .BYTE $8D	; 
data:1DC8 D0			      .BYTE $D0	; Ð
data:1DC9 04			      .BYTE   4
data:1DCA A9			      .BYTE $A9	; ©
data:1DCB 09			      .BYTE   9
data:1DCC 85			      .BYTE $85	; 
data:1DCD 24			      .BYTE $24	; $
data:1DCE C8			      .BYTE $C8	; È
data:1DCF D0			      .BYTE $D0	; Ð
data:1DD0 ED			      .BYTE $ED	; í
data:1DD1 A6			      .BYTE $A6	; ¦
data:1DD2 2B			      .BYTE $2B	; +
data:1DD3 9D			      .BYTE $9D	; 
data:1DD4 88			      .BYTE $88	; 
data:1DD5 C0			      .BYTE $C0	; À
data:1DD6 8A			      .BYTE $8A	; 
data:1DD7 4A			      .BYTE $4A	; J
data:1DD8 4A			      .BYTE $4A	; J
data:1DD9 4A			      .BYTE $4A	; J
data:1DDA 4A			      .BYTE $4A	; J
data:1DDB 09			      .BYTE   9
data:1DDC C0			      .BYTE $C0	; À
data:1DDD 8D			      .BYTE $8D	; 
data:1DDE 33			      .BYTE $33	; 3
data:1DDF 08			      .BYTE   8
data:1DE0 20			      .BYTE $20
data:1DE1 0C			      .BYTE  $C
data:1DE2 FD			      .BYTE $FD	; ý
data:1DE3 4C			      .BYTE $4C	; L
data:1DE4 00			      .BYTE   0
data:1DE5 C6			      .BYTE $C6	; Æ
data:1DE6 8D			      .BYTE $8D	; 
data:1DE7 8D			      .BYTE $8D	; 
data:1DE8 8D			      .BYTE $8D	; 
data:1DE9 8D			      .BYTE $8D	; 
data:1DEA 8D			      .BYTE $8D	; 
data:1DEB 8D			      .BYTE $8D	; 
data:1DEC 8D			      .BYTE $8D	; 
data:1DED CC			      .BYTE $CC	; Ì
data:1DEE CF			      .BYTE $CF	; Ï
data:1DEF C4			      .BYTE $C4	; Ä
data:1DF0 C5			      .BYTE $C5	; Å
data:1DF1 A0			      .BYTE $A0	;  
data:1DF2 D2			      .BYTE $D2	; Ò
data:1DF3 D5			      .BYTE $D5	; Õ
data:1DF4 CE			      .BYTE $CE	; Î
data:1DF5 CE			      .BYTE $CE	; Î
data:1DF6 C5			      .BYTE $C5	; Å
data:1DF7 D2			      .BYTE $D2	; Ò
data:1DF8 A0			      .BYTE $A0	;  
data:1DF9 C4			      .BYTE $C4	; Ä
data:1DFA C1			      .BYTE $C1	; Á
data:1DFB D4			      .BYTE $D4	; Ô
data:1DFC C1			      .BYTE $C1	; Á
data:1DFD A0			      .BYTE $A0	;  
data:1DFE C4			      .BYTE $C4	; Ä
data:1DFF C9			      .BYTE $C9	; É
data:1E00 D3			      .BYTE $D3	; Ó
data:1E01 CB			      .BYTE $CB	; Ë
data:1E02 BA			      .BYTE $BA	; º
data:1E03 8D			      .BYTE $8D	; 
data:1E04 AD			      .BYTE $AD	; ­
data:1E05 AD			      .BYTE $AD	; ­
data:1E06 AD			      .BYTE $AD	; ­
data:1E07 AD			      .BYTE $AD	; ­
data:1E08 AD			      .BYTE $AD	; ­
data:1E09 AD			      .BYTE $AD	; ­
data:1E0A AD			      .BYTE $AD	; ­
data:1E0B AD			      .BYTE $AD	; ­
data:1E0C AD			      .BYTE $AD	; ­
data:1E0D AD			      .BYTE $AD	; ­
data:1E0E AD			      .BYTE $AD	; ­
data:1E0F AD			      .BYTE $AD	; ­
data:1E10 AD			      .BYTE $AD	; ­
data:1E11 AD			      .BYTE $AD	; ­
data:1E12 AD			      .BYTE $AD	; ­
data:1E13 AD			      .BYTE $AD	; ­
data:1E14 AD			      .BYTE $AD	; ­
data:1E15 AD			      .BYTE $AD	; ­
data:1E16 AD			      .BYTE $AD	; ­
data:1E17 AD			      .BYTE $AD	; ­
data:1E18 AD			      .BYTE $AD	; ­
data:1E19 AD			      .BYTE $AD	; ­
data:1E1A 8D			      .BYTE $8D	; 
data:1E1B 8D			      .BYTE $8D	; 
data:1E1C C4			      .BYTE $C4	; Ä
data:1E1D C9			      .BYTE $C9	; É
data:1E1E D3			      .BYTE $D3	; Ó
data:1E1F CB			      .BYTE $CB	; Ë
data:1E20 C5			      .BYTE $C5	; Å
data:1E21 D4			      .BYTE $D4	; Ô
data:1E22 D4			      .BYTE $D4	; Ô
data:1E23 C5			      .BYTE $C5	; Å
data:1E24 A0			      .BYTE $A0	;  
data:1E25 D7			      .BYTE $D7	; ×
data:1E26 C9			      .BYTE $C9	; É
data:1E27 CC			      .BYTE $CC	; Ì
data:1E28 CC			      .BYTE $CC	; Ì
data:1E29 A0			      .BYTE $A0	;  
data:1E2A CE			      .BYTE $CE	; Î
data:1E2B CF			      .BYTE $CF	; Ï
data:1E2C D4			      .BYTE $D4	; Ô
data:1E2D A0			      .BYTE $A0	;  
data:1E2E C2			      .BYTE $C2	; Â
data:1E2F CF			      .BYTE $CF	; Ï
data:1E30 CF			      .BYTE $CF	; Ï
data:1E31 D4			      .BYTE $D4	; Ô
data:1E32 8D			      .BYTE $8D	; 
data:1E33 8D			      .BYTE $8D	; 
data:1E34 A0			      .BYTE $A0	;  
data:1E35 C9			      .BYTE $C9	; É
data:1E36 CE			      .BYTE $CE	; Î
data:1E37 D3			      .BYTE $D3	; Ó
data:1E38 C5			      .BYTE $C5	; Å
data:1E39 D2			      .BYTE $D2	; Ò
data:1E3A D4			      .BYTE $D4	; Ô
data:1E3B A0			      .BYTE $A0	;  
data:1E3C CE			      .BYTE $CE	; Î
data:1E3D C5			      .BYTE $C5	; Å
data:1E3E D7			      .BYTE $D7	; ×
data:1E3F A0			      .BYTE $A0	;  
data:1E40 C4			      .BYTE $C4	; Ä
data:1E41 C9			      .BYTE $C9	; É
data:1E42 D3			      .BYTE $D3	; Ó
data:1E43 CB			      .BYTE $CB	; Ë
data:1E44 A0			      .BYTE $A0	;  
data:1E45 C1			      .BYTE $C1	; Á
data:1E46 CE			      .BYTE $CE	; Î
data:1E47 C4			      .BYTE $C4	; Ä
data:1E48 8D			      .BYTE $8D	; 
data:1E49 A0			      .BYTE $A0	;  
data:1E4A C8			      .BYTE $C8	; È
data:1E4B C9			      .BYTE $C9	; É
data:1E4C D4			      .BYTE $D4	; Ô
data:1E4D A0			      .BYTE $A0	;  
data:1E4E C1			      .BYTE $C1	; Á
data:1E4F A0			      .BYTE $A0	;  
data:1E50 CB			      .BYTE $CB	; Ë
data:1E51 C5			      .BYTE $C5	; Å
data:1E52 D9			      .BYTE $D9	; Ù
data:1E53 A0			      .BYTE $A0	;  
data:1E54 D4			      .BYTE $D4	; Ô
data:1E55 CF			      .BYTE $CF	; Ï
data:1E56 A0			      .BYTE $A0	;  
data:1E57 D2			      .BYTE $D2	; Ò
data:1E58 C5			      .BYTE $C5	; Å
data:1E59 C2			      .BYTE $C2	; Â
data:1E5A CF			      .BYTE $CF	; Ï
data:1E5B CF			      .BYTE $CF	; Ï
data:1E5C D4			      .BYTE $D4	; Ô
data:1E5D 8D			      .BYTE $8D	; 
data:1E5E 8D			      .BYTE $8D	; 
data:1E5F A0			      .BYTE $A0	;  
data:1E60 A0			      .BYTE $A0	;  
data:1E61 A0			      .BYTE $A0	;  
data:1E62 A0			      .BYTE $A0	;  
data:1E63 A0			      .BYTE $A0	;  
data:1E64 A0			      .BYTE $A0	;  
data:1E65 A0			      .BYTE $A0	;  
data:1E66 A0			      .BYTE $A0	;  
data:1E67 A0			      .BYTE $A0	;  
data:1E68 A0			      .BYTE $A0	;  
data:1E69 00			      .BYTE   0
data:1E6A 00			      .BYTE   0
data:1E6B 00			      .BYTE   0
data:1E6C 00			      .BYTE   0
data:1E6D 00			      .BYTE   0
data:1E6E 00			      .BYTE   0
data:1E6F 00			      .BYTE   0
data:1E70 00			      .BYTE   0
data:1E71 00			      .BYTE   0
data:1E72 00			      .BYTE   0
data:1E73 00			      .BYTE   0
data:1E74 00			      .BYTE   0
data:1E75 00			      .BYTE   0
data:1E76 00			      .BYTE   0
data:1E77 00			      .BYTE   0
data:1E78 00			      .BYTE   0
data:1E79 00			      .BYTE   0
data:1E7A 00			      .BYTE   0
data:1E7B 00			      .BYTE   0
data:1E7C 00			      .BYTE   0
data:1E7D 00			      .BYTE   0
data:1E7E 00			      .BYTE   0
data:1E7F 00			      .BYTE   0
data:1E80 00			      .BYTE   0
data:1E81 00			      .BYTE   0
data:1E82 00			      .BYTE   0
data:1E83 00			      .BYTE   0
data:1E84 00			      .BYTE   0
data:1E85 00			      .BYTE   0
data:1E86 00			      .BYTE   0
data:1E87 00			      .BYTE   0
data:1E88 00			      .BYTE   0
data:1E89 00			      .BYTE   0
data:1E8A 00			      .BYTE   0
data:1E8B 00			      .BYTE   0
data:1E8C 00			      .BYTE   0
data:1E8D 00			      .BYTE   0
data:1E8E 00			      .BYTE   0
data:1E8F 00			      .BYTE   0
data:1E90 00			      .BYTE   0
data:1E91 00			      .BYTE   0
data:1E92 00			      .BYTE   0
data:1E93 00			      .BYTE   0
data:1E94 00			      .BYTE   0
data:1E95 00			      .BYTE   0
data:1E96 00			      .BYTE   0
data:1E97 00			      .BYTE   0
data:1E98 00			      .BYTE   0
data:1E99 00			      .BYTE   0
data:1E9A 00			      .BYTE   0
data:1E9B 00			      .BYTE   0
data:1E9C 00			      .BYTE   0
data:1E9D 00			      .BYTE   0
data:1E9E 00			      .BYTE   0
data:1E9F 00			      .BYTE   0
data:1EA0 00			      .BYTE   0
data:1EA1 00			      .BYTE   0
data:1EA2 00			      .BYTE   0
data:1EA3 00			      .BYTE   0
data:1EA4 00			      .BYTE   0
data:1EA5 00			      .BYTE   0
data:1EA6 00			      .BYTE   0
data:1EA7 00			      .BYTE   0
data:1EA8 00			      .BYTE   0
data:1EA9 00			      .BYTE   0
data:1EAA 00			      .BYTE   0
data:1EAB 00			      .BYTE   0
data:1EAC 00			      .BYTE   0
data:1EAD 00			      .BYTE   0
data:1EAE 00			      .BYTE   0
data:1EAF 00			      .BYTE   0
data:1EB0 00			      .BYTE   0
data:1EB1 00			      .BYTE   0
data:1EB2 00			      .BYTE   0
data:1EB3 00			      .BYTE   0
data:1EB4 00			      .BYTE   0
data:1EB5 00			      .BYTE   0
data:1EB6 00			      .BYTE   0
data:1EB7 00			      .BYTE   0
data:1EB8 00			      .BYTE   0
data:1EB9 00			      .BYTE   0
data:1EBA 00			      .BYTE   0
data:1EBB 00			      .BYTE   0
data:1EBC 00			      .BYTE   0
data:1EBD 00			      .BYTE   0
data:1EBE 00			      .BYTE   0
data:1EBF 00			      .BYTE   0
data:1EC0 00			      .BYTE   0
data:1EC1 00			      .BYTE   0
data:1EC2 00			      .BYTE   0
data:1EC3 00			      .BYTE   0
data:1EC4 00			      .BYTE   0
data:1EC5 00			      .BYTE   0
data:1EC6 00			      .BYTE   0
data:1EC7 00			      .BYTE   0
data:1EC8 00			      .BYTE   0
data:1EC9 00			      .BYTE   0
data:1ECA 00			      .BYTE   0
data:1ECB 00			      .BYTE   0
data:1ECC 00			      .BYTE   0
data:1ECD 00			      .BYTE   0
data:1ECE 00			      .BYTE   0
data:1ECF 00			      .BYTE   0
data:1ED0 00			      .BYTE   0
data:1ED1 00			      .BYTE   0
data:1ED2 00			      .BYTE   0
data:1ED3 00			      .BYTE   0
data:1ED4 00			      .BYTE   0
data:1ED5 00			      .BYTE   0
data:1ED6 00			      .BYTE   0
data:1ED7 00			      .BYTE   0
data:1ED8 00			      .BYTE   0
data:1ED9 00			      .BYTE   0
data:1EDA 00			      .BYTE   0
data:1EDB 00			      .BYTE   0
data:1EDC 00			      .BYTE   0
data:1EDD 00			      .BYTE   0
data:1EDE 00			      .BYTE   0
data:1EDF 00			      .BYTE   0
data:1EE0 00			      .BYTE   0
data:1EE1 00			      .BYTE   0
data:1EE2 00			      .BYTE   0
data:1EE3 00			      .BYTE   0
data:1EE4 00			      .BYTE   0
data:1EE5 00			      .BYTE   0
data:1EE6 00			      .BYTE   0
data:1EE7 00			      .BYTE   0
data:1EE8 00			      .BYTE   0
data:1EE9 00			      .BYTE   0
data:1EEA 00			      .BYTE   0
data:1EEB 00			      .BYTE   0
data:1EEC 00			      .BYTE   0
data:1EED 00			      .BYTE   0
data:1EEE 00			      .BYTE   0
data:1EEF 00			      .BYTE   0
data:1EF0 00			      .BYTE   0
data:1EF1 00			      .BYTE   0
data:1EF2 00			      .BYTE   0
data:1EF3 00			      .BYTE   0
data:1EF4 00			      .BYTE   0
data:1EF5 00			      .BYTE   0
data:1EF6 00			      .BYTE   0
data:1EF7 00			      .BYTE   0
data:1EF8 00			      .BYTE   0
data:1EF9 00			      .BYTE   0
data:1EFA 00			      .BYTE   0
data:1EFB 00			      .BYTE   0
data:1EFC 00			      .BYTE   0
data:1EFD 00			      .BYTE   0
data:1EFE 00			      .BYTE   0
data:1EFF 00			      .BYTE   0
data:1EFF	      ;	end of 'data'
data:1EFF
ROM:6000	     ; ---------------------------------------------------------------------------
ROM:6000	     ; File Name   : E:\Projects\pace\pacedev.net\sw\re\platform\appleii\loderun\lr_disk.bin
ROM:6000	     ; Format	   : Binary file
ROM:6000	     ; Base Address: 0000h Range: 6000h	- C000h	Loaded length: 6000h
ROM:6000	     ; ===========================================================================
ROM:6000
ROM:6000	     ; Segment type: Pure code
ROM:6000			     ;.segment ROM
ROM:6000			     * =  $6000
ROM:6000
ROM:6000	     START:
ROM:6000 20 A2 87		     JSR     read_paddles
ROM:6003 A9 01			     LDA     #1
ROM:6005 20 59 63		     JSR     read_disk_and_chk_sig
ROM:6008	     ; START OF	FUNCTION CHUNK FOR read_disk_and_chk_sig
ROM:6008
ROM:6008	     display_title_screen:			     ; CODE XREF: ROM:6083j
ROM:6008							     ; ROM:jmp_display_title_screenj ...
ROM:6008 20 51 7A		     JSR     gcls1
ROM:600B A9 FF			     LDA     #$FF
ROM:600D 8D 31 60		     STA     loc_6030+1
ROM:6010 A9 0E			     LDA     #$E
ROM:6012 8D 32 60		     STA     loc_6030+2		     ; $1F00-1
ROM:6015 A0 00			     LDY     #0
ROM:6017 84 86			     STY     row
ROM:6019 84 A7			     STY     attract_mode	     ; flag game mode
ROM:601B 84 96			     STY     level_0_based
ROM:601D A9 20			     LDA     #$20 ; ' '              ; MSB of hires page 1
ROM:601F 85 1F			     STA     hires_page_msb_1
ROM:6021 85 87			     STA     display_char_page
ROM:6023
ROM:6023	     loc_6023:					     ; CODE XREF: ROM:6045j
ROM:6023 20 31 7A		     JSR     calc_line_addr_in_0C
ROM:6026 A0 00			     LDY     #0
ROM:6028
ROM:6028	     loc_6028:					     ; CODE XREF: ROM:603Aj
ROM:6028							     ; ROM:603Dj
ROM:6028							     ; DATA XREF: ...
ROM:6028 EE 31 60		     INC     loc_6030+1		     ; lsb of address
ROM:602B D0 03			     BNE     loc_6030
ROM:602D EE 32 60		     INC     loc_6030+2		     ; msb of address
ROM:602D	     ; END OF FUNCTION CHUNK FOR read_disk_and_chk_sig
ROM:6030
ROM:6030	     loc_6030:					     ; CODE XREF: read_disk_and_chk_sig-32Ej
ROM:6030							     ; DATA XREF: read_disk_and_chk_sig-34Cw ...
ROM:6030 AD 28 60		     LDA     loc_6028		     ; $0F00-????
ROM:6033 F0 0A			     BEQ     loc_603F		     ; end of line data? yes, go
ROM:6035 10 05			     BPL     loc_603C		     ; +ve?, yes X value
ROM:6037 91 0C			     STA     (lsb_line_addr_pg1),Y   ; put byte	on screen
ROM:6039 C8			     INY
ROM:603A 10 EC			     BPL     loc_6028
ROM:603C
ROM:603C	     loc_603C:					     ; CODE XREF: ROM:6035j
ROM:603C A8			     TAY
ROM:603D 10 E9			     BPL     loc_6028
ROM:603F
ROM:603F	     loc_603F:					     ; CODE XREF: ROM:6033j
ROM:603F E6 86			     INC     row		     ; next scan line
ROM:6041 A4 86			     LDY     row
ROM:6043 C0 C0			     CPY     #192		     ; bottom of screen?
ROM:6045 90 DC			     BCC     loc_6023		     ; no, loop
ROM:6047 8D 54 C0		     STA     $C054		     ; select text/graphics page 1
ROM:604A 8D 57 C0		     STA     $C057		     ; select HIRES
ROM:604D 8D 52 C0		     STA     $C052		     ; clear mixed mode	(full screen)
ROM:6050 8D 50 C0		     STA     $C050		     ; display graphics
ROM:6053 4C 8E 61		     JMP     title_wait_for_key
ROM:6056	     ; ---------------------------------------------------------------------------
ROM:6056
ROM:6056	     zero_score_and_init_game:			     ; CODE XREF: ROM:61CDj
ROM:6056							     ; ROM:620Ej ...
ROM:6056 A9 00			     LDA     #0
ROM:6058 85 8E			     STA     score_1e1_1
ROM:605A 85 8F			     STA     score_1e3_1e2
ROM:605C 85 90			     STA     score_1e5_1e4
ROM:605E 85 91			     STA     score_1e6		     ; zero score
ROM:6060 85 97			     STA     unused_97
ROM:6062 85 A5			     STA     byte_A5
ROM:6064 85 53			     STA     guard_respawn_col
ROM:6066 85 AB			     STA     demo_inp_cnt
ROM:6068 85 A8			     STA     lsb_demo_inp_ptr
ROM:606A A9 9B			     LDA     #$9B ; ''
ROM:606C 85 A9			     STA     msb_demo_inp_ptr
ROM:606E A9 05			     LDA     #5			     ; number of lives
ROM:6070 85 98			     STA     no_lives
ROM:6072 A5 A7			     LDA     attract_mode
ROM:6074 4A			     LSR     A
ROM:6075 F0 22			     BEQ     loc_6099
ROM:6077 A9 01			     LDA     #1
ROM:6079 20 59 63		     JSR     read_disk_and_chk_sig
ROM:607C C9 00			     CMP     #0
ROM:607E D0 06			     BNE     loc_6086
ROM:6080 20 06 81		     JSR     disk_not_lode_runner
ROM:6083 4C 08 60		     JMP     display_title_screen
ROM:6086	     ; ---------------------------------------------------------------------------
ROM:6086
ROM:6086	     loc_6086:					     ; CODE XREF: ROM:607Ej
ROM:6086 AD FF 1F		     LDA     $1FFF
ROM:6089 D0 06			     BNE     loc_6091
ROM:608B A5 36			     LDA     off_36
ROM:608D A6 37			     LDX     off_36+1
ROM:608F D0 04			     BNE     loc_6095
ROM:6091
ROM:6091	     loc_6091:					     ; CODE XREF: ROM:6089j
ROM:6091 A5 38			     LDA     byte_38
ROM:6093 A6 39			     LDX     unk_39
ROM:6095
ROM:6095	     loc_6095:					     ; CODE XREF: ROM:608Fj
ROM:6095 85 24			     STA     unk_24
ROM:6097 86 25			     STX     unk_25
ROM:6099
ROM:6099	     loc_6099:					     ; CODE XREF: ROM:6075j
ROM:6099 20 AD 79		     JSR     cls_and_display_game_status
ROM:609C 8D 54 C0		     STA     $C054		     ; select text/graphics page 1
ROM:609F
ROM:609F	     main_game_loop:				     ; CODE XREF: ROM:next_level_contj
ROM:609F A2 01			     LDX     #1
ROM:60A1 20 38 62		     JSR     init_read_unpack_display_level
ROM:60A4 A9 00			     LDA     #0
ROM:60A6 85 9E			     STA     key_1
ROM:60A8 85 9F			     STA     key_2
ROM:60AA A5 A7			     LDA     attract_mode
ROM:60AC 4A			     LSR     A
ROM:60AD F0 10			     BEQ     loc_60BF
ROM:60AF 20 9F 86		     JSR     keybd_flush
ROM:60B2 A5 00			     LDA     current_col
ROM:60B4 85 85			     STA     col
ROM:60B6 A5 01			     LDA     current_row
ROM:60B8 85 86			     STA     row
ROM:60BA A9 09			     LDA     #9			     ; player
ROM:60BC 20 00 87		     JSR     blink_char_and_wait_for_key
ROM:60BF
ROM:60BF	     loc_60BF:					     ; CODE XREF: ROM:60ADj
ROM:60BF A2 00			     LDX     #0
ROM:60C1 86 9C			     STX     dig_dir
ROM:60C3 86 54			     STX     byte_54
ROM:60C5 A5 97			     LDA     unused_97		     ; should be 0
ROM:60C7 18			     CLC
ROM:60C8 65 8D			     ADC     no_guards
ROM:60CA A8			     TAY
ROM:60CB BE 14 62		     LDX     x3_tbl,Y		     ; *3
ROM:60CE BD A7 6C		     LDA     byte_6CA7,X
ROM:60D1 85 60			     STA     byte_60
ROM:60D3 BD A8 6C		     LDA     byte_6CA7+1,X
ROM:60D6 85 61			     STA     byte_61
ROM:60D8 BD A9 6C		     LDA     byte_6CA7+2,X
ROM:60DB 85 62			     STA     byte_62
ROM:60DD A4 97			     LDY     unused_97		     ; should be 0
ROM:60DF B9 1D 62		     LDA     byte_621D,Y	     ; should be 1st entry (0x26)
ROM:60E2 85 5F			     STA     guard_trap_cnt_init     ; how long	guards remain in holes
ROM:60E4
ROM:60E4	     in_level_loop:				     ; CODE XREF: ROM:6118j
ROM:60E4 20 BD 64		     JSR     handle_player	     ; handle moving?
ROM:60E7 A5 9A			     LDA     level_active	     ; alive?
ROM:60E9 F0 54			     BEQ     dec_lives		     ; no, go
ROM:60EB 20 11 88		     JSR     sub_8811
ROM:60EE A5 93			     LDA     no_gold		     ; any gold	remaining?
ROM:60F0 D0 03			     BNE     loc_60F5		     ; yes, skip
ROM:60F2 20 31 86		     JSR     draw_end_of_screen_ladder
ROM:60F5
ROM:60F5	     loc_60F5:					     ; CODE XREF: ROM:60F0j
ROM:60F5 A5 01			     LDA     current_row
ROM:60F7 D0 0E			     BNE     loc_6107		     ; not top row
ROM:60F9 A5 03			     LDA     y_offset_within_tile
ROM:60FB C9 02			     CMP     #2
ROM:60FD D0 08			     BNE     loc_6107
ROM:60FF A5 93			     LDA     no_gold		     ; any gold	remaining?
ROM:6101 F0 17			     BEQ     next_level		     ; no, skip
ROM:6103 C9 FF			     CMP     #$FF		     ; issue with eos ladder?
ROM:6105 F0 13			     BEQ     next_level		     ; yes, go
ROM:6107
ROM:6107	     loc_6107:					     ; CODE XREF: ROM:60F7j
ROM:6107							     ; ROM:60FDj
ROM:6107 20 F4 75		     JSR     respawn_guards_and_update_holes ; enemy respawn & hole refilling
ROM:610A A5 9A			     LDA     level_active	     ; alive?
ROM:610C F0 31			     BEQ     dec_lives		     ; no, go
ROM:610E 20 11 88		     JSR     sub_8811		     ; sound?
ROM:6111 20 82 6C		     JSR     handle_guards	     ; update guards
ROM:6114 A5 9A			     LDA     level_active	     ; alive?
ROM:6116 F0 27			     BEQ     dec_lives		     ; no, go
ROM:6118 D0 CA			     BNE     in_level_loop
ROM:611A
ROM:611A	     next_level:				     ; CODE XREF: ROM:6101j
ROM:611A							     ; ROM:6105j
ROM:611A E6 A6			     INC     level		     ; next level
ROM:611C E6 96			     INC     level_0_based	     ; level-1?
ROM:611E E6 98			     INC     no_lives		     ; extra life
ROM:6120 D0 02			     BNE     loc_6124		     ; skip if no. lives didn't wrap
ROM:6122 C6 98			     DEC     no_lives		     ; fix to 255
ROM:6124
ROM:6124	     loc_6124:					     ; CODE XREF: ROM:6120j
ROM:6124 A2 0F			     LDX     #15		     ; loop 15 times
ROM:6126 86 5C			     STX     farthest_updown_plyr_row
ROM:6128
ROM:6128	     loc_6128:					     ; CODE XREF: ROM:613Aj
ROM:6128 A0 01			     LDY     #1
ROM:612A A9 00			     LDA     #0			     ; add 100
ROM:612C 20 92 7A		     JSR     update_and_display_score
ROM:612F 20 2A 62		     JSR     sub_622A		     ; some sound stuff
ROM:6132 20 2A 62		     JSR     sub_622A
ROM:6135 20 2A 62		     JSR     sub_622A
ROM:6138 C6 5C			     DEC     farthest_updown_plyr_row ;	done?
ROM:613A D0 EC			     BNE     loc_6128		     ; no, loop
ROM:613C
ROM:613C	     next_level_cont:				     ; CODE XREF: ROM:6184j
ROM:613C 4C 9F 60		     JMP     main_game_loop
ROM:613F	     ; ---------------------------------------------------------------------------
ROM:613F
ROM:613F	     dec_lives:					     ; CODE XREF: ROM:60E9j
ROM:613F							     ; ROM:610Cj ...
ROM:613F C6 98			     DEC     no_lives
ROM:6141 20 70 7A		     JSR     display_no_lives
ROM:6144 20 E1 87		     JSR     sub_87E1		     ; sound stuff!
ROM:6144	     ; ---------------------------------------------------------------------------
ROM:6147 02 40 02 40+		     .WORD $4002, $4002, $5003,	$5003, $6004, $6004, $7005, $7005, $8006
ROM:6147 03 50 03 50+		     .WORD $8006, $9007, $9007,	$A008, $A008, $B009, $B009, $C00A, $C00A
ROM:6147 04 60 04 60+		     .WORD $D00B, $D00B, $E00C,	$E00C, $F00D, $F00D
ROM:6177 00			     .BYTE   0
ROM:6178	     ; ---------------------------------------------------------------------------
ROM:6178
ROM:6178	     loc_6178:					     ; CODE XREF: ROM:617Bj
ROM:6178 20 11 88		     JSR     sub_8811		     ; sound stuff!
ROM:617B B0 FB			     BCS     loc_6178
ROM:617D A5 A7			     LDA     attract_mode
ROM:617F 4A			     LSR     A			     ; attract mode?
ROM:6180 F0 4E			     BEQ     loc_61D0		     ; yes, go
ROM:6182 A5 98			     LDA     no_lives		     ; any lives left?
ROM:6184 D0 B6			     BNE     next_level_cont	     ; yes, continue
ROM:6186 20 C8 84		     JSR     loc_84C8		     ; some score stuff
ROM:6189 20 1A 8B		     JSR     game_over_animation
ROM:618C B0 68			     BCS     check_start_new_game
ROM:618E
ROM:618E	     title_wait_for_key:			     ; CODE XREF: ROM:6053j
ROM:618E							     ; ROM:61DBj ...
ROM:618E 20 9F 86		     JSR     keybd_flush
ROM:6191 A2 FF			     LDX     #$FF
ROM:6193 A0 FF			     LDY     #$FF
ROM:6195 A9 03			     LDA     #3			     ; timeout = 255*255*3
ROM:6197 85 86			     STA     row
ROM:6199
ROM:6199	     loc_6199:					     ; CODE XREF: ROM:61AFj
ROM:6199							     ; ROM:61B2j ...
ROM:6199 A5 95			     LDA     paddles_detected
ROM:619B C9 CB			     CMP     #$CB ; 'Ë'
ROM:619D F0 0A			     BEQ     loc_61A9
ROM:619F AD 62 C0		     LDA     $C062		     ; closed apple key	read
ROM:61A2 30 5D			     BMI     start_new_game	     ; pressed,	go
ROM:61A4 AD 61 C0		     LDA     $C061		     ; open apple key read
ROM:61A7 30 58			     BMI     start_new_game	     ; pressed,	go
ROM:61A9
ROM:61A9	     loc_61A9:					     ; CODE XREF: ROM:619Dj
ROM:61A9 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:61AC 30 48			     BMI     check_start_new_game    ; key pressed, go
ROM:61AE CA			     DEX
ROM:61AF D0 E8			     BNE     loc_6199
ROM:61B1 88			     DEY
ROM:61B2 D0 E5			     BNE     loc_6199
ROM:61B4 C6 86			     DEC     row		     ; timed-out?
ROM:61B6 D0 E1			     BNE     loc_6199		     ; no, loop
ROM:61B8 A5 A7			     LDA     attract_mode
ROM:61BA D0 22			     BNE     loc_61DE
ROM:61BC A2 01			     LDX     #1
ROM:61BE 86 A7			     STX     attract_mode
ROM:61C0 86 A6			     STX     level
ROM:61C2 86 AC			     STX     byte_AC
ROM:61C4 86 9D			     STX     game_active
ROM:61C6 A6 99			     LDX     byte_99
ROM:61C8 8E D1 61		     STX     loc_61D0+1
ROM:61CB 85 99			     STA     byte_99
ROM:61CD 4C 56 60		     JMP     zero_score_and_init_game
ROM:61D0	     ; ---------------------------------------------------------------------------
ROM:61D0
ROM:61D0	     loc_61D0:					     ; CODE XREF: ROM:6180j
ROM:61D0							     ; DATA XREF: ROM:61C8w
ROM:61D0 A9 00			     LDA     #0
ROM:61D2 85 99			     STA     byte_99
ROM:61D4 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:61D7 A6 AC			     LDX     byte_AC
ROM:61D9 F0 1B			     BEQ     check_start_new_game
ROM:61DB 4C 8E 61		     JMP     title_wait_for_key
ROM:61DE	     ; ---------------------------------------------------------------------------
ROM:61DE
ROM:61DE	     loc_61DE:					     ; CODE XREF: ROM:61BAj
ROM:61DE C9 01			     CMP     #1
ROM:61E0 D0 11			     BNE     jmp_display_title_screen
ROM:61E2 F0 05			     BEQ     high_score_screen
ROM:61E4
ROM:61E4	     read_and_display_scores:			     ; CODE XREF: ROM:61FFj
ROM:61E4 A9 01			     LDA     #1
ROM:61E6 20 59 63		     JSR     read_disk_and_chk_sig   ; disk access
ROM:61E9
ROM:61E9	     high_score_screen:				     ; CODE XREF: ROM:61E2j
ROM:61E9 20 6B 78		     JSR     cls_and_display_high_scores
ROM:61EC A9 02			     LDA     #2
ROM:61EE 85 A7			     STA     attract_mode
ROM:61F0 4C 8E 61		     JMP     title_wait_for_key
ROM:61F3	     ; ---------------------------------------------------------------------------
ROM:61F3
ROM:61F3	     jmp_display_title_screen:			     ; CODE XREF: ROM:61E0j
ROM:61F3 4C 08 60		     JMP     display_title_screen
ROM:61F6	     ; ---------------------------------------------------------------------------
ROM:61F6
ROM:61F6	     check_start_new_game:			     ; CODE XREF: ROM:618Cj
ROM:61F6							     ; ROM:61ACj ...
ROM:61F6 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:61F9 C9 85			     CMP     #$85 ; ''              ; 'e'?
ROM:61FB F0 14			     BEQ     jmp_board_editor	     ; yes, go to editor
ROM:61FD C9 8D			     CMP     #$8D ; ''              ; <ENTER>?
ROM:61FF F0 E3			     BEQ     read_and_display_scores
ROM:6201
ROM:6201	     start_new_game:				     ; CODE XREF: ROM:61A2j
ROM:6201							     ; ROM:61A7j
ROM:6201 A2 00			     LDX     #0
ROM:6203 86 96			     STX     level_0_based
ROM:6205 E8			     INX
ROM:6206 86 A6			     STX     level
ROM:6208 86 9D			     STX     game_active
ROM:620A A9 02			     LDA     #2
ROM:620C 85 A7			     STA     attract_mode
ROM:620E 4C 56 60		     JMP     zero_score_and_init_game
ROM:6211	     ; ---------------------------------------------------------------------------
ROM:6211
ROM:6211	     jmp_board_editor:				     ; CODE XREF: ROM:61FBj
ROM:6211 4C 84 7B		     JMP     enter_board_editor
ROM:6211	     ; ---------------------------------------------------------------------------
ROM:6214 00 03 06 09+x3_tbl:	     .BYTE 0, 3, 6, 9, 12, 15, 18, 21, 24
ROM:6214 0C 0F 12 15+						     ; DATA XREF: ROM:60CBr
ROM:621D 26 26 2E 44+byte_621D:	     .BYTE $26,	$26, $2E, $44, $47, $49, $4A, $4B, $4C,	$4D, $4E, $4F
ROM:621D 47 49 4A 4B+						     ; DATA XREF: ROM:60DFr
ROM:621D 4C 4D 4E 4F+		     .BYTE $50
ROM:622A
ROM:622A	     ; =============== S U B R O U T I N E =======================================
ROM:622A
ROM:622A
ROM:622A	     sub_622A:					     ; CODE XREF: ROM:612Fp
ROM:622A							     ; ROM:6132p ...
ROM:622A A5 5C			     LDA     farthest_updown_plyr_row
ROM:622C 0A			     ASL     A
ROM:622D 0A			     ASL     A
ROM:622E 0A			     ASL     A
ROM:622F 0A			     ASL     A
ROM:6230 A2 06			     LDX     #6
ROM:6232 20 D5 87		     JSR     sub_87D5
ROM:6235 4C 11 88		     JMP     sub_8811
ROM:6235	     ; End of function sub_622A
ROM:6235
ROM:6238
ROM:6238	     ; =============== S U B R O U T I N E =======================================
ROM:6238
ROM:6238
ROM:6238	     init_read_unpack_display_level:		     ; CODE XREF: ROM:60A1p
ROM:6238							     ; init_read_unpack_display_level+88j ...
ROM:6238 86 A2			     STX     editor_n
ROM:623A A2 FF			     LDX     #$FF
ROM:623C 86 00			     STX     current_col
ROM:623E E8			     INX			     ; =0
ROM:623F 86 A3			     STX     no_eos_ladder_tiles
ROM:6241 86 93			     STX     no_gold
ROM:6243 86 8D			     STX     no_guards
ROM:6245 86 19			     STX     curr_guard
ROM:6247 86 A0			     STX     dig_sprite
ROM:6249 86 92			     STX     packed_byte_cnt
ROM:624B 86 1A			     STX     nibble_cnt
ROM:624D 86 86			     STX     row
ROM:624F 8A			     TXA
ROM:6250 A2 1E			     LDX     #$1E		     ; number of holes
ROM:6252
ROM:6252	     loc_6252:					     ; CODE XREF: init_read_unpack_display_level+1Ej
ROM:6252 9D E0 0C		     STA     hole_cnt,X		     ; hole counters
ROM:6255 CA			     DEX
ROM:6256 10 FA			     BPL     loc_6252		     ; clear all counters
ROM:6258 A2 05			     LDX     #5			     ; number of guards
ROM:625A
ROM:625A	     loc_625A:					     ; CODE XREF: init_read_unpack_display_level+26j
ROM:625A 9D 98 0C		     STA     guard_cnt,X
ROM:625D CA			     DEX
ROM:625E 10 FA			     BPL     loc_625A		     ; loop through all	guards
ROM:6260 A9 01			     LDA     #1
ROM:6262 85 9A			     STA     level_active
ROM:6264 20 0E 63		     JSR     read_level_data
ROM:6267 A4 86			     LDY     row
ROM:6269
ROM:6269	     loc_6269:					     ; CODE XREF: init_read_unpack_display_level+76j
ROM:6269 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:626C 85 06			     STA     lsb_row_level_data_addr
ROM:626E 85 08			     STA     byte_8
ROM:6270 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6273 85 07			     STA     msb_row_level_data_addr
ROM:6275 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6278 85 09			     STA     byte_9		     ; setup tilemap address
ROM:627A A9 00			     LDA     #0			     ; first column
ROM:627C 85 85			     STA     col
ROM:627E
ROM:627E	     loc_627E:					     ; CODE XREF: init_read_unpack_display_level+6Ej
ROM:627E A5 1A			     LDA     nibble_cnt		     ; nibble count
ROM:6280 4A			     LSR     A			     ; bit0 -> carry
ROM:6281 A4 92			     LDY     packed_byte_cnt	     ; data counter
ROM:6283 B9 00 0D		     LDA     $D00,Y		     ; level data from disk buffer
ROM:6286 B0 04			     BCS     loc_628C		     ; high nibble? yes, skip
ROM:6288 29 0F			     AND     #$F		     ; low nibble only
ROM:628A 10 06			     BPL     loc_6292
ROM:628C
ROM:628C	     loc_628C:					     ; CODE XREF: init_read_unpack_display_level+4Ej
ROM:628C 4A			     LSR     A
ROM:628D 4A			     LSR     A
ROM:628E 4A			     LSR     A
ROM:628F 4A			     LSR     A			     ; high to low nibble
ROM:6290 E6 92			     INC     packed_byte_cnt	     ; inc data	counter
ROM:6292
ROM:6292	     loc_6292:					     ; CODE XREF: init_read_unpack_display_level+52j
ROM:6292 E6 1A			     INC     nibble_cnt		     ; inc nibble count
ROM:6294 A4 85			     LDY     col
ROM:6296 C9 0A			     CMP     #$A		     ; 0-9?
ROM:6298 90 02			     BCC     loc_629C		     ; yes, skip
ROM:629A A9 00			     LDA     #0			     ; invalid data
ROM:629C
ROM:629C	     loc_629C:					     ; CODE XREF: init_read_unpack_display_level+60j
ROM:629C 91 06			     STA     (lsb_row_level_data_addr),Y ; store level data nibble as byte
ROM:629E 91 08			     STA     (byte_8),Y		     ; store level data	nibble as byte (copy)
ROM:62A0 E6 85			     INC     col		     ; next column
ROM:62A2 A5 85			     LDA     col
ROM:62A4 C9 1C			     CMP     #28		     ; last column?
ROM:62A6 90 D6			     BCC     loc_627E		     ; no, loop
ROM:62A8 E6 86			     INC     row
ROM:62AA A4 86			     LDY     row
ROM:62AC C0 10			     CPY     #16		     ; last row?
ROM:62AE 90 B9			     BCC     loc_6269		     ; no, loop
ROM:62B0 20 B3 63		     JSR     init_and_draw_level
ROM:62B3 90 0E			     BCC     draw_ok		     ; if no error
ROM:62B5 A5 96			     LDA     level_0_based
ROM:62B7 F0 0B			     BEQ     jmp_display_title_screen
ROM:62B9 A2 00			     LDX     #0
ROM:62BB 86 96			     STX     level_0_based
ROM:62BD E6 97			     INC     unused_97
ROM:62BF CA			     DEX
ROM:62C0 4C 38 62		     JMP     init_read_unpack_display_level
ROM:62C3	     ; ---------------------------------------------------------------------------
ROM:62C3
ROM:62C3	     draw_ok:					     ; CODE XREF: init_read_unpack_display_level+7Bj
ROM:62C3 60			     RTS
ROM:62C4	     ; ---------------------------------------------------------------------------
ROM:62C4
ROM:62C4	     jmp_display_title_screen:			     ; CODE XREF: init_read_unpack_display_level+7Fj
ROM:62C4 4C 08 60		     JMP     display_title_screen
ROM:62C4	     ; End of function init_read_unpack_display_level
ROM:62C4
ROM:62C7
ROM:62C7	     ; =============== S U B R O U T I N E =======================================
ROM:62C7
ROM:62C7
ROM:62C7	     sub_62C7:					     ; CODE XREF: sub_7F98:loc_7FB7p
ROM:62C7 A9 00			     LDA     #0
ROM:62C9 85 92			     STA     packed_byte_cnt
ROM:62CB 85 1A			     STA     nibble_cnt
ROM:62CD 85 86			     STA     row
ROM:62CF
ROM:62CF	     loc_62CF:					     ; CODE XREF: sub_62C7+40j
ROM:62CF A4 86			     LDY     row
ROM:62D1 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:62D4 85 06			     STA     lsb_row_level_data_addr
ROM:62D6 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:62D9 85 07			     STA     msb_row_level_data_addr
ROM:62DB A0 00			     LDY     #0
ROM:62DD 84 85			     STY     col
ROM:62DF
ROM:62DF	     loc_62DF:					     ; CODE XREF: sub_62C7+38j
ROM:62DF A5 1A			     LDA     nibble_cnt
ROM:62E1 4A			     LSR     A
ROM:62E2 B1 06			     LDA     (lsb_row_level_data_addr),Y
ROM:62E4 B0 04			     BCS     loc_62EA
ROM:62E6 85 1E			     STA     msg_char
ROM:62E8 10 0D			     BPL     loc_62F7
ROM:62EA
ROM:62EA	     loc_62EA:					     ; CODE XREF: sub_62C7+1Dj
ROM:62EA 0A			     ASL     A
ROM:62EB 0A			     ASL     A
ROM:62EC 0A			     ASL     A
ROM:62ED 0A			     ASL     A
ROM:62EE 05 1E			     ORA     msg_char
ROM:62F0 A4 92			     LDY     packed_byte_cnt
ROM:62F2 99 00 0D		     STA     $D00,Y		     ; disk buffer address
ROM:62F5 E6 92			     INC     packed_byte_cnt
ROM:62F7
ROM:62F7	     loc_62F7:					     ; CODE XREF: sub_62C7+21j
ROM:62F7 E6 1A			     INC     nibble_cnt
ROM:62F9 E6 85			     INC     col		     ; next column
ROM:62FB A4 85			     LDY     col
ROM:62FD C0 1C			     CPY     #28		     ; done all	columns?
ROM:62FF 90 DE			     BCC     loc_62DF		     ; no, loop
ROM:6301 E6 86			     INC     row		     ; next row
ROM:6303 A5 86			     LDA     row
ROM:6305 C9 10			     CMP     #16		     ; done all	rows?
ROM:6307 90 C6			     BCC     loc_62CF		     ; no, loop
ROM:6309 A9 02			     LDA     #2
ROM:630B 4C 0E 63		     JMP     read_level_data
ROM:630B	     ; End of function sub_62C7
ROM:630B
ROM:630E
ROM:630E	     ; =============== S U B R O U T I N E =======================================
ROM:630E
ROM:630E
ROM:630E	     read_level_data:				     ; CODE XREF: init_read_unpack_display_level+2Cp
ROM:630E							     ; sub_62C7+44j ...
ROM:630E 8D F4 B7		     STA     byte_B7F4
ROM:6311 A5 A7			     LDA     attract_mode
ROM:6313 4A			     LSR     A
ROM:6314 F0 2F			     BEQ     read_attract_mode_levels ;	already	in memory, skip
ROM:6316 A5 96			     LDA     level_0_based	     ; zero-based level
ROM:6318 4A			     LSR     A
ROM:6319 4A			     LSR     A
ROM:631A 4A			     LSR     A
ROM:631B 4A			     LSR     A
ROM:631C 18			     CLC
ROM:631D 69 03			     ADC     #3			     ; calculate track # for level data
ROM:631F 8D EC B7		     STA     byte_B7EC		     ; track
ROM:6322 A5 96			     LDA     level_0_based
ROM:6324 29 0F			     AND     #$F		     ; calculate sector	# for level data
ROM:6326 8D ED B7		     STA     byte_B7ED		     ; sector
ROM:6329 A9 00			     LDA     #0
ROM:632B 8D F0 B7		     STA     byte_B7F0
ROM:632E A9 0D			     LDA     #$D		     ; disk buffer address = $D00
ROM:6330 8D F1 B7		     STA     byte_B7F1
ROM:6333 A9 00			     LDA     #0
ROM:6335 8D EB B7		     STA     byte_B7EB
ROM:6338
ROM:6338	     loc_6338:					     ; CODE XREF: ROM:7E25p
ROM:6338 A0 E8			     LDY     #$E8 ; 'è'
ROM:633A A9 B7			     LDA     #$B7 ; '·'
ROM:633C 20 23 00		     JSR     unk_23
ROM:633F 90 03			     BCC     locret_6344	     ; ok, return
ROM:6341 4C 08 60		     JMP     display_title_screen    ; problem!
ROM:6344	     ; ---------------------------------------------------------------------------
ROM:6344
ROM:6344	     locret_6344:				     ; CODE XREF: read_level_data+31j
ROM:6344 60			     RTS
ROM:6345	     ; ---------------------------------------------------------------------------
ROM:6345
ROM:6345	     read_attract_mode_levels:			     ; CODE XREF: read_level_data+6j
ROM:6345 A5 A6			     LDA     level
ROM:6347 18			     CLC
ROM:6348 69 9E			     ADC     #$9E ; ''              ; calculate base address of level data
ROM:634A 85 0D			     STA     msb_line_addr_pg1
ROM:634C A0 00			     LDY     #0
ROM:634E 84 0C			     STY     lsb_line_addr_pg1
ROM:6350
ROM:6350	     copy_level_data:				     ; CODE XREF: read_level_data+48j
ROM:6350 B1 0C			     LDA     (lsb_line_addr_pg1),Y
ROM:6352 99 00 0D		     STA     $D00,Y		     ; copy to low memory
ROM:6355 C8			     INY			     ; next addr
ROM:6356 D0 F8			     BNE     copy_level_data	     ; finished? no, loop
ROM:6358 60			     RTS
ROM:6358	     ; End of function read_level_data
ROM:6358
ROM:6359
ROM:6359	     ; =============== S U B R O U T I N E =======================================
ROM:6359
ROM:6359
ROM:6359	     read_disk_and_chk_sig:			     ; CODE XREF: ROM:6005p
ROM:6359							     ; ROM:6079p ...
ROM:6359
ROM:6359	     ; FUNCTION	CHUNK AT ROM:6008 SIZE 00000028	BYTES
ROM:6359
ROM:6359 8D F4 B7		     STA     byte_B7F4
ROM:635C A9 0C			     LDA     #$C
ROM:635E 8D EC B7		     STA     byte_B7EC
ROM:6361 A9 0F			     LDA     #$F
ROM:6363 8D ED B7		     STA     byte_B7ED
ROM:6366 A9 00			     LDA     #0
ROM:6368 8D F0 B7		     STA     byte_B7F0
ROM:636B A9 1F			     LDA     #$1F
ROM:636D 8D F1 B7		     STA     byte_B7F1
ROM:6370 A9 00			     LDA     #0
ROM:6372 8D EB B7		     STA     byte_B7EB
ROM:6375 A0 E8			     LDY     #$E8 ; 'è'
ROM:6377 A9 B7			     LDA     #$B7 ; '·'
ROM:6379 20 A5 63		     JSR     sub_63A5
ROM:637C 90 03			     BCC     check_disk_signature
ROM:637E 4C 08 60		     JMP     display_title_screen
ROM:6381	     ; ---------------------------------------------------------------------------
ROM:6381
ROM:6381	     check_disk_signature:			     ; CODE XREF: read_disk_and_chk_sig+23j
ROM:6381 A0 0A			     LDY     #10		     ; number of letters-1
ROM:6383 A9 00			     LDA     #0
ROM:6385 85 50			     STA     lchar_mask
ROM:6387
ROM:6387	     loc_6387:					     ; CODE XREF: read_disk_and_chk_sig+39j
ROM:6387 B9 F4 1F		     LDA     $1FF4,Y		     ; ptr "LODE RUNNER" in disk sector
ROM:638A 59 A8 63		     EOR     disk_signature,Y	     ; signature text
ROM:638D 05 50			     ORA     lchar_mask		     ; running XOR
ROM:638F 85 50			     STA     lchar_mask		     ; save
ROM:6391 88			     DEY			     ; done?
ROM:6392 10 F3			     BPL     loc_6387		     ; no, loop
ROM:6394 A5 50			     LDA     lchar_mask		     ; get running XOR
ROM:6396 F0 03			     BEQ     loc_639B		     ; ok? yes,	skip
ROM:6398 A9 00			     LDA     #0			     ; flag failure
ROM:639A 60			     RTS
ROM:639B	     ; ---------------------------------------------------------------------------
ROM:639B
ROM:639B	     loc_639B:					     ; CODE XREF: read_disk_and_chk_sig+3Dj
ROM:639B A9 01			     LDA     #1
ROM:639D AE FF 1F		     LDX     $1FFF		     ; last byte in sector
ROM:63A0 D0 02			     BNE     locret_63A4
ROM:63A2 A9 FF			     LDA     #$FF
ROM:63A4
ROM:63A4	     locret_63A4:				     ; CODE XREF: read_disk_and_chk_sig+47j
ROM:63A4 60			     RTS
ROM:63A4	     ; End of function read_disk_and_chk_sig
ROM:63A4
ROM:63A5
ROM:63A5	     ; =============== S U B R O U T I N E =======================================
ROM:63A5
ROM:63A5
ROM:63A5	     sub_63A5:					     ; CODE XREF: read_disk_and_chk_sig+20p
ROM:63A5 6C 36 00		     JMP     (off_36)
ROM:63A5	     ; End of function sub_63A5
ROM:63A5
ROM:63A5	     ; ---------------------------------------------------------------------------
ROM:63A8 CC CF C4 C5+disk_signature: .BYTE $CC,	$CF, $C4, $C5, $A0, $D2, $D5, $CE, $CE,	$C5, $D2
ROM:63A8 A0 D2 D5 CE+						     ; DATA XREF: read_disk_and_chk_sig+31r
ROM:63A8 CE C5 D2						     ; "LODE RUNNER"
ROM:63B3
ROM:63B3	     ; =============== S U B R O U T I N E =======================================
ROM:63B3
ROM:63B3
ROM:63B3	     init_and_draw_level:			     ; CODE XREF: init_read_unpack_display_level+78p
ROM:63B3 A0 0F			     LDY     #15		     ; last row
ROM:63B5 84 86			     STY     row
ROM:63B7
ROM:63B7	     loc_63B7:					     ; CODE XREF: init_and_draw_level:loc_6426j
ROM:63B7 B9 05 1C		     LDA     lsb_row_addr,Y	     ; lsb of row in level data
ROM:63B7							     ; (level data $0800-)
ROM:63BA 85 06			     STA     lsb_row_level_data_addr
ROM:63BC 85 08			     STA     byte_8
ROM:63BE B9 15 1C		     LDA     msb_row_addr_1,Y	     ; msb of row in level data
ROM:63C1 85 07			     STA     msb_row_level_data_addr
ROM:63C3 B9 25 1C		     LDA     msb_row_addr_2,Y	     ; msb of row in level data	(copy)
ROM:63C6 85 09			     STA     byte_9
ROM:63C8 A0 1B			     LDY     #27		     ; last column
ROM:63CA 84 85			     STY     col
ROM:63CC
ROM:63CC	     loc_63CC:					     ; CODE XREF: init_and_draw_level:loc_6428j
ROM:63CC B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap 1
ROM:63CE A6 A2			     LDX     editor_n
ROM:63D0 F0 1C			     BEQ     loc_63EE
ROM:63D2 C9 06			     CMP     #6			     ; end-of_screen ladder?
ROM:63D4 D0 1A			     BNE     loc_63F0		     ; no, skip
ROM:63D6 A6 A3			     LDX     no_eos_ladder_tiles
ROM:63D8 E0 2D			     CPX     #$2D ; '-'              ; max?
ROM:63DA B0 0C			     BCS     loc_63E8		     ; yes, skip
ROM:63DC E6 A3			     INC     no_eos_ladder_tiles
ROM:63DE E8			     INX
ROM:63DF A5 86			     LDA     row
ROM:63E1 9D 30 0C		     STA     eos_ladder_row,X	     ; store eos ladder	row
ROM:63E4 98			     TYA
ROM:63E5 9D 00 0C		     STA     eos_ladder_col,X	     ; store eos ladder	col
ROM:63E8
ROM:63E8	     loc_63E8:					     ; CODE XREF: init_and_draw_level+27j
ROM:63E8							     ; init_and_draw_level+4Dj	...
ROM:63E8 A9 00			     LDA     #0
ROM:63EA 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap 1
ROM:63EC 91 08			     STA     (byte_8),Y		     ; update tilemap 2
ROM:63EE
ROM:63EE	     loc_63EE:					     ; CODE XREF: init_and_draw_level+1Dj
ROM:63EE F0 60			     BEQ     loc_6450
ROM:63F0
ROM:63F0	     loc_63F0:					     ; CODE XREF: init_and_draw_level+21j
ROM:63F0 C9 07			     CMP     #7			     ; gold?
ROM:63F2 D0 04			     BNE     loc_63F8		     ; no, skip
ROM:63F4 E6 93			     INC     no_gold
ROM:63F6 D0 58			     BNE     loc_6450		     ; always
ROM:63F8
ROM:63F8	     loc_63F8:					     ; CODE XREF: init_and_draw_level+3Fj
ROM:63F8 C9 08			     CMP     #8			     ; enemy?
ROM:63FA D0 2E			     BNE     loc_642A		     ; no, skip
ROM:63FC A6 8D			     LDX     no_guards
ROM:63FE E0 05			     CPX     #5			     ; max?
ROM:6400 B0 E6			     BCS     loc_63E8		     ; yes, skip
ROM:6402 E6 8D			     INC     no_guards		     ; add a guard
ROM:6404 E8			     INX
ROM:6405 98			     TYA
ROM:6406 9D 60 0C		     STA     guard_col,X
ROM:6409 A5 86			     LDA     row
ROM:640B 9D 68 0C		     STA     guard_row,X
ROM:640E A9 00			     LDA     #0
ROM:6410 9D 70 0C		     STA     guard_state,X
ROM:6413 9D 88 0C		     STA     guard_sprite,X
ROM:6416 A9 02			     LDA     #2
ROM:6418 9D 78 0C		     STA     guard_x_offset,X
ROM:641B 9D 80 0C		     STA     guard_y_offset,X
ROM:641E A9 00			     LDA     #0
ROM:6420 91 08			     STA     (byte_8),Y		     ; update tilemap 2
ROM:6422 A9 08			     LDA     #8			     ; enemy
ROM:6424 D0 2A			     BNE     loc_6450		     ; always
ROM:6426
ROM:6426	     loc_6426:					     ; CODE XREF: init_and_draw_level+AAj
ROM:6426 10 8F			     BPL     loc_63B7
ROM:6428
ROM:6428	     loc_6428:					     ; CODE XREF: init_and_draw_level+A4j
ROM:6428 10 A2			     BPL     loc_63CC
ROM:642A
ROM:642A	     loc_642A:					     ; CODE XREF: init_and_draw_level+47j
ROM:642A C9 09			     CMP     #9			     ; player?
ROM:642C D0 1C			     BNE     loc_644A		     ; no, skip
ROM:642E A6 00			     LDX     current_col
ROM:6430 10 B6			     BPL     loc_63E8
ROM:6432 84 00			     STY     current_col
ROM:6434 A6 86			     LDX     row
ROM:6436 86 01			     STX     current_row
ROM:6438 A2 02			     LDX     #2
ROM:643A 86 02			     STX     x_offset_within_tile
ROM:643C 86 03			     STX     y_offset_within_tile
ROM:643E A2 08			     LDX     #8
ROM:6440 86 04			     STX     sprite_index
ROM:6442 A9 00			     LDA     #0
ROM:6444 91 08			     STA     (byte_8),Y		     ; update tilemap 2
ROM:6446 A9 09			     LDA     #9			     ; player
ROM:6448 D0 06			     BNE     loc_6450		     ; always
ROM:644A
ROM:644A	     loc_644A:					     ; CODE XREF: init_and_draw_level+79j
ROM:644A C9 05			     CMP     #5			     ; fall-thru?
ROM:644C D0 02			     BNE     loc_6450		     ; no, skip
ROM:644E A9 01			     LDA     #1			     ; set to display diggable brick
ROM:6450
ROM:6450	     loc_6450:					     ; CODE XREF: init_and_draw_level:loc_63EEj
ROM:6450							     ; init_and_draw_level+43j	...
ROM:6450 20 B0 82		     JSR     display_char_pg2	     ; render on background
ROM:6453 C6 85			     DEC     col		     ; next column
ROM:6455 A4 85			     LDY     col		     ; finished	all columns?
ROM:6457 10 CF			     BPL     loc_6428		     ; no, loop
ROM:6459 C6 86			     DEC     row		     ; next row
ROM:645B A4 86			     LDY     row		     ; finished	all rows?
ROM:645D 10 C7			     BPL     loc_6426		     ; no, loop
ROM:645F A5 A2			     LDA     editor_n
ROM:6461 F0 06			     BEQ     loc_6469
ROM:6463 A5 00			     LDA     current_col
ROM:6465 10 24			     BPL     draw_level		     ; draw the	level (with wipe)
ROM:6467 38			     SEC
ROM:6468 60			     RTS
ROM:6469	     ; ---------------------------------------------------------------------------
ROM:6469
ROM:6469	     loc_6469:					     ; CODE XREF: init_and_draw_level+AEj
ROM:6469 A9 20			     LDA     #$20 ; ' '              ; hires page 1
ROM:646B 85 0F			     STA     msb_line_addr_pg2
ROM:646D A9 40			     LDA     #$40 ; '@'              ; hires page 2
ROM:646F 85 0D			     STA     msb_line_addr_pg1
ROM:6471 A9 00			     LDA     #0
ROM:6473 85 0E			     STA     lsb_line_addr_pg2
ROM:6475 85 0C			     STA     lsb_line_addr_pg1
ROM:6477 A8			     TAY
ROM:6478
ROM:6478	     loc_6478:					     ; CODE XREF: init_and_draw_level+CAj
ROM:6478							     ; init_and_draw_level+D4j
ROM:6478 B1 0C			     LDA     (lsb_line_addr_pg1),Y
ROM:647A 91 0E			     STA     (lsb_line_addr_pg2),Y
ROM:647C C8			     INY
ROM:647D D0 F9			     BNE     loc_6478
ROM:647F E6 0F			     INC     msb_line_addr_pg2
ROM:6481 E6 0D			     INC     msb_line_addr_pg1
ROM:6483 A6 0D			     LDX     msb_line_addr_pg1
ROM:6485 E0 60			     CPX     #$60 ; '`'
ROM:6487 90 EF			     BCC     loc_6478
ROM:6489 18			     CLC
ROM:648A 60			     RTS
ROM:648B	     ; ---------------------------------------------------------------------------
ROM:648B
ROM:648B	     draw_level:				     ; CODE XREF: init_and_draw_level+B2j
ROM:648B 20 A2 88		     JSR     wipe_or_draw_level
ROM:648E A0 0F			     LDY     #15		     ; last row
ROM:6490 84 86			     STY     row
ROM:6492
ROM:6492	     loc_6492:					     ; CODE XREF: init_and_draw_level+106j
ROM:6492 B9 05 1C		     LDA     lsb_row_addr,Y	     ; lsb of row in level data
ROM:6495 85 06			     STA     lsb_row_level_data_addr
ROM:6497 B9 15 1C		     LDA     msb_row_addr_1,Y	     ; msb of row in level data
ROM:649A 85 07			     STA     msb_row_level_data_addr
ROM:649C A0 1B			     LDY     #27		     ; last column
ROM:649E 84 85			     STY     col
ROM:64A0
ROM:64A0	     loc_64A0:					     ; CODE XREF: init_and_draw_level+100j
ROM:64A0 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get level data tile byte
ROM:64A2 C9 09			     CMP     #9			     ; player?
ROM:64A4 F0 04			     BEQ     loc_64AA		     ; yes, continue
ROM:64A6 C9 08			     CMP     #8			     ; enemy?
ROM:64A8 D0 05			     BNE     loc_64AF		     ; no, skip
ROM:64AA
ROM:64AA	     loc_64AA:					     ; CODE XREF: init_and_draw_level+F1j
ROM:64AA A9 00			     LDA     #0			     ; space
ROM:64AC 20 B0 82		     JSR     display_char_pg2	     ; wipe players & enemies from the background
ROM:64AF
ROM:64AF	     loc_64AF:					     ; CODE XREF: init_and_draw_level+F5j
ROM:64AF C6 85			     DEC     col		     ; next column
ROM:64B1 A4 85			     LDY     col		     ; finished	all columns?
ROM:64B3 10 EB			     BPL     loc_64A0		     ; no, loop
ROM:64B5 C6 86			     DEC     row		     ; next row
ROM:64B7 A4 86			     LDY     row		     ; finished	all rows?
ROM:64B9 10 D7			     BPL     loc_6492		     ; no, loop
ROM:64BB 18			     CLC
ROM:64BC 60			     RTS
ROM:64BC	     ; End of function init_and_draw_level
ROM:64BC
ROM:64BD
ROM:64BD	     ; =============== S U B R O U T I N E =======================================
ROM:64BD
ROM:64BD
ROM:64BD	     handle_player:				     ; CODE XREF: ROM:in_level_loopp
ROM:64BD A9 01			     LDA     #1
ROM:64BF 85 94			     STA     unk_94
ROM:64C1 A5 9C			     LDA     dig_dir
ROM:64C3 F0 08			     BEQ     not_digging
ROM:64C5 10 03			     BPL     loc_64CA
ROM:64C7 4C E7 67		     JMP     digging_left
ROM:64CA	     ; ---------------------------------------------------------------------------
ROM:64CA
ROM:64CA	     loc_64CA:					     ; CODE XREF: handle_player+8j
ROM:64CA 4C AD 68		     JMP     digging_right
ROM:64CD	     ; ---------------------------------------------------------------------------
ROM:64CD
ROM:64CD	     not_digging:				     ; CODE XREF: handle_player+6j
ROM:64CD A4 01			     LDY     current_row
ROM:64CF B9 05 1C		     LDA     lsb_row_addr,Y
ROM:64D2 85 08			     STA     byte_8
ROM:64D4 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:64D7 85 09			     STA     byte_9
ROM:64D9 A4 00			     LDY     current_col
ROM:64DB B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:64DD C9 03			     CMP     #3			     ; ladder?
ROM:64DF F0 41			     BEQ     cant_fall		     ; yes, go
ROM:64E1 C9 04			     CMP     #4			     ; rope?
ROM:64E3 D0 06			     BNE     check_falling	     ; no, skip
ROM:64E5 A5 03			     LDA     y_offset_within_tile
ROM:64E7 C9 02			     CMP     #2
ROM:64E9 F0 37			     BEQ     cant_fall
ROM:64EB
ROM:64EB	     check_falling:				     ; CODE XREF: handle_player+26j
ROM:64EB A5 03			     LDA     y_offset_within_tile
ROM:64ED C9 02			     CMP     #2
ROM:64EF 90 34			     BCC     handle_falling
ROM:64F1 A4 01			     LDY     current_row
ROM:64F3 C0 0F			     CPY     #15		     ; bottom row?
ROM:64F5 F0 2B			     BEQ     cant_fall		     ; yes, skip
ROM:64F7 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:64FA 85 06			     STA     lsb_row_level_data_addr
ROM:64FC 85 08			     STA     byte_8
ROM:64FE B9 16 1C		     LDA     msb_row_addr_1+1,Y
ROM:6501 85 07			     STA     msb_row_level_data_addr
ROM:6503 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:6506 85 09			     STA     byte_9		     ; adjust tilemap &	video address to row below
ROM:6508 A4 00			     LDY     current_col
ROM:650A B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:650C C9 00			     CMP     #0			     ; space?
ROM:650E F0 15			     BEQ     handle_falling	     ; yes, go
ROM:6510 C9 08			     CMP     #8			     ; enemy?
ROM:6512 F0 0E			     BEQ     cant_fall		     ; yes, go
ROM:6514 B1 08			     LDA     (byte_8),Y
ROM:6516 C9 01			     CMP     #1			     ; brick?
ROM:6518 F0 08			     BEQ     cant_fall		     ; yes, go
ROM:651A C9 02			     CMP     #2			     ; solid?
ROM:651C F0 04			     BEQ     cant_fall		     ; yes, go
ROM:651E C9 03			     CMP     #3			     ; ladder?
ROM:6520 D0 03			     BNE     handle_falling	     ; no, go
ROM:6522
ROM:6522	     cant_fall:					     ; CODE XREF: handle_player+22j
ROM:6522							     ; handle_player+2Cj ...
ROM:6522 4C 84 65		     JMP     check_falling_sound
ROM:6525	     ; ---------------------------------------------------------------------------
ROM:6525
ROM:6525	     handle_falling:				     ; CODE XREF: handle_player+32j
ROM:6525							     ; handle_player+51j ...
ROM:6525 A9 00			     LDA     #0
ROM:6527 85 9B			     STA     byte_9B
ROM:6529 20 85 6B		     JSR     calc_char_and_addr
ROM:652C 20 36 83		     JSR     wipe_char
ROM:652F A9 07			     LDA     #7			     ; char=0x13 (fall left)
ROM:6531 A6 05			     LDX     dir		     ; left?
ROM:6533 30 02			     BMI     loc_6537		     ; yes, skip
ROM:6535 A9 0F			     LDA     #$F		     ; char=0x14 (fall right)
ROM:6537
ROM:6537	     loc_6537:					     ; CODE XREF: handle_player+76j
ROM:6537 85 04			     STA     sprite_index
ROM:6539 20 13 6C		     JSR     adjust_x_offset_in_tile
ROM:653C E6 03			     INC     y_offset_within_tile
ROM:653E A5 03			     LDA     y_offset_within_tile
ROM:6540 C9 05			     CMP     #5			     ; >=5?
ROM:6542 B0 06			     BCS     fall_check_row_below    ; yes, skip
ROM:6544 20 9D 6B		     JSR     check_for_gold
ROM:6547 4C 02 6C		     JMP     draw_sprite
ROM:654A	     ; ---------------------------------------------------------------------------
ROM:654A
ROM:654A	     fall_check_row_below:			     ; CODE XREF: handle_player+85j
ROM:654A A9 00			     LDA     #0
ROM:654C 85 03			     STA     y_offset_within_tile
ROM:654E A4 01			     LDY     current_row
ROM:6550 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6553 85 06			     STA     lsb_row_level_data_addr
ROM:6555 85 08			     STA     byte_8
ROM:6557 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:655A 85 07			     STA     msb_row_level_data_addr
ROM:655C B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:655F 85 09			     STA     byte_9
ROM:6561 A4 00			     LDY     current_col
ROM:6563 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6565 C9 01			     CMP     #1			     ; brick?
ROM:6567 D0 02			     BNE     loc_656B		     ; no, skip
ROM:6569 A9 00			     LDA     #0			     ; space
ROM:656B
ROM:656B	     loc_656B:					     ; CODE XREF: handle_player+AAj
ROM:656B 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:656D E6 01			     INC     current_row	     ; next row
ROM:656F A4 01			     LDY     current_row
ROM:6571 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6574 85 06			     STA     lsb_row_level_data_addr
ROM:6576 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6579 85 07			     STA     msb_row_level_data_addr
ROM:657B A4 00			     LDY     current_col
ROM:657D A9 09			     LDA     #9			     ; player
ROM:657F 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6581 4C 02 6C		     JMP     draw_sprite
ROM:6584	     ; ---------------------------------------------------------------------------
ROM:6584
ROM:6584	     check_falling_sound:			     ; CODE XREF: handle_player:cant_fallj
ROM:6584 A5 9B			     LDA     byte_9B
ROM:6586 D0 07			     BNE     check_controls
ROM:6588 A9 64			     LDA     #$64 ; 'd'
ROM:658A A2 08			     LDX     #8
ROM:658C 20 BA 87		     JSR     play_falling_sound
ROM:658F
ROM:658F	     check_controls:				     ; CODE XREF: handle_player+C9j
ROM:658F A9 20			     LDA     #$20 ; ' '
ROM:6591 85 A4			     STA     byte_A4
ROM:6593 85 9B			     STA     byte_9B
ROM:6595 20 12 6A		     JSR     read_controls
ROM:6598 A5 9E			     LDA     key_1
ROM:659A C9 C9			     CMP     #$C9 ; 'É'              ; 'I'?
ROM:659C D0 06			     BNE     check_down_key	     ; no, skip
ROM:659E 20 BD 66		     JSR     move_up
ROM:65A1 B0 1F			     BCS     check_left_key
ROM:65A3 60			     RTS
ROM:65A4	     ; ---------------------------------------------------------------------------
ROM:65A4
ROM:65A4	     check_down_key:				     ; CODE XREF: handle_player+DFj
ROM:65A4 C9 CB			     CMP     #$CB ; 'Ë'              ; 'K'?
ROM:65A6 D0 06			     BNE     check_dig_left_key	     ; no, skip
ROM:65A8 20 66 67		     JSR     move_down
ROM:65AB B0 15			     BCS     check_left_key
ROM:65AD 60			     RTS
ROM:65AE	     ; ---------------------------------------------------------------------------
ROM:65AE
ROM:65AE	     check_dig_left_key:			     ; CODE XREF: handle_player+E9j
ROM:65AE C9 D5			     CMP     #$D5 ; 'Õ'              ; 'U'?
ROM:65B0 D0 06			     BNE     check_dig_right_key     ; no, skip
ROM:65B2 20 DB 67		     JSR     dig_left
ROM:65B5 B0 0B			     BCS     check_left_key
ROM:65B7 60			     RTS
ROM:65B8	     ; ---------------------------------------------------------------------------
ROM:65B8
ROM:65B8	     check_dig_right_key:			     ; CODE XREF: handle_player+F3j
ROM:65B8 C9 CF			     CMP     #$CF ; 'Ï'              ; 'O'?
ROM:65BA D0 06			     BNE     check_left_key	     ; no, skip
ROM:65BC 20 A1 68		     JSR     dig_right
ROM:65BF B0 01			     BCS     check_left_key
ROM:65C1 60			     RTS
ROM:65C2	     ; ---------------------------------------------------------------------------
ROM:65C2
ROM:65C2	     check_left_key:				     ; CODE XREF: handle_player+E4j
ROM:65C2							     ; handle_player+EEj ...
ROM:65C2 A5 9F			     LDA     key_2
ROM:65C4 C9 CA			     CMP     #$CA ; 'Ê'              ; 'J'?
ROM:65C6 D0 03			     BNE     check_right_key	     ; no, skip
ROM:65C8 4C D3 65		     JMP     move_left
ROM:65CB	     ; ---------------------------------------------------------------------------
ROM:65CB
ROM:65CB	     check_right_key:				     ; CODE XREF: handle_player+109j
ROM:65CB C9 CC			     CMP     #$CC ; 'Ì'              ; 'L'?
ROM:65CD D0 03			     BNE     no_keys		     ; no, skip
ROM:65CF 4C 45 66		     JMP     move_right
ROM:65D2	     ; ---------------------------------------------------------------------------
ROM:65D2
ROM:65D2	     no_keys:					     ; CODE XREF: handle_player+110j
ROM:65D2 60			     RTS
ROM:65D3	     ; ---------------------------------------------------------------------------
ROM:65D3
ROM:65D3	     move_left:					     ; CODE XREF: handle_player+10Bj
ROM:65D3 A4 01			     LDY     current_row
ROM:65D5 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:65D8 85 06			     STA     lsb_row_level_data_addr
ROM:65DA 85 08			     STA     byte_8
ROM:65DC B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:65DF 85 07			     STA     msb_row_level_data_addr
ROM:65E1 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:65E4 85 09			     STA     byte_9		     ; setup tilemap and video addresses
ROM:65E6 A6 02			     LDX     x_offset_within_tile
ROM:65E8 E0 03			     CPX     #3
ROM:65EA B0 14			     BCS     can_move_left
ROM:65EC A4 00			     LDY     current_col
ROM:65EE F0 0F			     BEQ     locret_65FF	     ; left-most column? yes, exit
ROM:65F0 88			     DEY			     ; previous	column
ROM:65F1 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:65F3 C9 02			     CMP     #2			     ; solid?
ROM:65F5 F0 08			     BEQ     locret_65FF	     ; yes, exit
ROM:65F7 C9 01			     CMP     #1			     ; brick?
ROM:65F9 F0 04			     BEQ     locret_65FF	     ; yes, exit
ROM:65FB C9 05			     CMP     #5			     ; fall-thru?
ROM:65FD D0 01			     BNE     can_move_left	     ; no, continue
ROM:65FF
ROM:65FF	     locret_65FF:				     ; CODE XREF: handle_player+131j
ROM:65FF							     ; handle_player+138j ...
ROM:65FF 60			     RTS
ROM:6600	     ; ---------------------------------------------------------------------------
ROM:6600
ROM:6600	     can_move_left:				     ; CODE XREF: handle_player+12Dj
ROM:6600							     ; handle_player+140j
ROM:6600 20 85 6B		     JSR     calc_char_and_addr
ROM:6603 20 36 83		     JSR     wipe_char
ROM:6606 A9 FF			     LDA     #-1		     ; set direction=left
ROM:6608 85 05			     STA     dir
ROM:660A 20 26 6C		     JSR     adjust_y_offset_within_tile
ROM:660D C6 02			     DEC     x_offset_within_tile
ROM:660F 10 19			     BPL     loc_662A		     ; new tile? no, skip
ROM:6611 A4 00			     LDY     current_col
ROM:6613 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6615 C9 01			     CMP     #1			     ; brick?
ROM:6617 D0 02			     BNE     loc_661B		     ; no, skip
ROM:6619 A9 00			     LDA     #0			     ; space
ROM:661B
ROM:661B	     loc_661B:					     ; CODE XREF: handle_player+15Aj
ROM:661B 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:661D C6 00			     DEC     current_col	     ; adjust current col
ROM:661F 88			     DEY
ROM:6620 A9 09			     LDA     #9			     ; player
ROM:6622 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6624 A9 04			     LDA     #4
ROM:6626 85 02			     STA     x_offset_within_tile
ROM:6628 D0 03			     BNE     loc_662D		     ; always
ROM:662A
ROM:662A	     loc_662A:					     ; CODE XREF: handle_player+152j
ROM:662A 20 9D 6B		     JSR     check_for_gold
ROM:662D
ROM:662D	     loc_662D:					     ; CODE XREF: handle_player+16Bj
ROM:662D A4 00			     LDY     current_col
ROM:662F B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6631 C9 04			     CMP     #4			     ; rope?
ROM:6633 F0 06			     BEQ     loc_663B		     ; yes, go
ROM:6635 A9 00			     LDA     #0			     ; 1st sprite index	(runner	left)
ROM:6637 A2 02			     LDX     #2			     ; last sprite index (runner left)
ROM:6639 D0 04			     BNE     loc_663F		     ; always
ROM:663B
ROM:663B	     loc_663B:					     ; CODE XREF: handle_player+176j
ROM:663B A9 03			     LDA     #3			     ; 1st sprite index	(swinger left)
ROM:663D A2 05			     LDX     #5			     ; last sprite index (swinger left)
ROM:663F
ROM:663F	     loc_663F:					     ; CODE XREF: handle_player+17Cj
ROM:663F 20 F4 6B		     JSR     update_sprite_index
ROM:6642 4C 02 6C		     JMP     draw_sprite
ROM:6645	     ; ---------------------------------------------------------------------------
ROM:6645
ROM:6645	     move_right:				     ; CODE XREF: handle_player+112j
ROM:6645 A4 01			     LDY     current_row	     ; current row
ROM:6647 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:664A 85 06			     STA     lsb_row_level_data_addr
ROM:664C 85 08			     STA     byte_8
ROM:664E B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6651 85 07			     STA     msb_row_level_data_addr
ROM:6653 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6656 85 09			     STA     byte_9		     ; setup tilemap & video addresses
ROM:6658 A6 02			     LDX     x_offset_within_tile
ROM:665A E0 02			     CPX     #2			     ; offset into tile????
ROM:665C 90 16			     BCC     can_move_right
ROM:665E A4 00			     LDY     current_col	     ; current_col
ROM:6660 C0 1B			     CPY     #27		     ; right-most?
ROM:6662 F0 0F			     BEQ     locret_6673	     ; yes, exit
ROM:6664 C8			     INY			     ; next column (right)
ROM:6665 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get tile data
ROM:6667 C9 02			     CMP     #2			     ; solid?
ROM:6669 F0 08			     BEQ     locret_6673	     ; yes, exit
ROM:666B C9 01			     CMP     #1			     ; brick?
ROM:666D F0 04			     BEQ     locret_6673	     ; yes, exit
ROM:666F C9 05			     CMP     #5			     ; fall-thru?
ROM:6671 D0 01			     BNE     can_move_right	     ; no, continue
ROM:6673
ROM:6673	     locret_6673:				     ; CODE XREF: handle_player+1A5j
ROM:6673							     ; handle_player+1ACj ...
ROM:6673 60			     RTS
ROM:6674	     ; ---------------------------------------------------------------------------
ROM:6674
ROM:6674	     can_move_right:				     ; CODE XREF: handle_player+19Fj
ROM:6674							     ; handle_player+1B4j
ROM:6674 20 85 6B		     JSR     calc_char_and_addr
ROM:6677 20 36 83		     JSR     wipe_char
ROM:667A A9 01			     LDA     #1			     ; set direction right
ROM:667C 85 05			     STA     dir
ROM:667E 20 26 6C		     JSR     adjust_y_offset_within_tile
ROM:6681 E6 02			     INC     x_offset_within_tile
ROM:6683 A5 02			     LDA     x_offset_within_tile
ROM:6685 C9 05			     CMP     #5
ROM:6687 90 19			     BCC     loc_66A2
ROM:6689 A4 00			     LDY     current_col	     ; current col
ROM:668B B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:668D C9 01			     CMP     #1			     ; brick?
ROM:668F D0 02			     BNE     loc_6693		     ; no, skip
ROM:6691 A9 00			     LDA     #0			     ; space
ROM:6693
ROM:6693	     loc_6693:					     ; CODE XREF: handle_player+1D2j
ROM:6693 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6695 E6 00			     INC     current_col	     ; next tile
ROM:6697 C8			     INY
ROM:6698 A9 09			     LDA     #9			     ; player
ROM:669A 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:669C A9 00			     LDA     #0
ROM:669E 85 02			     STA     x_offset_within_tile
ROM:66A0 F0 03			     BEQ     loc_66A5
ROM:66A2
ROM:66A2	     loc_66A2:					     ; CODE XREF: handle_player+1CAj
ROM:66A2 20 9D 6B		     JSR     check_for_gold
ROM:66A5
ROM:66A5	     loc_66A5:					     ; CODE XREF: handle_player+1E3j
ROM:66A5 A4 00			     LDY     current_col	     ; current col
ROM:66A7 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:66A9 C9 04			     CMP     #4			     ; rope?
ROM:66AB F0 06			     BEQ     loc_66B3		     ; yes, go
ROM:66AD A9 08			     LDA     #8			     ; 1st sprite index	(runner	right)
ROM:66AF A2 0A			     LDX     #$A		     ; last sprite index (runner right)
ROM:66B1 D0 04			     BNE     loc_66B7
ROM:66B3
ROM:66B3	     loc_66B3:					     ; CODE XREF: handle_player+1EEj
ROM:66B3 A9 0B			     LDA     #$B		     ; 1st sprite index	(swinger right)
ROM:66B5 A2 0D			     LDX     #$D		     ; last sprite index (swinger right)
ROM:66B7
ROM:66B7	     loc_66B7:					     ; CODE XREF: handle_player+1F4j
ROM:66B7 20 F4 6B		     JSR     update_sprite_index
ROM:66BA 4C 02 6C		     JMP     draw_sprite
ROM:66BA	     ; End of function handle_player
ROM:66BA
ROM:66BD
ROM:66BD	     ; =============== S U B R O U T I N E =======================================
ROM:66BD
ROM:66BD
ROM:66BD	     move_up:					     ; CODE XREF: handle_player+E1p
ROM:66BD A4 01			     LDY     current_row
ROM:66BF B9 05 1C		     LDA     lsb_row_addr,Y
ROM:66C2 85 08			     STA     byte_8
ROM:66C4 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:66C7 85 09			     STA     byte_9
ROM:66C9 A4 00			     LDY     current_col	     ; setup tilemap & video addresses
ROM:66CB B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:66CD C9 03			     CMP     #3			     ; ladder?
ROM:66CF F0 1C			     BEQ     check_move_up	     ; yes, go
ROM:66D1 A4 03			     LDY     y_offset_within_tile
ROM:66D3 C0 03			     CPY     #3			     ; <3?
ROM:66D5 90 14			     BCC     cant_move_up	     ; yes, exit
ROM:66D7 A4 01			     LDY     current_row
ROM:66D9 B9 06 1C		     LDA     lsb_row_addr+1,Y	     ; row below???
ROM:66DC 85 08			     STA     byte_8
ROM:66DE B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:66E1 85 09			     STA     byte_9
ROM:66E3 A4 00			     LDY     current_col	     ; setup tilemap & video addresses
ROM:66E5 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:66E7 C9 03			     CMP     #3			     ; ladder?
ROM:66E9 F0 26			     BEQ     can_move_up	     ; yes, go
ROM:66EB
ROM:66EB	     cant_move_up:				     ; CODE XREF: move_up+18j
ROM:66EB							     ; move_up+38j ...
ROM:66EB 38			     SEC			     ; flag unable to move
ROM:66EC 60			     RTS
ROM:66ED	     ; ---------------------------------------------------------------------------
ROM:66ED
ROM:66ED	     check_move_up:				     ; CODE XREF: move_up+12j
ROM:66ED A4 03			     LDY     y_offset_within_tile
ROM:66EF C0 03			     CPY     #3			     ; >=3?
ROM:66F1 B0 1E			     BCS     can_move_up	     ; yes, skip
ROM:66F3 A4 01			     LDY     current_row
ROM:66F5 F0 F4			     BEQ     cant_move_up	     ; top row?	yes, exit
ROM:66F7 B9 04 1C		     LDA     $1C04,Y		     ; lsb_row_address-1
ROM:66FA 85 06			     STA     lsb_row_level_data_addr
ROM:66FC B9 14 1C		     LDA     $1C14,Y		     ; msb_row_addr-1
ROM:66FF 85 07			     STA     msb_row_level_data_addr ; adjust tilemap address to row above
ROM:6701 A4 00			     LDY     current_col
ROM:6703 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (above)
ROM:6705 C9 01			     CMP     #1			     ; brick?
ROM:6707 F0 E2			     BEQ     cant_move_up	     ; yes, exit
ROM:6709 C9 02			     CMP     #2			     ; solid?
ROM:670B F0 DE			     BEQ     cant_move_up	     ; yes, exit
ROM:670D C9 05			     CMP     #5			     ; fall-thru?
ROM:670F F0 DA			     BEQ     cant_move_up	     ; yes, exit
ROM:6711
ROM:6711	     can_move_up:				     ; CODE XREF: move_up+2Cj
ROM:6711							     ; move_up+34j
ROM:6711 20 85 6B		     JSR     calc_char_and_addr
ROM:6714 20 36 83		     JSR     wipe_char
ROM:6717 A4 01			     LDY     current_row
ROM:6719 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:671C 85 06			     STA     lsb_row_level_data_addr
ROM:671E 85 08			     STA     byte_8
ROM:6720 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6723 85 07			     STA     msb_row_level_data_addr
ROM:6725 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6728 85 09			     STA     byte_9		     ; setup tilemap & video addresses
ROM:672A 20 13 6C		     JSR     adjust_x_offset_in_tile
ROM:672D C6 03			     DEC     y_offset_within_tile
ROM:672F 10 26			     BPL     climber_check_for_gold  ; change tiles? no, skip
ROM:6731 A4 00			     LDY     current_col
ROM:6733 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6735 C9 01			     CMP     #1			     ; brick?
ROM:6737 D0 02			     BNE     loc_673B		     ; no, skip
ROM:6739 A9 00			     LDA     #0			     ; space
ROM:673B
ROM:673B	     loc_673B:					     ; CODE XREF: move_up+7Aj
ROM:673B 91 06			     STA     (lsb_row_level_data_addr),Y ; adjust tilemap
ROM:673D C6 01			     DEC     current_row	     ; row above
ROM:673F A4 01			     LDY     current_row
ROM:6741 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6744 85 06			     STA     lsb_row_level_data_addr
ROM:6746 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6749 85 07			     STA     msb_row_level_data_addr ; adjust video & tilemap addresses
ROM:674B A4 00			     LDY     current_col
ROM:674D A9 09			     LDA     #9			     ; player
ROM:674F 91 06			     STA     (lsb_row_level_data_addr),Y ; set tilemap object
ROM:6751 A9 04			     LDA     #4
ROM:6753 85 03			     STA     y_offset_within_tile
ROM:6755 D0 03			     BNE     update_climber_sprite   ; always
ROM:6757
ROM:6757	     climber_check_for_gold:			     ; CODE XREF: move_up+72j
ROM:6757							     ; move_down:loc_67D5j
ROM:6757 20 9D 6B		     JSR     check_for_gold
ROM:675A
ROM:675A	     update_climber_sprite:			     ; CODE XREF: move_up+98j
ROM:675A							     ; move_down+6Cj
ROM:675A A9 10			     LDA     #$10		     ; 1st sprite index	(climber)
ROM:675C A2 11			     LDX     #$11		     ; last sprite index (climber)
ROM:675E 20 F4 6B		     JSR     update_sprite_index
ROM:6761 20 02 6C		     JSR     draw_sprite
ROM:6764 18			     CLC
ROM:6765 60			     RTS
ROM:6765	     ; End of function move_up
ROM:6765
ROM:6766
ROM:6766	     ; =============== S U B R O U T I N E =======================================
ROM:6766
ROM:6766
ROM:6766	     move_down:					     ; CODE XREF: handle_player+EBp
ROM:6766 A4 03			     LDY     y_offset_within_tile
ROM:6768 C0 02			     CPY     #2
ROM:676A 90 1E			     BCC     can_move_down
ROM:676C A4 01			     LDY     current_row
ROM:676E C0 0F			     CPY     #15		     ; bottom row?
ROM:6770 B0 16			     BCS     cant_move_down	     ; yes, exit
ROM:6772 B9 06 1C		     LDA     lsb_row_addr+1,Y	     ; row below
ROM:6775 85 06			     STA     lsb_row_level_data_addr
ROM:6777 B9 16 1C		     LDA     msb_row_addr_1+1,Y
ROM:677A 85 07			     STA     msb_row_level_data_addr ; adjust tilemap &	video addresses	for row	below
ROM:677C A4 00			     LDY     current_col
ROM:677E B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:6780 C9 02			     CMP     #2			     ; solid?
ROM:6782 F0 04			     BEQ     cant_move_down	     ; yes, exit
ROM:6784 C9 01			     CMP     #1			     ; brick?
ROM:6786 D0 02			     BNE     can_move_down	     ; no, go
ROM:6788
ROM:6788	     cant_move_down:				     ; CODE XREF: move_down+Aj
ROM:6788							     ; move_down+1Cj
ROM:6788 38			     SEC			     ; flag unable to move
ROM:6789 60			     RTS
ROM:678A	     ; ---------------------------------------------------------------------------
ROM:678A
ROM:678A	     can_move_down:				     ; CODE XREF: move_down+4j
ROM:678A							     ; move_down+20j
ROM:678A 20 85 6B		     JSR     calc_char_and_addr
ROM:678D 20 36 83		     JSR     wipe_char
ROM:6790 A4 01			     LDY     current_row
ROM:6792 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6795 85 06			     STA     lsb_row_level_data_addr
ROM:6797 85 08			     STA     byte_8
ROM:6799 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:679C 85 07			     STA     msb_row_level_data_addr
ROM:679E B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:67A1 85 09			     STA     byte_9
ROM:67A3 20 13 6C		     JSR     adjust_x_offset_in_tile
ROM:67A6 E6 03			     INC     y_offset_within_tile
ROM:67A8 A5 03			     LDA     y_offset_within_tile
ROM:67AA C9 05			     CMP     #5			     ; <5?
ROM:67AC 90 27			     BCC     loc_67D5		     ; yes, skip
ROM:67AE A4 00			     LDY     current_col
ROM:67B0 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:67B2 C9 01			     CMP     #1			     ; brick?
ROM:67B4 D0 02			     BNE     loc_67B8		     ; no, skip
ROM:67B6 A9 00			     LDA     #0			     ; space
ROM:67B8
ROM:67B8	     loc_67B8:					     ; CODE XREF: move_down+4Ej
ROM:67B8 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:67BA E6 01			     INC     current_row	     ; row below
ROM:67BC A4 01			     LDY     current_row
ROM:67BE B9 05 1C		     LDA     lsb_row_addr,Y
ROM:67C1 85 06			     STA     lsb_row_level_data_addr
ROM:67C3 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:67C6 85 07			     STA     msb_row_level_data_addr ; update tilemap &	video addresses
ROM:67C8 A4 00			     LDY     current_col
ROM:67CA A9 09			     LDA     #9			     ; player
ROM:67CC 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:67CE A9 00			     LDA     #0
ROM:67D0 85 03			     STA     y_offset_within_tile
ROM:67D2 4C 5A 67		     JMP     update_climber_sprite
ROM:67D5	     ; ---------------------------------------------------------------------------
ROM:67D5
ROM:67D5	     loc_67D5:					     ; CODE XREF: move_down+46j
ROM:67D5 4C 57 67		     JMP     climber_check_for_gold
ROM:67D5	     ; End of function move_down
ROM:67D5
ROM:67D8	     ; ---------------------------------------------------------------------------
ROM:67D8	     ; START OF	FUNCTION CHUNK FOR dig_left
ROM:67D8
ROM:67D8	     cant_dig_left:				     ; CODE XREF: dig_left+10j
ROM:67D8							     ; dig_left+18j ...
ROM:67D8 4C 92 68		     JMP     finish_dig_left
ROM:67D8	     ; END OF FUNCTION CHUNK FOR dig_left
ROM:67DB
ROM:67DB	     ; =============== S U B R O U T I N E =======================================
ROM:67DB
ROM:67DB
ROM:67DB	     dig_left:					     ; CODE XREF: handle_player+F5p
ROM:67DB
ROM:67DB	     ; FUNCTION	CHUNK AT ROM:67D8 SIZE 00000003	BYTES
ROM:67DB	     ; FUNCTION	CHUNK AT ROM:6C39 SIZE 00000049	BYTES
ROM:67DB
ROM:67DB A9 FF			     LDA     #$FF
ROM:67DD 85 9C			     STA     dig_dir
ROM:67DF 85 9E			     STA     key_1
ROM:67E1 85 9F			     STA     key_2
ROM:67E3 A9 00			     LDA     #0
ROM:67E5 85 A0			     STA     dig_sprite
ROM:67E7
ROM:67E7	     digging_left:				     ; CODE XREF: handle_player+Aj
ROM:67E7 A4 01			     LDY     current_row
ROM:67E9 C0 0F			     CPY     #15		     ; bottom row?
ROM:67EB B0 EB			     BCS     cant_dig_left	     ; yes, exit
ROM:67ED C8			     INY			     ; look at row below
ROM:67EE 20 4B 88		     JSR     set_row_addr_1_2
ROM:67F1 A4 00			     LDY     current_col
ROM:67F3 F0 E3			     BEQ     cant_dig_left	     ; left edge? yes, exit
ROM:67F5 88			     DEY
ROM:67F6 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (down,left)
ROM:67F8 C9 01			     CMP     #1			     ; brick?
ROM:67FA D0 DC			     BNE     cant_dig_left	     ; no, exit
ROM:67FC A4 01			     LDY     current_row
ROM:67FE 20 4B 88		     JSR     set_row_addr_1_2
ROM:6801 A4 00			     LDY     current_col
ROM:6803 88			     DEY
ROM:6804 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (left)
ROM:6806 C9 00			     CMP     #0			     ; space?
ROM:6808 D0 64			     BNE     abort_dig_left	     ; no, go
ROM:680A 20 85 6B		     JSR     calc_char_and_addr
ROM:680D 20 36 83		     JSR     wipe_char
ROM:6810 20 13 6C		     JSR     adjust_x_offset_in_tile
ROM:6813 20 26 6C		     JSR     adjust_y_offset_within_tile
ROM:6816 A4 A0			     LDY     dig_sprite
ROM:6818 B9 9E 69		     LDA     byte_699E,Y	     ; $20?
ROM:681B BE AB 69		     LDX     byte_69AB,Y	     ; $04?
ROM:681E 20 D5 87		     JSR     sub_87D5
ROM:6821 A6 A0			     LDX     dig_sprite
ROM:6823 A9 00			     LDA     #0			     ; sprite=0, tile=$B (running left)
ROM:6825 E0 06			     CPX     #6
ROM:6827 B0 02			     BCS     loc_682B
ROM:6829 A9 06			     LDA     #6			     ; sprite=6, tile=$F (starting to dig left)
ROM:682B
ROM:682B	     loc_682B:					     ; CODE XREF: dig_left+4Cj
ROM:682B 85 04			     STA     sprite_index
ROM:682D 20 02 6C		     JSR     draw_sprite
ROM:6830 A6 A0			     LDX     dig_sprite
ROM:6832 E0 0C			     CPX     #$C
ROM:6834 F0 62			     BEQ     loc_6898
ROM:6836 E0 00			     CPX     #0
ROM:6838 F0 12			     BEQ     loc_684C
ROM:683A BD 79 69		     LDA     unk_6979,X
ROM:683D 48			     PHA
ROM:683E A6 00			     LDX     current_col
ROM:6840 CA			     DEX
ROM:6841 A4 01			     LDY     current_row
ROM:6843 20 5D 88		     JSR     calc_colx5_scanline
ROM:6846 68			     PLA
ROM:6847 20 36 83		     JSR     wipe_char
ROM:684A A6 A0			     LDX     dig_sprite
ROM:684C
ROM:684C	     loc_684C:					     ; CODE XREF: dig_left+5Dj
ROM:684C BD 7A 69		     LDA     unk_697A,X
ROM:684F 48			     PHA
ROM:6850 A6 00			     LDX     current_col
ROM:6852 CA			     DEX
ROM:6853 86 85			     STX     col
ROM:6855 A4 01			     LDY     current_row
ROM:6857 84 86			     STY     row
ROM:6859 20 5D 88		     JSR     calc_colx5_scanline
ROM:685C 68			     PLA
ROM:685D 20 A7 83		     JSR     display_transparent_char
ROM:6860 A6 A0			     LDX     dig_sprite
ROM:6862 BD 92 69		     LDA     unk_6992,X
ROM:6865 E6 86			     INC     row
ROM:6867 20 AA 82		     JSR     display_char_pg1
ROM:686A E6 A0			     INC     dig_sprite
ROM:686C 18			     CLC
ROM:686D 60			     RTS
ROM:686E	     ; ---------------------------------------------------------------------------
ROM:686E
ROM:686E	     abort_dig_left:				     ; CODE XREF: dig_left+2Dj
ROM:686E A4 01			     LDY     current_row
ROM:6870 C8			     INY
ROM:6871 84 86			     STY     row
ROM:6873 A4 00			     LDY     current_col
ROM:6875 88			     DEY
ROM:6876 84 85			     STY     col
ROM:6878 A9 01			     LDA     #1			     ; diggable	brick
ROM:687A 20 AA 82		     JSR     display_char_pg1
ROM:687D A6 A0			     LDX     dig_sprite
ROM:687F F0 11			     BEQ     finish_dig_left
ROM:6881 CA			     DEX
ROM:6882 BD 7A 69		     LDA     unk_697A,X
ROM:6885 48			     PHA
ROM:6886 A4 01			     LDY     current_row
ROM:6888 A6 00			     LDX     current_col
ROM:688A CA			     DEX
ROM:688B 20 5D 88		     JSR     calc_colx5_scanline
ROM:688E 68			     PLA
ROM:688F 20 36 83		     JSR     wipe_char
ROM:6892
ROM:6892	     finish_dig_left:				     ; CODE XREF: dig_left:cant_dig_leftj
ROM:6892							     ; dig_left+A4j
ROM:6892 A9 00			     LDA     #0
ROM:6894 85 9C			     STA     dig_dir
ROM:6896 38			     SEC
ROM:6897 60			     RTS
ROM:6898	     ; ---------------------------------------------------------------------------
ROM:6898
ROM:6898	     loc_6898:					     ; CODE XREF: dig_left+59j
ROM:6898 A6 00			     LDX     current_col
ROM:689A CA			     DEX
ROM:689B 4C 39 6C		     JMP     add_hole_entry
ROM:689B	     ; End of function dig_left
ROM:689B
ROM:689E	     ; ---------------------------------------------------------------------------
ROM:689E	     ; START OF	FUNCTION CHUNK FOR dig_right
ROM:689E
ROM:689E	     cant_dig_right:				     ; CODE XREF: dig_right+10j
ROM:689E							     ; dig_right+1Aj ...
ROM:689E 4C 5C 69		     JMP     finish_dig_right
ROM:689E	     ; END OF FUNCTION CHUNK FOR dig_right
ROM:68A1
ROM:68A1	     ; =============== S U B R O U T I N E =======================================
ROM:68A1
ROM:68A1
ROM:68A1	     dig_right:					     ; CODE XREF: handle_player+FFp
ROM:68A1
ROM:68A1	     ; FUNCTION	CHUNK AT ROM:689E SIZE 00000003	BYTES
ROM:68A1
ROM:68A1 A9 01			     LDA     #1
ROM:68A3 85 9C			     STA     dig_dir
ROM:68A5 85 9E			     STA     key_1
ROM:68A7 85 9F			     STA     key_2
ROM:68A9 A9 0C			     LDA     #$C
ROM:68AB 85 A0			     STA     dig_sprite
ROM:68AD
ROM:68AD	     digging_right:				     ; CODE XREF: handle_player:loc_64CAj
ROM:68AD A4 01			     LDY     current_row
ROM:68AF C0 0F			     CPY     #15		     ; bottom row?
ROM:68B1 B0 EB			     BCS     cant_dig_right	     ; yes, exit
ROM:68B3 C8			     INY			     ; look at row below
ROM:68B4 20 4B 88		     JSR     set_row_addr_1_2
ROM:68B7 A4 00			     LDY     current_col
ROM:68B9 C0 1B			     CPY     #27		     ; right-most column?
ROM:68BB B0 E1			     BCS     cant_dig_right	     ; yes, exit
ROM:68BD C8			     INY			     ; column to the right
ROM:68BE B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (down,right)
ROM:68C0 C9 01			     CMP     #1			     ; brick?
ROM:68C2 D0 DA			     BNE     cant_dig_right	     ; no, exit
ROM:68C4 A4 01			     LDY     current_row
ROM:68C6 20 4B 88		     JSR     set_row_addr_1_2
ROM:68C9 A4 00			     LDY     current_col
ROM:68CB C8			     INY			     ; next column
ROM:68CC B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (right)
ROM:68CE C9 00			     CMP     #0			     ; space?
ROM:68D0 D0 64			     BNE     abort_dig_right	     ; no, go
ROM:68D2 20 85 6B		     JSR     calc_char_and_addr
ROM:68D5 20 36 83		     JSR     wipe_char
ROM:68D8 20 13 6C		     JSR     adjust_x_offset_in_tile
ROM:68DB 20 26 6C		     JSR     adjust_y_offset_within_tile
ROM:68DE A4 A0			     LDY     dig_sprite
ROM:68E0 B9 92 69		     LDA     unk_6992,Y
ROM:68E3 BE 9F 69		     LDX     byte_699E+1,Y
ROM:68E6 20 D5 87		     JSR     sub_87D5
ROM:68E9 A6 A0			     LDX     dig_sprite
ROM:68EB A9 08			     LDA     #8
ROM:68ED E0 12			     CPX     #$12
ROM:68EF B0 02			     BCS     loc_68F3
ROM:68F1 A9 0E			     LDA     #$E
ROM:68F3
ROM:68F3	     loc_68F3:					     ; CODE XREF: dig_right+4Ej
ROM:68F3 85 04			     STA     sprite_index
ROM:68F5 20 02 6C		     JSR     draw_sprite
ROM:68F8 A6 A0			     LDX     dig_sprite
ROM:68FA E0 18			     CPX     #$18
ROM:68FC F0 64			     BEQ     loc_6962
ROM:68FE E0 0C			     CPX     #$C
ROM:6900 F0 12			     BEQ     loc_6914
ROM:6902 BD 79 69		     LDA     unk_6979,X
ROM:6905 48			     PHA
ROM:6906 A6 00			     LDX     current_col
ROM:6908 E8			     INX
ROM:6909 A4 01			     LDY     current_row
ROM:690B 20 5D 88		     JSR     calc_colx5_scanline
ROM:690E 68			     PLA
ROM:690F 20 36 83		     JSR     wipe_char
ROM:6912 A6 A0			     LDX     dig_sprite
ROM:6914
ROM:6914	     loc_6914:					     ; CODE XREF: dig_right+5Fj
ROM:6914 BD 7A 69		     LDA     unk_697A,X
ROM:6917 48			     PHA
ROM:6918 A6 00			     LDX     current_col
ROM:691A E8			     INX
ROM:691B 86 85			     STX     col
ROM:691D A4 01			     LDY     current_row
ROM:691F 84 86			     STY     row
ROM:6921 20 5D 88		     JSR     calc_colx5_scanline
ROM:6924 68			     PLA
ROM:6925 20 A7 83		     JSR     display_transparent_char
ROM:6928 E6 86			     INC     row
ROM:692A A6 A0			     LDX     dig_sprite
ROM:692C BD 86 69		     LDA     unk_6986,X
ROM:692F 20 AA 82		     JSR     display_char_pg1
ROM:6932 E6 A0			     INC     dig_sprite
ROM:6934 18			     CLC
ROM:6935 60			     RTS
ROM:6936	     ; ---------------------------------------------------------------------------
ROM:6936
ROM:6936	     abort_dig_right:				     ; CODE XREF: dig_right+2Fj
ROM:6936 A4 01			     LDY     current_row
ROM:6938 C8			     INY
ROM:6939 84 86			     STY     row
ROM:693B A4 00			     LDY     current_col
ROM:693D C8			     INY
ROM:693E 84 85			     STY     col
ROM:6940 A9 01			     LDA     #1			     ; diggable	brick
ROM:6942 20 AA 82		     JSR     display_char_pg1
ROM:6945 A6 A0			     LDX     dig_sprite
ROM:6947 E0 0C			     CPX     #$C
ROM:6949 F0 11			     BEQ     finish_dig_right
ROM:694B CA			     DEX
ROM:694C BD 7A 69		     LDA     unk_697A,X
ROM:694F 48			     PHA
ROM:6950 A6 00			     LDX     current_col
ROM:6952 E8			     INX
ROM:6953 A4 01			     LDY     current_row
ROM:6955 20 5D 88		     JSR     calc_colx5_scanline
ROM:6958 68			     PLA
ROM:6959 20 36 83		     JSR     wipe_char
ROM:695C
ROM:695C	     finish_dig_right:				     ; CODE XREF: dig_right:cant_dig_rightj
ROM:695C							     ; dig_right+A8j
ROM:695C A9 00			     LDA     #0
ROM:695E 85 9C			     STA     dig_dir
ROM:6960 38			     SEC
ROM:6961 60			     RTS
ROM:6962	     ; ---------------------------------------------------------------------------
ROM:6962
ROM:6962	     loc_6962:					     ; CODE XREF: dig_right+5Bj
ROM:6962 A6 00			     LDX     current_col
ROM:6964 E8			     INX
ROM:6965 4C 39 6C		     JMP     add_hole_entry
ROM:6965	     ; End of function dig_right
ROM:6965
ROM:6965	     ; ---------------------------------------------------------------------------
ROM:6968 0B	     sprite_to_char_tbl:.BYTE  $B		     ; DATA XREF: calc_char_and_addr+12r
ROM:6969 0C			     .BYTE  $C
ROM:696A 0D			     .BYTE  $D
ROM:696B 18			     .BYTE $18
ROM:696C 19			     .BYTE $19
ROM:696D 1A			     .BYTE $1A
ROM:696E 0F			     .BYTE  $F
ROM:696F 13			     .BYTE $13
ROM:6970 09			     .BYTE   9
ROM:6971 10			     .BYTE $10
ROM:6972 11			     .BYTE $11
ROM:6973 15			     .BYTE $15
ROM:6974 16			     .BYTE $16
ROM:6975 17			     .BYTE $17
ROM:6976 25			     .BYTE $25 ; %
ROM:6977 14			     .BYTE $14
ROM:6978 0E			     .BYTE  $E
ROM:6979 12	     unk_6979:	     .BYTE $12			     ; DATA XREF: dig_left+5Fr
ROM:6979							     ; dig_right+61r
ROM:697A 1B	     unk_697A:	     .BYTE $1B			     ; DATA XREF: dig_left:loc_684Cr
ROM:697A							     ; dig_left+A7r ...
ROM:697B 1B			     .BYTE $1B
ROM:697C 1C			     .BYTE $1C
ROM:697D 1C			     .BYTE $1C
ROM:697E 1D			     .BYTE $1D
ROM:697F 1D			     .BYTE $1D
ROM:6980 1E			     .BYTE $1E
ROM:6981 1E			     .BYTE $1E
ROM:6982 00			     .BYTE   0
ROM:6983 00			     .BYTE   0
ROM:6984 00			     .BYTE   0
ROM:6985 00			     .BYTE   0
ROM:6986 26	     unk_6986:	     .BYTE $26 ; &		     ; DATA XREF: dig_right+8Br
ROM:6987 26			     .BYTE $26 ; &
ROM:6988 27			     .BYTE $27 ; '
ROM:6989 27			     .BYTE $27 ; '
ROM:698A 1D			     .BYTE $1D
ROM:698B 1D			     .BYTE $1D
ROM:698C 1E			     .BYTE $1E
ROM:698D 1E			     .BYTE $1E
ROM:698E 00			     .BYTE   0
ROM:698F 00			     .BYTE   0
ROM:6990 00			     .BYTE   0
ROM:6991 00			     .BYTE   0
ROM:6992 1F	     unk_6992:	     .BYTE $1F			     ; DATA XREF: dig_left+87r
ROM:6992							     ; dig_right+3Fr
ROM:6993 1F			     .BYTE $1F
ROM:6994 20			     .BYTE $20
ROM:6995 20			     .BYTE $20
ROM:6996 21			     .BYTE $21 ; !
ROM:6997 21			     .BYTE $21 ; !
ROM:6998 22			     .BYTE $22 ; "
ROM:6999 22			     .BYTE $22 ; "
ROM:699A 23			     .BYTE $23 ; #
ROM:699B 23			     .BYTE $23 ; #
ROM:699C 24			     .BYTE $24 ; $
ROM:699D 24			     .BYTE $24 ; $
ROM:699E 20 20 20 20+byte_699E:	     .BYTE $20,	$20, $20, $20, $20, $20, $20, $20, $24,	$24, $24, $24
ROM:699E 20 20 20 20+						     ; DATA XREF: dig_left+3Dr
ROM:699E 24 24 24 24+						     ; dig_right+42r
ROM:699E 24			     .BYTE $24
ROM:69AB 04 04 04 04+byte_69AB:	     .BYTE 4, 4, 4, 4, 4, 4, 4,	4, 3, 3, 2, 2, 1
ROM:69AB 04 04 04 04+						     ; DATA XREF: dig_left+40r
ROM:69B8	     ; ---------------------------------------------------------------------------
ROM:69B8	     ; START OF	FUNCTION CHUNK FOR read_controls
ROM:69B8
ROM:69B8	     handle_attract_mode:			     ; CODE XREF: read_controls+4j
ROM:69B8 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:69BB 30 10			     BMI     exit_demo		     ; key pressed, go
ROM:69BD A5 95			     LDA     paddles_detected
ROM:69BF C9 CB			     CMP     #$CB ; 'Ë'
ROM:69C1 F0 13			     BEQ     next_demo_inp
ROM:69C3 AD 62 C0		     LDA     $C062		     ; closed apple key	read
ROM:69C6 30 05			     BMI     exit_demo		     ; pressed,	go
ROM:69C8 AD 61 C0		     LDA     $C061		     ; open apple key read
ROM:69CB 10 09			     BPL     next_demo_inp	     ; not pressed, go
ROM:69CD
ROM:69CD	     exit_demo:					     ; CODE XREF: read_controls-57j
ROM:69CD							     ; read_controls-4Cj
ROM:69CD 46 AC			     LSR     byte_AC
ROM:69CF 46 9A			     LSR     level_active
ROM:69D1 A9 01			     LDA     #1
ROM:69D3 85 98			     STA     no_lives
ROM:69D5 60			     RTS
ROM:69D6	     ; ---------------------------------------------------------------------------
ROM:69D6
ROM:69D6	     next_demo_inp:				     ; CODE XREF: read_controls-51j
ROM:69D6							     ; read_controls-47j
ROM:69D6 A5 AB			     LDA     demo_inp_cnt	     ; counter=0?
ROM:69D8 D0 18			     BNE     loc_69F2		     ; no, skip
ROM:69DA A0 00			     LDY     #0
ROM:69DC B1 A8			     LDA     (lsb_demo_inp_ptr),Y    ; demo mode input
ROM:69DE 85 AA			     STA     demo_inp_key_1_2	     ; get 1st byte
ROM:69E0 C8			     INY
ROM:69E1 B1 A8			     LDA     (lsb_demo_inp_ptr),Y    ; get 2nd byte
ROM:69E3 85 AB			     STA     demo_inp_cnt
ROM:69E5 A5 A8			     LDA     lsb_demo_inp_ptr	     ; get ptr
ROM:69E7 18			     CLC
ROM:69E8 69 02			     ADC     #2			     ; ptr += 2
ROM:69EA 85 A8			     STA     lsb_demo_inp_ptr	     ; update LSB
ROM:69EC A5 A9			     LDA     msb_demo_inp_ptr
ROM:69EE 69 00			     ADC     #0
ROM:69F0 85 A9			     STA     msb_demo_inp_ptr	     ; update MSB
ROM:69F2
ROM:69F2	     loc_69F2:					     ; CODE XREF: read_controls-3Aj
ROM:69F2 A5 AA			     LDA     demo_inp_key_1_2	     ; 1st byte
ROM:69F4 29 0F			     AND     #$F		     ; low nibble
ROM:69F6 AA			     TAX
ROM:69F7 BD 0B 6A		     LDA     demo_inp_remap_tbl,X    ; get equivalent keycode
ROM:69FA 85 9E			     STA     key_1		     ; store in	key input buffer
ROM:69FC A5 AA			     LDA     demo_inp_key_1_2	     ; 1st byte
ROM:69FE 4A			     LSR     A
ROM:69FF 4A			     LSR     A
ROM:6A00 4A			     LSR     A
ROM:6A01 4A			     LSR     A			     ; high nibble
ROM:6A02 AA			     TAX
ROM:6A03 BD 0B 6A		     LDA     demo_inp_remap_tbl,X    ; get equivalent keycode
ROM:6A06 85 9F			     STA     key_2		     ; store in	key input buffer
ROM:6A08 C6 AB			     DEC     demo_inp_cnt	     ; sec counter
ROM:6A0A 60			     RTS
ROM:6A0A	     ; END OF FUNCTION CHUNK FOR read_controls
ROM:6A0A	     ; ---------------------------------------------------------------------------
ROM:6A0B C9 CA CB CC+demo_inp_remap_tbl:.BYTE $C9, $CA,	$CB, $CC, $CF, $D5, $A0
ROM:6A0B CF D5 A0						     ; DATA XREF: read_controls-1Br
ROM:6A0B							     ; read_controls-Fr
ROM:6A0B							     ; I,J,K,L,O,U,<SPACE>
ROM:6A12
ROM:6A12	     ; =============== S U B R O U T I N E =======================================
ROM:6A12
ROM:6A12
ROM:6A12	     read_controls:				     ; CODE XREF: handle_player+D8p
ROM:6A12							     ; read_controls+5Aj ...
ROM:6A12
ROM:6A12	     ; FUNCTION	CHUNK AT ROM:69B8 SIZE 00000053	BYTES
ROM:6A12
ROM:6A12 A5 A7			     LDA     attract_mode
ROM:6A14 C9 01			     CMP     #1
ROM:6A16 F0 A0			     BEQ     handle_attract_mode
ROM:6A18 AE 00 C0		     LDX     $C000		     ; read keyboard
ROM:6A1B 8E 10 C0		     STX     $C010		     ; keyboard	strobe
ROM:6A1E 86 1E			     STX     msg_char		     ; store key
ROM:6A20 30 09			     BMI     key_pressed	     ; key pressed, go
ROM:6A22 A5 95			     LDA     paddles_detected
ROM:6A24 C9 CB			     CMP     #$CB ; 'Ë'
ROM:6A26 F0 2D			     BEQ     locret_6A55
ROM:6A28
ROM:6A28	     loc_6A28:					     ; CODE XREF: read_controls+3Bj
ROM:6A28 4C D0 6A		     JMP     loc_6AD0
ROM:6A2B	     ; ---------------------------------------------------------------------------
ROM:6A2B
ROM:6A2B	     key_pressed:				     ; CODE XREF: read_controls+Ej
ROM:6A2B E0 A0			     CPX     #$A0 ; ' '              ; displayable character?
ROM:6A2D B0 1A			     BCS     loc_6A49		     ; yes, go
ROM:6A2F 86 1E			     STX     msg_char		     ; save key
ROM:6A31 A0 FF			     LDY     #$FF
ROM:6A33
ROM:6A33	     loc_6A33:					     ; CODE XREF: read_controls+29j
ROM:6A33 C8			     INY			     ; next entry
ROM:6A34 B9 59 6B		     LDA     ctl_keys,Y		     ; get entry
ROM:6A37 F0 10			     BEQ     loc_6A49		     ; done? yes, exit
ROM:6A39 C5 1E			     CMP     msg_char		     ; matches key?
ROM:6A3B D0 F6			     BNE     loc_6A33		     ; no, loop
ROM:6A3D 98			     TYA
ROM:6A3E 0A			     ASL     A
ROM:6A3F A8			     TAY			     ; y *= 2
ROM:6A40 B9 68 6B		     LDA     ctl_key_vector_fn+1,Y   ; msb of vector
ROM:6A43 48			     PHA
ROM:6A44 B9 67 6B		     LDA     ctl_key_vector_fn,Y     ; lsb of vector
ROM:6A47 48			     PHA			     ; set as return address
ROM:6A48 60			     RTS			     ; jump to vector
ROM:6A49	     ; ---------------------------------------------------------------------------
ROM:6A49
ROM:6A49	     loc_6A49:					     ; CODE XREF: read_controls+1Bj
ROM:6A49							     ; read_controls+25j
ROM:6A49 A5 95			     LDA     paddles_detected
ROM:6A4B C9 CA			     CMP     #$CA ; 'Ê'              ; detected?
ROM:6A4D F0 D9			     BEQ     loc_6A28
ROM:6A4F A6 1E			     LDX     msg_char
ROM:6A51 86 9E			     STX     key_1
ROM:6A53 86 9F			     STX     key_2
ROM:6A55
ROM:6A55	     locret_6A55:				     ; CODE XREF: read_controls+14j
ROM:6A55							     ; DATA XREF: ROM:ctl_key_vector_fno
ROM:6A55 60			     RTS
ROM:6A56	     ; ---------------------------------------------------------------------------
ROM:6A56
ROM:6A56	     goto_next_level:
ROM:6A56 E6 98			     INC     no_lives
ROM:6A58 E6 A6			     INC     level
ROM:6A5A E6 96			     INC     level_0_based
ROM:6A5C 46 9A			     LSR     level_active
ROM:6A5E 46 9D			     LSR     game_active
ROM:6A60
ROM:6A60	     locret_6A60:				     ; DATA XREF: ROM:6B69o
ROM:6A60 60			     RTS
ROM:6A61	     ; ---------------------------------------------------------------------------
ROM:6A61
ROM:6A61	     extra_life:
ROM:6A61 E6 98			     INC     no_lives
ROM:6A63 D0 02			     BNE     loc_6A67
ROM:6A65 C6 98			     DEC     no_lives
ROM:6A67
ROM:6A67	     loc_6A67:					     ; CODE XREF: read_controls+51j
ROM:6A67 20 70 7A		     JSR     display_no_lives
ROM:6A6A 46 9D			     LSR     game_active
ROM:6A6C 4C 12 6A		     JMP     read_controls
ROM:6A6F	     ; ---------------------------------------------------------------------------
ROM:6A6F E6 97			     INC     unused_97		     ; dead code
ROM:6A71 E6 98			     INC     no_lives
ROM:6A73 46 9A			     LSR     level_active
ROM:6A75
ROM:6A75	     locret_6A75:				     ; DATA XREF: ROM:6B6Bo
ROM:6A75 60			     RTS
ROM:6A76	     ; ---------------------------------------------------------------------------
ROM:6A76
ROM:6A76	     freeze:					     ; CODE XREF: read_controls+69j
ROM:6A76 20 A8 86		     JSR     wait_for_key
ROM:6A79 C9 9B			     CMP     #$9B ; ''              ; <ESC>?
ROM:6A7B D0 F9			     BNE     freeze		     ; no, loop
ROM:6A7D
ROM:6A7D	     loc_6A7D:					     ; DATA XREF: ROM:6B6Do
ROM:6A7D 4C 12 6A		     JMP     read_controls
ROM:6A80	     ; ---------------------------------------------------------------------------
ROM:6A80
ROM:6A80	     terminate_game:
ROM:6A80 A9 01			     LDA     #1
ROM:6A82
ROM:6A82	     loc_6A82:					     ; DATA XREF: ROM:6B6Fo
ROM:6A82 85 98			     STA     no_lives
ROM:6A84
ROM:6A84	     abort_life:				     ; kill player
ROM:6A84 46 9A			     LSR     level_active
ROM:6A86
ROM:6A86	     locret_6A86:				     ; DATA XREF: ROM:6B71o
ROM:6A86 60			     RTS
ROM:6A87	     ; ---------------------------------------------------------------------------
ROM:6A87
ROM:6A87	     toggle_sound:
ROM:6A87 A5 99			     LDA     byte_99
ROM:6A89 49 FF			     EOR     #$FF
ROM:6A8B 85 99			     STA     byte_99
ROM:6A8D
ROM:6A8D	     loc_6A8D:					     ; DATA XREF: ROM:6B73o
ROM:6A8D 4C 12 6A		     JMP     read_controls
ROM:6A90	     ; ---------------------------------------------------------------------------
ROM:6A90
ROM:6A90	     enable_joystick:
ROM:6A90 A9 CA			     LDA     #$CA ; 'Ê'
ROM:6A92 85 95			     STA     paddles_detected
ROM:6A94
ROM:6A94	     loc_6A94:					     ; DATA XREF: ROM:6B75o
ROM:6A94 4C 12 6A		     JMP     read_controls
ROM:6A97	     ; ---------------------------------------------------------------------------
ROM:6A97
ROM:6A97	     enable_keyboard:
ROM:6A97 A9 CB			     LDA     #$CB ; 'Ë'
ROM:6A99 85 95			     STA     paddles_detected
ROM:6A9B
ROM:6A9B	     loc_6A9B:					     ; DATA XREF: ROM:6B7Bo
ROM:6A9B 4C 12 6A		     JMP     read_controls
ROM:6A9E	     ; ---------------------------------------------------------------------------
ROM:6A9E
ROM:6A9E	     x_flip:
ROM:6A9E AD 81 6B		     LDA     byte_6B81
ROM:6AA1 AE 82 6B		     LDX     byte_6B82
ROM:6AA4 8D 82 6B		     STA     byte_6B82
ROM:6AA7 8E 81 6B		     STX     byte_6B81
ROM:6AAA
ROM:6AAA	     loc_6AAA:					     ; DATA XREF: ROM:6B7Do
ROM:6AAA 4C 12 6A		     JMP     read_controls
ROM:6AAD	     ; ---------------------------------------------------------------------------
ROM:6AAD
ROM:6AAD	     y_flip:
ROM:6AAD AD 83 6B		     LDA     byte_6B83
ROM:6AB0 AE 84 6B		     LDX     byte_6B84
ROM:6AB3 8D 84 6B		     STA     byte_6B84
ROM:6AB6 8E 83 6B		     STX     byte_6B83
ROM:6AB9
ROM:6AB9	     loc_6AB9:					     ; DATA XREF: ROM:6B79o
ROM:6AB9 4C 12 6A		     JMP     read_controls
ROM:6ABC	     ; ---------------------------------------------------------------------------
ROM:6ABC
ROM:6ABC	     speed_up:
ROM:6ABC A5 8C			     LDA     game_speed
ROM:6ABE F0 0D			     BEQ     loc_6ACD
ROM:6AC0 C6 8C			     DEC     game_speed
ROM:6AC2
ROM:6AC2	     loc_6AC2:					     ; DATA XREF: ROM:6B77o
ROM:6AC2 4C 12 6A		     JMP     read_controls
ROM:6AC5	     ; ---------------------------------------------------------------------------
ROM:6AC5
ROM:6AC5	     slow_down:
ROM:6AC5 A5 8C			     LDA     game_speed
ROM:6AC7 C9 0F			     CMP     #$F
ROM:6AC9 F0 02			     BEQ     loc_6ACD
ROM:6ACB E6 8C			     INC     game_speed
ROM:6ACD
ROM:6ACD	     loc_6ACD:					     ; CODE XREF: read_controls+ACj
ROM:6ACD							     ; read_controls+B7j
ROM:6ACD 4C 12 6A		     JMP     read_controls
ROM:6AD0	     ; ---------------------------------------------------------------------------
ROM:6AD0
ROM:6AD0	     loc_6AD0:					     ; CODE XREF: read_controls:loc_6A28j
ROM:6AD0 AD 62 C0		     LDA     $C062		     ; closed apple key	read
ROM:6AD3 10 04			     BPL     loc_6AD9		     ; not pressed, go
ROM:6AD5 A9 D5			     LDA     #$D5 ; 'Õ'
ROM:6AD7 D0 07			     BNE     loc_6AE0
ROM:6AD9
ROM:6AD9	     loc_6AD9:					     ; CODE XREF: read_controls+C1j
ROM:6AD9 AD 61 C0		     LDA     $C061		     ; open apple key read
ROM:6ADC 10 07			     BPL     loc_6AE5		     ; not pressed, go
ROM:6ADE A9 CF			     LDA     #$CF ; 'Ï'
ROM:6AE0
ROM:6AE0	     loc_6AE0:					     ; CODE XREF: read_controls+C5j
ROM:6AE0 85 9E			     STA     key_1
ROM:6AE2 85 9F			     STA     key_2
ROM:6AE4 60			     RTS
ROM:6AE5	     ; ---------------------------------------------------------------------------
ROM:6AE5
ROM:6AE5	     loc_6AE5:					     ; CODE XREF: read_controls+CAj
ROM:6AE5 20 46 87		     JSR     loc_8746
ROM:6AE8 A4 65			     LDY     unk_65
ROM:6AEA AD 82 6B		     LDA     byte_6B82
ROM:6AED C9 2E			     CMP     #$2E ; '.'
ROM:6AEF F0 09			     BEQ     loc_6AFA
ROM:6AF1 CC 82 6B		     CPY     byte_6B82
ROM:6AF4 B0 0D			     BCS     loc_6B03
ROM:6AF6 A9 CC			     LDA     #$CC ; 'Ì'
ROM:6AF8 D0 24			     BNE     loc_6B1E
ROM:6AFA
ROM:6AFA	     loc_6AFA:					     ; CODE XREF: read_controls+DDj
ROM:6AFA CC 82 6B		     CPY     byte_6B82
ROM:6AFD 90 04			     BCC     loc_6B03
ROM:6AFF A9 CC			     LDA     #$CC ; 'Ì'
ROM:6B01 D0 1B			     BNE     loc_6B1E
ROM:6B03
ROM:6B03	     loc_6B03:					     ; CODE XREF: read_controls+E2j
ROM:6B03							     ; read_controls+EBj
ROM:6B03 AD 81 6B		     LDA     byte_6B81
ROM:6B06 C9 2E			     CMP     #$2E ; '.'
ROM:6B08 F0 09			     BEQ     loc_6B13
ROM:6B0A CC 81 6B		     CPY     byte_6B81
ROM:6B0D B0 0D			     BCS     loc_6B1C
ROM:6B0F A9 CA			     LDA     #$CA ; 'Ê'
ROM:6B11 D0 0B			     BNE     loc_6B1E
ROM:6B13
ROM:6B13	     loc_6B13:					     ; CODE XREF: read_controls+F6j
ROM:6B13 CC 81 6B		     CPY     byte_6B81
ROM:6B16 90 04			     BCC     loc_6B1C
ROM:6B18 A9 CA			     LDA     #$CA ; 'Ê'
ROM:6B1A D0 02			     BNE     loc_6B1E
ROM:6B1C
ROM:6B1C	     loc_6B1C:					     ; CODE XREF: read_controls+FBj
ROM:6B1C							     ; read_controls+104j
ROM:6B1C A9 C0			     LDA     #$C0 ; 'À'
ROM:6B1E
ROM:6B1E	     loc_6B1E:					     ; CODE XREF: read_controls+E6j
ROM:6B1E							     ; read_controls+EFj ...
ROM:6B1E 85 9F			     STA     key_2
ROM:6B20 A4 66			     LDY     unk_66
ROM:6B22 AD 83 6B		     LDA     byte_6B83
ROM:6B25 C9 2E			     CMP     #$2E ; '.'
ROM:6B27 F0 09			     BEQ     loc_6B32
ROM:6B29 CC 83 6B		     CPY     byte_6B83
ROM:6B2C B0 0D			     BCS     loc_6B3B
ROM:6B2E A9 C9			     LDA     #$C9 ; 'É'
ROM:6B30 D0 24			     BNE     loc_6B56
ROM:6B32
ROM:6B32	     loc_6B32:					     ; CODE XREF: read_controls+115j
ROM:6B32 CC 83 6B		     CPY     byte_6B83
ROM:6B35 90 04			     BCC     loc_6B3B
ROM:6B37 A9 C9			     LDA     #$C9 ; 'É'
ROM:6B39 D0 1B			     BNE     loc_6B56
ROM:6B3B
ROM:6B3B	     loc_6B3B:					     ; CODE XREF: read_controls+11Aj
ROM:6B3B							     ; read_controls+123j
ROM:6B3B AD 84 6B		     LDA     byte_6B84
ROM:6B3E C9 2E			     CMP     #$2E ; '.'
ROM:6B40 F0 09			     BEQ     loc_6B4B
ROM:6B42 CC 84 6B		     CPY     byte_6B84
ROM:6B45 B0 0D			     BCS     loc_6B54
ROM:6B47 A9 CB			     LDA     #$CB ; 'Ë'
ROM:6B49 D0 0B			     BNE     loc_6B56
ROM:6B4B
ROM:6B4B	     loc_6B4B:					     ; CODE XREF: read_controls+12Ej
ROM:6B4B CC 84 6B		     CPY     byte_6B84
ROM:6B4E 90 04			     BCC     loc_6B54
ROM:6B50 A9 CB			     LDA     #$CB ; 'Ë'
ROM:6B52 D0 02			     BNE     loc_6B56
ROM:6B54
ROM:6B54	     loc_6B54:					     ; CODE XREF: read_controls+133j
ROM:6B54							     ; read_controls+13Cj
ROM:6B54 A9 C0			     LDA     #$C0 ; 'À'
ROM:6B56
ROM:6B56	     loc_6B56:					     ; CODE XREF: read_controls+11Ej
ROM:6B56							     ; read_controls+127j ...
ROM:6B56 85 9E			     STA     key_1
ROM:6B58 60			     RTS
ROM:6B58	     ; End of function read_controls
ROM:6B58
ROM:6B58	     ; ---------------------------------------------------------------------------
ROM:6B59 9E	     ctl_keys:	     .BYTE $9E ; 		     ; DATA XREF: read_controls+22r
ROM:6B59							     ; CTRL-^ (next level)
ROM:6B5A 80			     .BYTE $80 ; 		     ; CTRL-@ (extra life)
ROM:6B5B 9B			     .BYTE $9B ; 		     ; ESC (freeze toggle)
ROM:6B5C 92			     .BYTE $92 ; 		     ; CTRL-R (terminate game)
ROM:6B5D 81			     .BYTE $81 ; 		     ; CTRL-A (abort life)
ROM:6B5E 93			     .BYTE $93 ; 		     ; CTRL-S (sound toggle)
ROM:6B5F 8A			     .BYTE $8A ; 		     ; CTRL-J (joystick	enable)
ROM:6B60 8B			     .BYTE $8B ; 		     ; CTRL-K (keyboard	enable)
ROM:6B61 88			     .BYTE $88 ; 		     ; CTRL-H (speed up)
ROM:6B62 95			     .BYTE $95 ; 		     ; CTRL-U (slow down)
ROM:6B63 98			     .BYTE $98 ; 		     ; CTRL-X (flip X)
ROM:6B64 99			     .BYTE $99 ; 		     ; CTRL-Y (flip Y)
ROM:6B65 8D			     .BYTE $8D ; 		     ; CTRL-M (display high scores)
ROM:6B66 00			     .BYTE   0
ROM:6B67 55 6A	     ctl_key_vector_fn:.WORD locret_6A55	     ; DATA XREF: read_controls+32r
ROM:6B67							     ; read_controls+2Er
ROM:6B67							     ; CTRL-^ (next level)
ROM:6B69 60 6A			     .WORD locret_6A60		     ; CTRl-@ (extra life)
ROM:6B6B 75 6A			     .WORD locret_6A75		     ; ESC (freeze toggle)
ROM:6B6D 7F 6A			     .WORD loc_6A7D+2		     ; CTRL-R (terminate game)
ROM:6B6F 83 6A			     .WORD loc_6A82+1		     ; CTRL-A (abort life)
ROM:6B71 86 6A			     .WORD locret_6A86		     ; CTRL-S (sound toggle)
ROM:6B73 8F 6A			     .WORD loc_6A8D+2		     ; CTRL-J (joystick	enable)
ROM:6B75 96 6A			     .WORD loc_6A94+2		     ; CTRL-K (keyboard	enable)
ROM:6B77 C4 6A			     .WORD loc_6AC2+2		     ; CTRL-H (speed up)
ROM:6B79 BB 6A			     .WORD loc_6AB9+2		     ; CTRL-U (slow down)
ROM:6B7B 9D 6A			     .WORD loc_6A9B+2		     ; CTRL-X (X flip)
ROM:6B7D AC 6A			     .WORD loc_6AAA+2		     ; CTRL-Y (Y flip)
ROM:6B7F AB 77			     .WORD loc_77A9+2		     ; CTRL-M (display high scores)
ROM:6B81 12	     byte_6B81:	     .BYTE $12			     ; DATA XREF: read_controls:x_flipr
ROM:6B81							     ; read_controls+95w ...
ROM:6B82 2E	     byte_6B82:	     .BYTE $2E			     ; DATA XREF: read_controls+8Fr
ROM:6B82							     ; read_controls+92w ...
ROM:6B83 12	     byte_6B83:	     .BYTE $12			     ; DATA XREF: read_controls:y_flipr
ROM:6B83							     ; read_controls+A4w ...
ROM:6B84 2E	     byte_6B84:	     .BYTE $2E			     ; DATA XREF: read_controls+9Er
ROM:6B84							     ; read_controls+A1w ...
ROM:6B85
ROM:6B85	     ; =============== S U B R O U T I N E =======================================
ROM:6B85
ROM:6B85
ROM:6B85	     calc_char_and_addr:			     ; CODE XREF: handle_player+6Cp
ROM:6B85							     ; handle_player:can_move_leftp ...
ROM:6B85 A6 00			     LDX     current_col
ROM:6B87 A4 02			     LDY     x_offset_within_tile
ROM:6B89 20 8F 88		     JSR     calc_x_in_2_pixel_incs  ; used for	table lookup
ROM:6B8C 86 1E			     STX     msg_char		     ; store x_in_2_pixel_incs
ROM:6B8E A4 01			     LDY     current_row
ROM:6B90 A6 03			     LDX     y_offset_within_tile
ROM:6B92 20 7C 88		     JSR     calc_scanline	     ; (Y)
ROM:6B95 A6 04			     LDX     sprite_index
ROM:6B97 BD 68 69		     LDA     sprite_to_char_tbl,X    ; lookup char from	sprite
ROM:6B9A A6 1E			     LDX     msg_char		     ; restore x_in_2_pixel_incs
ROM:6B9C 60			     RTS
ROM:6B9C	     ; End of function calc_char_and_addr
ROM:6B9C
ROM:6B9D	     ; ---------------------------------------------------------------------------
ROM:6B9D
ROM:6B9D	     check_for_gold:				     ; CODE XREF: handle_player+87p
ROM:6B9D							     ; handle_player:loc_662Ap	...
ROM:6B9D A5 02			     LDA     x_offset_within_tile
ROM:6B9F C9 02			     CMP     #2
ROM:6BA1 D0 50			     BNE     locret_6BF3	     ; no, return
ROM:6BA3 A5 03			     LDA     y_offset_within_tile
ROM:6BA5 C9 02			     CMP     #2
ROM:6BA7 D0 4A			     BNE     locret_6BF3	     ; no, return
ROM:6BA9 A4 01			     LDY     current_row	     ; get current row
ROM:6BAB B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6BAE 85 08			     STA     byte_8
ROM:6BB0 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6BB3 85 09			     STA     byte_9		     ; get current row address
ROM:6BB5 A4 00			     LDY     current_col	     ; get current column
ROM:6BB7 B1 08			     LDA     (8),Y		     ; get object at current row,col
ROM:6BB9 C9 07			     CMP     #7			     ; gold?
ROM:6BBB D0 36			     BNE     locret_6BF3	     ; no, exit
ROM:6BBD 46 94			     LSR     unk_94
ROM:6BBF C6 93			     DEC     no_gold
ROM:6BC1 A4 01			     LDY     current_row	     ; current row
ROM:6BC3 84 86			     STY     row
ROM:6BC5 A4 00			     LDY     current_col	     ; current col
ROM:6BC7 84 85			     STY     col
ROM:6BC9 A9 00			     LDA     #0			     ; space
ROM:6BCB 91 08			     STA     (8),Y		     ; wipe gold from background tilemap
ROM:6BCD 20 B0 82		     JSR     display_char_pg2
ROM:6BD0 A4 86			     LDY     row
ROM:6BD2 A6 85			     LDX     col
ROM:6BD4 20 5D 88		     JSR     calc_colx5_scanline
ROM:6BD7 A9 07			     LDA     #7			     ; gold
ROM:6BD9 20 36 83		     JSR     wipe_char		     ; from video display
ROM:6BDC A0 02			     LDY     #2
ROM:6BDE A9 50			     LDA     #$50 ; 'P'              ; add 250
ROM:6BE0 20 92 7A		     JSR     update_and_display_score
ROM:6BE3 20 E1 87		     JSR     sub_87E1		     ; sound stuff!
ROM:6BE3	     ; ---------------------------------------------------------------------------
ROM:6BE6 07 45 06 55+		     .WORD $4507, $5506, $4405,	$5404, $4303, $5302
ROM:6BF2 00			     .BYTE   0
ROM:6BF3	     ; ---------------------------------------------------------------------------
ROM:6BF3
ROM:6BF3	     locret_6BF3:				     ; CODE XREF: ROM:6BA1j
ROM:6BF3							     ; ROM:6BA7j ...
ROM:6BF3 60			     RTS
ROM:6BF4
ROM:6BF4	     ; =============== S U B R O U T I N E =======================================
ROM:6BF4
ROM:6BF4
ROM:6BF4	     update_sprite_index:			     ; CODE XREF: handle_player:loc_663Fp
ROM:6BF4							     ; handle_player:loc_66B7p	...
ROM:6BF4 E6 04			     INC     sprite_index	     ; next sprite index
ROM:6BF6 C5 04			     CMP     sprite_index	     ; > 1st sprint index?
ROM:6BF8 90 03			     BCC     loc_6BFD		     ; yes, skip
ROM:6BFA
ROM:6BFA	     loc_6BFA:					     ; CODE XREF: update_sprite_index+Bj
ROM:6BFA 85 04			     STA     sprite_index	     ; reset sprite index
ROM:6BFC 60			     RTS
ROM:6BFD	     ; ---------------------------------------------------------------------------
ROM:6BFD
ROM:6BFD	     loc_6BFD:					     ; CODE XREF: update_sprite_index+4j
ROM:6BFD E4 04			     CPX     sprite_index	     ; > last sprite index?
ROM:6BFF 90 F9			     BCC     loc_6BFA		     ; yes, reset
ROM:6C01 60			     RTS
ROM:6C01	     ; End of function update_sprite_index
ROM:6C01
ROM:6C02
ROM:6C02	     ; =============== S U B R O U T I N E =======================================
ROM:6C02
ROM:6C02
ROM:6C02	     draw_sprite:				     ; CODE XREF: handle_player+8Aj
ROM:6C02							     ; handle_player+C4j ...
ROM:6C02 20 85 6B		     JSR     calc_char_and_addr
ROM:6C05 20 A7 83		     JSR     display_transparent_char
ROM:6C08 A5 52			     LDA     byte_52
ROM:6C0A F0 06			     BEQ     locret_6C12
ROM:6C0C A5 94			     LDA     unk_94
ROM:6C0E F0 02			     BEQ     locret_6C12
ROM:6C10 46 9A			     LSR     level_active
ROM:6C12
ROM:6C12	     locret_6C12:				     ; CODE XREF: draw_sprite+8j
ROM:6C12							     ; draw_sprite+Cj
ROM:6C12 60			     RTS
ROM:6C12	     ; End of function draw_sprite
ROM:6C12
ROM:6C13
ROM:6C13	     ; =============== S U B R O U T I N E =======================================
ROM:6C13
ROM:6C13
ROM:6C13	     adjust_x_offset_in_tile:			     ; CODE XREF: handle_player+7Cp
ROM:6C13							     ; move_up+6Dp ...
ROM:6C13 A5 02			     LDA     x_offset_within_tile
ROM:6C15 C9 02			     CMP     #2
ROM:6C17 90 07			     BCC     loc_6C20
ROM:6C19 F0 0A			     BEQ     locret_6C25
ROM:6C1B C6 02			     DEC     x_offset_within_tile
ROM:6C1D 4C 9D 6B		     JMP     check_for_gold
ROM:6C20	     ; ---------------------------------------------------------------------------
ROM:6C20
ROM:6C20	     loc_6C20:					     ; CODE XREF: adjust_x_offset_in_tile+4j
ROM:6C20 E6 02			     INC     x_offset_within_tile
ROM:6C22 4C 9D 6B		     JMP     check_for_gold
ROM:6C25	     ; ---------------------------------------------------------------------------
ROM:6C25
ROM:6C25	     locret_6C25:				     ; CODE XREF: adjust_x_offset_in_tile+6j
ROM:6C25 60			     RTS
ROM:6C25	     ; End of function adjust_x_offset_in_tile
ROM:6C25
ROM:6C26
ROM:6C26	     ; =============== S U B R O U T I N E =======================================
ROM:6C26
ROM:6C26
ROM:6C26	     adjust_y_offset_within_tile:		     ; CODE XREF: handle_player+14Dp
ROM:6C26							     ; handle_player+1C1p ...
ROM:6C26 A5 03			     LDA     y_offset_within_tile
ROM:6C28 C9 02			     CMP     #2			     ; offset<2?
ROM:6C2A 90 07			     BCC     loc_6C33		     ; yes, skip
ROM:6C2C F0 0A			     BEQ     locret_6C38
ROM:6C2E C6 03			     DEC     y_offset_within_tile
ROM:6C30 4C 9D 6B		     JMP     check_for_gold
ROM:6C33	     ; ---------------------------------------------------------------------------
ROM:6C33
ROM:6C33	     loc_6C33:					     ; CODE XREF: adjust_y_offset_within_tile+4j
ROM:6C33 E6 03			     INC     y_offset_within_tile
ROM:6C35 4C 9D 6B		     JMP     check_for_gold
ROM:6C38	     ; ---------------------------------------------------------------------------
ROM:6C38
ROM:6C38	     locret_6C38:				     ; CODE XREF: adjust_y_offset_within_tile+6j
ROM:6C38 60			     RTS
ROM:6C38	     ; End of function adjust_y_offset_within_tile
ROM:6C38
ROM:6C39	     ; ---------------------------------------------------------------------------
ROM:6C39	     ; START OF	FUNCTION CHUNK FOR dig_left
ROM:6C39
ROM:6C39	     add_hole_entry:				     ; CODE XREF: dig_left+C0j
ROM:6C39							     ; dig_right+C4j
ROM:6C39 A9 00			     LDA     #0
ROM:6C3B 85 9C			     STA     dig_dir
ROM:6C3D A4 01			     LDY     current_row
ROM:6C3F C8			     INY
ROM:6C40 86 85			     STX     col
ROM:6C42 84 86			     STY     row
ROM:6C44 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6C47 85 06			     STA     lsb_row_level_data_addr
ROM:6C49 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6C4C 85 07			     STA     msb_row_level_data_addr
ROM:6C4E A9 00			     LDA     #0			     ; space
ROM:6C50 A4 85			     LDY     col
ROM:6C52 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:6C54 20 AA 82		     JSR     display_char_pg1
ROM:6C57 A9 00			     LDA     #0			     ; space
ROM:6C59 20 B0 82		     JSR     display_char_pg2
ROM:6C5C C6 86			     DEC     row
ROM:6C5E A9 00			     LDA     #0			     ; space
ROM:6C60 20 AA 82		     JSR     display_char_pg1
ROM:6C63 E6 86			     INC     row
ROM:6C65 A2 FF			     LDX     #$FF
ROM:6C67
ROM:6C67	     loc_6C67:					     ; CODE XREF: dig_left+494j
ROM:6C67 E8			     INX			     ; next hole
ROM:6C68 E0 1E			     CPX     #$1E		     ; max?
ROM:6C6A F0 15			     BEQ     locret_6C81	     ; yes, exit
ROM:6C6C BD E0 0C		     LDA     hole_cnt,X		     ; empty entry?
ROM:6C6F D0 F6			     BNE     loc_6C67		     ; yes, loop
ROM:6C71 A5 86			     LDA     row
ROM:6C73 9D C0 0C		     STA     hole_row,X		     ; store row of hole
ROM:6C76 A5 85			     LDA     col
ROM:6C78 9D A0 0C		     STA     hole_col,X		     ; store column of hole
ROM:6C7B A9 B4			     LDA     #180		     ; init counter
ROM:6C7D 9D E0 0C		     STA     hole_cnt,X		     ; store counter
ROM:6C80 38			     SEC
ROM:6C81
ROM:6C81	     locret_6C81:				     ; CODE XREF: dig_left+48Fj
ROM:6C81 60			     RTS
ROM:6C81	     ; END OF FUNCTION CHUNK FOR dig_left
ROM:6C82
ROM:6C82	     ; =============== S U B R O U T I N E =======================================
ROM:6C82
ROM:6C82
ROM:6C82	     handle_guards:				     ; CODE XREF: ROM:6111p
ROM:6C82 A6 8D			     LDX     no_guards		     ; any guards left?
ROM:6C84 F0 20			     BEQ     locret_6CA6	     ; no, exit
ROM:6C86 E6 64			     INC     byte_64
ROM:6C88 A4 64			     LDY     byte_64
ROM:6C8A C0 03			     CPY     #3
ROM:6C8C 90 04			     BCC     loc_6C92
ROM:6C8E A0 00			     LDY     #0
ROM:6C90 84 64			     STY     byte_64
ROM:6C92
ROM:6C92	     loc_6C92:					     ; CODE XREF: handle_guards+Aj
ROM:6C92 B9 60 00		     LDA     byte_60,Y
ROM:6C95 85 63			     STA     byte_63
ROM:6C97
ROM:6C97	     loc_6C97:					     ; CODE XREF: handle_guards+22j
ROM:6C97 46 63			     LSR     byte_63
ROM:6C99 90 07			     BCC     loc_6CA2
ROM:6C9B 20 DB 6C		     JSR     update_guards	     ; update guards
ROM:6C9E A5 9A			     LDA     level_active	     ; player still alive?
ROM:6CA0 F0 04			     BEQ     locret_6CA6	     ; no, exit
ROM:6CA2
ROM:6CA2	     loc_6CA2:					     ; CODE XREF: handle_guards+17j
ROM:6CA2 A5 63			     LDA     byte_63
ROM:6CA4 D0 F1			     BNE     loc_6C97
ROM:6CA6
ROM:6CA6	     locret_6CA6:				     ; CODE XREF: handle_guards+2j
ROM:6CA6							     ; handle_guards+1Ej
ROM:6CA6 60			     RTS
ROM:6CA6	     ; End of function handle_guards
ROM:6CA6
ROM:6CA6	     ; ---------------------------------------------------------------------------
ROM:6CA7 00 00 00    byte_6CA7:	     .BYTE 0, 0, 0		     ; DATA XREF: ROM:60CEr
ROM:6CA7							     ; ROM:60D3r ...
ROM:6CAA 00 01 01		     .BYTE 0, 1, 1
ROM:6CAD 01 01 01		     .BYTE 1, 1, 1
ROM:6CB0 01 03 01		     .BYTE 1, 3, 1
ROM:6CB3 01 03 03		     .BYTE 1, 3, 3
ROM:6CB6 03 03 03		     .BYTE 3, 3, 3
ROM:6CB9 03 03 07		     .BYTE 3, 3, 7
ROM:6CBC 03 07 07		     .BYTE 3, 7, 7
ROM:6CBF 07 07 07		     .BYTE 7, 7, 7
ROM:6CC2 07 07 0F		     .BYTE 7, 7, $F
ROM:6CC5 07 0F 0F		     .BYTE 7, $F, $F
ROM:6CC8 0F 0F 0F		     .BYTE $F, $F, $F
ROM:6CCB 08 2B 2C 30+guard_sprite_to_char_tbl:.BYTE 8, $2B, $2C, $30, $31, $32,	$36, $28, $29, $2A, $2D, $2E, $2F
ROM:6CCB 31 32 36 28+						     ; DATA XREF: calc_guard_xychar+12r
ROM:6CCB 29 2A 2D 2E+		     .BYTE $35,	$33, $34
ROM:6CDB	     ; ---------------------------------------------------------------------------
ROM:6CDB
ROM:6CDB	     update_guards:				     ; CODE XREF: handle_guards+19p
ROM:6CDB E6 19			     INC     curr_guard		     ; next guard
ROM:6CDD A6 8D			     LDX     no_guards
ROM:6CDF E4 19			     CPX     curr_guard		     ; max?
ROM:6CE1 B0 04			     BCS     loc_6CE7		     ; no, skip
ROM:6CE3 A2 01			     LDX     #1
ROM:6CE5 86 19			     STX     curr_guard		     ; set current to #1
ROM:6CE7
ROM:6CE7	     loc_6CE7:					     ; CODE XREF: ROM:6CE1j
ROM:6CE7 20 CE 75		     JSR     copy_guard_to_curr
ROM:6CEA A5 16			     LDA     curr_guard_state
ROM:6CEC 30 1A			     BMI     check_guard_falling
ROM:6CEE F0 18			     BEQ     check_guard_falling
ROM:6CF0 C6 16			     DEC     curr_guard_state
ROM:6CF2 A4 16			     LDY     curr_guard_state
ROM:6CF4 C0 0D			     CPY     #13
ROM:6CF6 B0 03			     BCS     save_guard_and_ret
ROM:6CF8 4C 65 6E		     JMP     check_wriggle
ROM:6CFB	     ; ---------------------------------------------------------------------------
ROM:6CFB
ROM:6CFB	     save_guard_and_ret:			     ; CODE XREF: ROM:6CF6j
ROM:6CFB A6 19			     LDX     curr_guard
ROM:6CFD BD 98 0C		     LDA     guard_cnt,X
ROM:6D00 F0 03			     BEQ     loc_6D05
ROM:6D02 4C A8 75		     JMP     copy_curr_to_guard	     ; save guard data
ROM:6D05	     ; ---------------------------------------------------------------------------
ROM:6D05
ROM:6D05	     loc_6D05:					     ; CODE XREF: ROM:6D00j
ROM:6D05 4C B7 6D		     JMP     render_guard_and_ret
ROM:6D08	     ; ---------------------------------------------------------------------------
ROM:6D08
ROM:6D08	     check_guard_falling:			     ; CODE XREF: ROM:6CECj
ROM:6D08							     ; ROM:6CEEj
ROM:6D08 A4 13			     LDY     curr_guard_row
ROM:6D0A B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6D0D 85 08			     STA     byte_8
ROM:6D0F B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6D12 85 09			     STA     byte_9		     ; setup tilemap address
ROM:6D14 A4 12			     LDY     curr_guard_col
ROM:6D16 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6D18 C9 03			     CMP     #3			     ; ladder?
ROM:6D1A F0 45			     BEQ     loc_6D61		     ; yes, go
ROM:6D1C C9 04			     CMP     #4			     ; rope?
ROM:6D1E D0 06			     BNE     loc_6D26		     ; no, skip
ROM:6D20 A5 18			     LDA     curr_guard_y_offset
ROM:6D22 C9 02			     CMP     #2
ROM:6D24 F0 3B			     BEQ     loc_6D61
ROM:6D26
ROM:6D26	     loc_6D26:					     ; CODE XREF: ROM:6D1Ej
ROM:6D26 A5 18			     LDA     curr_guard_y_offset
ROM:6D28 C9 02			     CMP     #2
ROM:6D2A 90 38			     BCC     handle_guard_falling
ROM:6D2C A4 13			     LDY     curr_guard_row
ROM:6D2E C0 0F			     CPY     #15		     ; bottom row?
ROM:6D30 F0 2F			     BEQ     loc_6D61
ROM:6D32 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:6D35 85 06			     STA     lsb_row_level_data_addr
ROM:6D37 85 08			     STA     byte_8
ROM:6D39 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:6D3C 85 09			     STA     byte_9
ROM:6D3E B9 16 1C		     LDA     msb_row_addr_1+1,Y
ROM:6D41 85 07			     STA     msb_row_level_data_addr
ROM:6D43 A4 12			     LDY     curr_guard_col
ROM:6D45 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:6D47 C9 00			     CMP     #0			     ; space?
ROM:6D49 F0 19			     BEQ     handle_guard_falling    ; yes, go
ROM:6D4B C9 09			     CMP     #9			     ; player?
ROM:6D4D F0 15			     BEQ     handle_guard_falling    ; yes, go
ROM:6D4F C9 08			     CMP     #8			     ; guard?
ROM:6D51 F0 0E			     BEQ     loc_6D61		     ; yes, skip
ROM:6D53 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6D55 C9 01			     CMP     #1			     ; brick?
ROM:6D57 F0 08			     BEQ     loc_6D61		     ; yes, skip
ROM:6D59 C9 02			     CMP     #2			     ; solid?
ROM:6D5B F0 04			     BEQ     loc_6D61		     ; yes, skip
ROM:6D5D C9 03			     CMP     #3			     ; ladder?
ROM:6D5F D0 03			     BNE     handle_guard_falling    ; no, go
ROM:6D61
ROM:6D61	     loc_6D61:					     ; CODE XREF: ROM:6D1Aj
ROM:6D61							     ; ROM:6D24j ...
ROM:6D61 4C 85 6E		     JMP     calc_guard_movement
ROM:6D64	     ; ---------------------------------------------------------------------------
ROM:6D64
ROM:6D64	     handle_guard_falling:			     ; CODE XREF: ROM:6D2Aj
ROM:6D64							     ; ROM:6D49j ...
ROM:6D64 20 DF 74		     JSR     calc_guard_xychar
ROM:6D67 20 36 83		     JSR     wipe_char
ROM:6D6A 20 82 75		     JSR     adjust_guard_x_offset
ROM:6D6D A9 06			     LDA     #6			     ; =char $36 = fall	left
ROM:6D6F A4 15			     LDY     curr_guard_dir	     ; left?
ROM:6D71 30 02			     BMI     loc_6D75		     ; yes, skip
ROM:6D73 A9 0D			     LDA     #$D		     ; =char $35 = fall	right
ROM:6D75
ROM:6D75	     loc_6D75:					     ; CODE XREF: ROM:6D71j
ROM:6D75 85 14			     STA     curr_guard_sprite
ROM:6D77 E6 18			     INC     curr_guard_y_offset
ROM:6D79 A5 18			     LDA     curr_guard_y_offset
ROM:6D7B C9 05			     CMP     #5			     ; >5?
ROM:6D7D B0 41			     BCS     guard_fall_into_next_row ;	yes, go
ROM:6D7F A5 18			     LDA     curr_guard_y_offset
ROM:6D81 C9 02			     CMP     #2
ROM:6D83 D0 32			     BNE     render_guard_and_ret
ROM:6D85 20 F7 74		     JSR     check_guard_pickup_gold
ROM:6D88 A4 13			     LDY     curr_guard_row
ROM:6D8A B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6D8D 85 08			     STA     byte_8
ROM:6D8F B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6D92 85 09			     STA     byte_9
ROM:6D94 A4 12			     LDY     curr_guard_col
ROM:6D96 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6D98 C9 01			     CMP     #1			     ; brick?
ROM:6D9A D0 1B			     BNE     render_guard_and_ret    ; no, go
ROM:6D9A							     ; guard hit bottom	of hole
ROM:6D9C A5 16			     LDA     curr_guard_state
ROM:6D9E 10 02			     BPL     loc_6DA2
ROM:6DA0 C6 93			     DEC     no_gold
ROM:6DA2
ROM:6DA2	     loc_6DA2:					     ; CODE XREF: ROM:6D9Ej
ROM:6DA2 A5 5F			     LDA     guard_trap_cnt_init
ROM:6DA4 85 16			     STA     curr_guard_state
ROM:6DA6 A0 00			     LDY     #0
ROM:6DA8 A9 75			     LDA     #$75 ; 'u'              ; add 75
ROM:6DAA 20 92 7A		     JSR     update_and_display_score
ROM:6DAD 20 E1 87		     JSR     sub_87E1		     ; sound stuff!
ROM:6DAD	     ; ---------------------------------------------------------------------------
ROM:6DB0 06 20 04 30+		     .WORD $2006, $3004, $4002
ROM:6DB6 00			     .BYTE   0
ROM:6DB7	     ; ---------------------------------------------------------------------------
ROM:6DB7
ROM:6DB7	     render_guard_and_ret:			     ; CODE XREF: ROM:loc_6D05j
ROM:6DB7							     ; ROM:6D83j ...
ROM:6DB7 20 DF 74		     JSR     calc_guard_xychar
ROM:6DBA 20 A7 83		     JSR     display_transparent_char
ROM:6DBD 4C A8 75		     JMP     copy_curr_to_guard
ROM:6DC0	     ; ---------------------------------------------------------------------------
ROM:6DC0
ROM:6DC0	     guard_fall_into_next_row:			     ; CODE XREF: ROM:6D7Dj
ROM:6DC0 A9 00			     LDA     #0
ROM:6DC2 85 18			     STA     curr_guard_y_offset
ROM:6DC4 A4 13			     LDY     curr_guard_row
ROM:6DC6 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6DC9 85 06			     STA     lsb_row_level_data_addr
ROM:6DCB 85 08			     STA     byte_8
ROM:6DCD B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6DD0 85 07			     STA     msb_row_level_data_addr
ROM:6DD2 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6DD5 85 09			     STA     byte_9		     ; setup tilemap address
ROM:6DD7 A4 12			     LDY     curr_guard_col
ROM:6DD9 B1 08			     LDA     (byte_8),Y
ROM:6DDB C9 01			     CMP     #1
ROM:6DDD D0 02			     BNE     loc_6DE1
ROM:6DDF A9 00			     LDA     #0
ROM:6DE1
ROM:6DE1	     loc_6DE1:					     ; CODE XREF: ROM:6DDDj
ROM:6DE1 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:6DE3 E6 13			     INC     curr_guard_row
ROM:6DE5 A4 13			     LDY     curr_guard_row
ROM:6DE7 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6DEA 85 06			     STA     lsb_row_level_data_addr
ROM:6DEC 85 08			     STA     byte_8
ROM:6DEE B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6DF1 85 07			     STA     msb_row_level_data_addr
ROM:6DF3 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6DF6 85 09			     STA     byte_9		     ; setup tilemap address
ROM:6DF8 A4 12			     LDY     curr_guard_col
ROM:6DFA B1 06			     LDA     (lsb_row_level_data_addr),Y
ROM:6DFC C9 09			     CMP     #9			     ; player?
ROM:6DFE D0 02			     BNE     loc_6E02		     ; no, skip
ROM:6E00 46 9A			     LSR     level_active	     ; kill player
ROM:6E02
ROM:6E02	     loc_6E02:					     ; CODE XREF: ROM:6DFEj
ROM:6E02 B1 08			     LDA     (byte_8),Y
ROM:6E04 C9 01			     CMP     #1
ROM:6E06 D0 50			     BNE     loc_6E58
ROM:6E08 A5 16			     LDA     curr_guard_state
ROM:6E0A 10 4C			     BPL     loc_6E58
ROM:6E0C A4 13			     LDY     curr_guard_row	     ; just fallen into	a hole!
ROM:6E0E 88			     DEY
ROM:6E0F 84 86			     STY     row
ROM:6E11 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6E14 85 06			     STA     lsb_row_level_data_addr
ROM:6E16 85 08			     STA     byte_8
ROM:6E18 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6E1B 85 07			     STA     msb_row_level_data_addr
ROM:6E1D B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6E20 85 09			     STA     byte_9
ROM:6E22 A4 12			     LDY     curr_guard_col
ROM:6E24 84 85			     STY     col
ROM:6E26 B1 08			     LDA     (byte_8),Y
ROM:6E28 C9 00			     CMP     #0
ROM:6E2A F0 05			     BEQ     guard_drop_gold
ROM:6E2C C6 93			     DEC     no_gold
ROM:6E2E 4C 46 6E		     JMP     loc_6E46
ROM:6E31	     ; ---------------------------------------------------------------------------
ROM:6E31
ROM:6E31	     guard_drop_gold:				     ; CODE XREF: ROM:6E2Aj
ROM:6E31 A9 07			     LDA     #7			     ; gold
ROM:6E33 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6E35 91 08			     STA     (byte_8),Y		     ; update tilemap
ROM:6E37 20 B0 82		     JSR     display_char_pg2	     ; render on background
ROM:6E3A A4 86			     LDY     row
ROM:6E3C A6 85			     LDX     col
ROM:6E3E 20 5D 88		     JSR     calc_colx5_scanline
ROM:6E41 A9 07			     LDA     #7			     ; gold
ROM:6E43 20 A7 83		     JSR     display_transparent_char ;	render on foreground
ROM:6E46
ROM:6E46	     loc_6E46:					     ; CODE XREF: ROM:6E2Ej
ROM:6E46 A4 13			     LDY     curr_guard_row
ROM:6E48 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6E4B 85 06			     STA     lsb_row_level_data_addr
ROM:6E4D B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6E50 85 07			     STA     msb_row_level_data_addr ; setup tilemap addr
ROM:6E52 A9 00			     LDA     #0
ROM:6E54 85 16			     STA     curr_guard_state
ROM:6E56 A4 12			     LDY     curr_guard_col
ROM:6E58
ROM:6E58	     loc_6E58:					     ; CODE XREF: ROM:6E06j
ROM:6E58							     ; ROM:6E0Aj
ROM:6E58 A9 08			     LDA     #8			     ; guard
ROM:6E5A 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6E5C 20 DF 74		     JSR     calc_guard_xychar
ROM:6E5F 20 A7 83		     JSR     display_transparent_char ;	render on screen
ROM:6E62 4C A8 75		     JMP     copy_curr_to_guard
ROM:6E65	     ; ---------------------------------------------------------------------------
ROM:6E65
ROM:6E65	     check_wriggle:				     ; CODE XREF: ROM:6CF8j
ROM:6E65 C0 07			     CPY     #7			     ; still wriggling?
ROM:6E67 90 1C			     BCC     calc_guard_movement     ; no, skip
ROM:6E69 20 DF 74		     JSR     calc_guard_xychar
ROM:6E6C 20 36 83		     JSR     wipe_char
ROM:6E6F A4 16			     LDY     curr_guard_state
ROM:6E71 B9 78 6E		     LDA     loc_6E76+2,Y	     ; get wriggle x_offset
ROM:6E74 85 17			     STA     curr_guard_x_offset
ROM:6E76
ROM:6E76	     loc_6E76:					     ; DATA XREF: ROM:6E71r
ROM:6E76 20 DF 74		     JSR     calc_guard_xychar
ROM:6E79 20 A7 83		     JSR     display_transparent_char
ROM:6E7C 4C A8 75		     JMP     copy_curr_to_guard
ROM:6E7C	     ; ---------------------------------------------------------------------------
ROM:6E7F 02 01 02 03+wriggle_tbl:    .BYTE 2, 1, 2, 3, 2, 1
ROM:6E85	     ; ---------------------------------------------------------------------------
ROM:6E85
ROM:6E85	     calc_guard_movement:			     ; CODE XREF: ROM:loc_6D61j
ROM:6E85							     ; ROM:6E67j
ROM:6E85 A6 12			     LDX     curr_guard_col
ROM:6E87 A4 13			     LDY     curr_guard_row
ROM:6E89 20 D8 70		     JSR     guard_ai		     ; *** AI *** ???
ROM:6E8C 0A			     ASL     A			     ; byte to word offset
ROM:6E8D A8			     TAY
ROM:6E8E B9 98 6E		     LDA     guard_move_vector_tbl+1,Y
ROM:6E91 48			     PHA
ROM:6E92 B9 97 6E		     LDA     guard_move_vector_tbl,Y
ROM:6E95 48			     PHA
ROM:6E96 60			     RTS			     ; go to vector fn
ROM:6E96	     ; ---------------------------------------------------------------------------
ROM:6E97 A7 75	     guard_move_vector_tbl:.WORD $75A7		     ; DATA XREF: ROM:6E92r
ROM:6E97							     ; ROM:6E8Er
ROM:6E97							     ; copy_guard_to_curr
ROM:6E99 BB 6F			     .WORD $6FBB		     ; guard_move_left
ROM:6E9B 46 70			     .WORD $7046		     ; guard_move_right
ROM:6E9D AB 6E			     .WORD $6EAB		     ; guard_move_up
ROM:6E9F 38 6F			     .WORD $6F38		     ; guard_move_down
ROM:6EA1	     ; ---------------------------------------------------------------------------
ROM:6EA1
ROM:6EA1	     guard_cant_climb:				     ; CODE XREF: ROM:6EB4j
ROM:6EA1							     ; ROM:6EC7j ...
ROM:6EA1 A5 16			     LDA     curr_guard_state
ROM:6EA3 F0 04			     BEQ     loc_6EA9
ROM:6EA5 30 02			     BMI     loc_6EA9
ROM:6EA7 E6 16			     INC     curr_guard_state
ROM:6EA9
ROM:6EA9	     loc_6EA9:					     ; CODE XREF: ROM:6EA3j
ROM:6EA9							     ; ROM:6EA5j
ROM:6EA9 4C A8 75		     JMP     copy_curr_to_guard
ROM:6EAC	     ; ---------------------------------------------------------------------------
ROM:6EAC
ROM:6EAC	     guard_move_up:
ROM:6EAC A4 18			     LDY     curr_guard_y_offset
ROM:6EAE C0 03			     CPY     #3
ROM:6EB0 B0 23			     BCS     guard_can_move_up
ROM:6EB2 A4 13			     LDY     curr_guard_row	     ; top row?
ROM:6EB4 F0 EB			     BEQ     guard_cant_climb	     ; yes, go
ROM:6EB6 88			     DEY			     ; row above
ROM:6EB7 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6EBA 85 06			     STA     lsb_row_level_data_addr
ROM:6EBC B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6EBF 85 07			     STA     msb_row_level_data_addr
ROM:6EC1 A4 12			     LDY     curr_guard_col
ROM:6EC3 B1 06			     LDA     (lsb_row_level_data_addr),Y
ROM:6EC5 C9 01			     CMP     #1
ROM:6EC7 F0 D8			     BEQ     guard_cant_climb
ROM:6EC9 C9 02			     CMP     #2
ROM:6ECB F0 D4			     BEQ     guard_cant_climb
ROM:6ECD C9 05			     CMP     #5
ROM:6ECF F0 D0			     BEQ     guard_cant_climb
ROM:6ED1 C9 08			     CMP     #8
ROM:6ED3 F0 CC			     BEQ     guard_cant_climb
ROM:6ED5
ROM:6ED5	     guard_can_move_up:				     ; CODE XREF: ROM:6EB0j
ROM:6ED5 20 DF 74		     JSR     calc_guard_xychar
ROM:6ED8 20 36 83		     JSR     wipe_char
ROM:6EDB 20 82 75		     JSR     adjust_guard_x_offset
ROM:6EDE A4 13			     LDY     curr_guard_row
ROM:6EE0 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6EE3 85 06			     STA     lsb_row_level_data_addr
ROM:6EE5 85 08			     STA     byte_8
ROM:6EE7 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6EEA 85 07			     STA     msb_row_level_data_addr
ROM:6EEC B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6EEF 85 09			     STA     byte_9
ROM:6EF1 C6 18			     DEC     curr_guard_y_offset
ROM:6EF3 10 31			     BPL     guard_climber_check_for_gold
ROM:6EF5 20 3E 75		     JSR     check_guard_drop_gold
ROM:6EF8 A4 12			     LDY     curr_guard_col
ROM:6EFA B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6EFC C9 01			     CMP     #1			     ; brick?
ROM:6EFE D0 02			     BNE     loc_6F02		     ; no, skip
ROM:6F00 A9 00			     LDA     #0			     ; space
ROM:6F02
ROM:6F02	     loc_6F02:					     ; CODE XREF: ROM:6EFEj
ROM:6F02 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:6F04 C6 13			     DEC     curr_guard_row
ROM:6F06 A4 13			     LDY     curr_guard_row
ROM:6F08 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6F0B 85 06			     STA     lsb_row_level_data_addr
ROM:6F0D B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6F10 85 07			     STA     msb_row_level_data_addr
ROM:6F12 A4 12			     LDY     curr_guard_col
ROM:6F14 B1 06			     LDA     (lsb_row_level_data_addr),Y
ROM:6F16 C9 09			     CMP     #9			     ; player?
ROM:6F18 D0 02			     BNE     loc_6F1C		     ; no, skip
ROM:6F1A 46 9A			     LSR     level_active
ROM:6F1C
ROM:6F1C	     loc_6F1C:					     ; CODE XREF: ROM:6F18j
ROM:6F1C A9 08			     LDA     #8			     ; enemy
ROM:6F1E 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:6F20 A9 04			     LDA     #4
ROM:6F22 85 18			     STA     curr_guard_y_offset
ROM:6F24 D0 03			     BNE     update_guard_climber_sprite
ROM:6F26
ROM:6F26	     guard_climber_check_for_gold:		     ; CODE XREF: ROM:6EF3j
ROM:6F26							     ; ROM:loc_6FB9j
ROM:6F26 20 F7 74		     JSR     check_guard_pickup_gold
ROM:6F29
ROM:6F29	     update_guard_climber_sprite:		     ; CODE XREF: ROM:6F24j
ROM:6F29							     ; ROM:6FB6j
ROM:6F29 A9 0E			     LDA     #$E		     ; 1st climber sprite
ROM:6F2B A2 0F			     LDX     #$F		     ; last climber sprite
ROM:6F2D 20 74 75		     JSR     update_guard_sprite_index
ROM:6F30 20 DF 74		     JSR     calc_guard_xychar
ROM:6F33 20 A7 83		     JSR     display_transparent_char
ROM:6F36 4C A8 75		     JMP     copy_curr_to_guard
ROM:6F39	     ; ---------------------------------------------------------------------------
ROM:6F39
ROM:6F39	     guard_move_down:
ROM:6F39 A4 18			     LDY     curr_guard_y_offset
ROM:6F3B C0 02			     CPY     #2
ROM:6F3D 90 24			     BCC     guard_can_move_down
ROM:6F3F A4 13			     LDY     curr_guard_row
ROM:6F41 C0 0F			     CPY     #$F
ROM:6F43 B0 1B			     BCS     guard_cant_move_down
ROM:6F45 C8			     INY
ROM:6F46 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6F49 85 06			     STA     lsb_row_level_data_addr
ROM:6F4B B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6F4E 85 07			     STA     msb_row_level_data_addr
ROM:6F50 A4 12			     LDY     curr_guard_col
ROM:6F52 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:6F54 C9 02			     CMP     #2			     ; solid?
ROM:6F56 F0 08			     BEQ     guard_cant_move_down    ; yes, skip
ROM:6F58 C9 08			     CMP     #8			     ; enemy?
ROM:6F5A F0 04			     BEQ     guard_cant_move_down    ; yes, skip
ROM:6F5C C9 01			     CMP     #1			     ; brick?
ROM:6F5E D0 03			     BNE     guard_can_move_down     ; no, go
ROM:6F60
ROM:6F60	     guard_cant_move_down:			     ; CODE XREF: ROM:6F43j
ROM:6F60							     ; ROM:6F56j ...
ROM:6F60 4C A8 75		     JMP     copy_curr_to_guard
ROM:6F63	     ; ---------------------------------------------------------------------------
ROM:6F63
ROM:6F63	     guard_can_move_down:			     ; CODE XREF: ROM:6F3Dj
ROM:6F63							     ; ROM:6F5Ej
ROM:6F63 20 DF 74		     JSR     calc_guard_xychar
ROM:6F66 20 36 83		     JSR     wipe_char
ROM:6F69 20 82 75		     JSR     adjust_guard_x_offset
ROM:6F6C A4 13			     LDY     curr_guard_row
ROM:6F6E B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6F71 85 06			     STA     lsb_row_level_data_addr
ROM:6F73 85 08			     STA     byte_8
ROM:6F75 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6F78 85 07			     STA     msb_row_level_data_addr
ROM:6F7A B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6F7D 85 09			     STA     byte_9
ROM:6F7F E6 18			     INC     curr_guard_y_offset
ROM:6F81 A5 18			     LDA     curr_guard_y_offset
ROM:6F83 C9 05			     CMP     #5
ROM:6F85 90 32			     BCC     loc_6FB9
ROM:6F87 20 3E 75		     JSR     check_guard_drop_gold
ROM:6F8A A4 12			     LDY     curr_guard_col
ROM:6F8C B1 08			     LDA     (byte_8),Y
ROM:6F8E C9 01			     CMP     #1
ROM:6F90 D0 02			     BNE     loc_6F94
ROM:6F92 A9 00			     LDA     #0
ROM:6F94
ROM:6F94	     loc_6F94:					     ; CODE XREF: ROM:6F90j
ROM:6F94 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:6F96 E6 13			     INC     curr_guard_row
ROM:6F98 A4 13			     LDY     curr_guard_row
ROM:6F9A B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6F9D 85 06			     STA     lsb_row_level_data_addr
ROM:6F9F B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6FA2 85 07			     STA     msb_row_level_data_addr
ROM:6FA4 A4 12			     LDY     curr_guard_col
ROM:6FA6 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:6FA8 C9 09			     CMP     #9			     ; player?
ROM:6FAA D0 02			     BNE     loc_6FAE
ROM:6FAC 46 9A			     LSR     level_active
ROM:6FAE
ROM:6FAE	     loc_6FAE:					     ; CODE XREF: ROM:6FAAj
ROM:6FAE A9 08			     LDA     #8
ROM:6FB0 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:6FB2 A9 00			     LDA     #0
ROM:6FB4 85 18			     STA     curr_guard_y_offset
ROM:6FB6 4C 29 6F		     JMP     update_guard_climber_sprite
ROM:6FB9	     ; ---------------------------------------------------------------------------
ROM:6FB9
ROM:6FB9	     loc_6FB9:					     ; CODE XREF: ROM:6F85j
ROM:6FB9 4C 26 6F		     JMP     guard_climber_check_for_gold
ROM:6FBC	     ; ---------------------------------------------------------------------------
ROM:6FBC
ROM:6FBC	     guard_move_left:
ROM:6FBC A4 13			     LDY     curr_guard_row
ROM:6FBE B9 05 1C		     LDA     lsb_row_addr,Y
ROM:6FC1 85 06			     STA     lsb_row_level_data_addr
ROM:6FC3 85 08			     STA     byte_8
ROM:6FC5 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:6FC8 85 07			     STA     msb_row_level_data_addr
ROM:6FCA B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:6FCD 85 09			     STA     byte_9		     ; setup tilemap addr
ROM:6FCF A6 17			     LDX     curr_guard_x_offset
ROM:6FD1 E0 03			     CPX     #3
ROM:6FD3 B0 1C			     BCS     guard_can_move_left
ROM:6FD5 A4 12			     LDY     curr_guard_col	     ; left-most column?
ROM:6FD7 F0 15			     BEQ     guard_cant_move_left    ; yes, skip
ROM:6FD9 88			     DEY			     ; column to left
ROM:6FDA B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:6FDC C9 08			     CMP     #8			     ; guard?
ROM:6FDE F0 0E			     BEQ     guard_cant_move_left    ; yes, skip
ROM:6FE0 C9 02			     CMP     #2			     ; solid?
ROM:6FE2 F0 0A			     BEQ     guard_cant_move_left    ; yes, skip
ROM:6FE4 C9 01			     CMP     #1			     ; brick?
ROM:6FE6 F0 06			     BEQ     guard_cant_move_left    ; yes, skip
ROM:6FE8 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:6FEA C9 05			     CMP     #5			     ; fall-thru?
ROM:6FEC D0 03			     BNE     guard_can_move_left     ; no, skip
ROM:6FEE
ROM:6FEE	     guard_cant_move_left:			     ; CODE XREF: ROM:6FD7j
ROM:6FEE							     ; ROM:6FDEj ...
ROM:6FEE 4C A8 75		     JMP     copy_curr_to_guard
ROM:6FF1	     ; ---------------------------------------------------------------------------
ROM:6FF1
ROM:6FF1	     guard_can_move_left:			     ; CODE XREF: ROM:6FD3j
ROM:6FF1							     ; ROM:6FECj
ROM:6FF1 20 DF 74		     JSR     calc_guard_xychar
ROM:6FF4 20 36 83		     JSR     wipe_char		     ; remove guard from screen
ROM:6FF7 20 95 75		     JSR     adjust_guard_y_offset
ROM:6FFA A9 FF			     LDA     #$FF
ROM:6FFC 85 15			     STA     curr_guard_dir	     ; set dir=left
ROM:6FFE C6 17			     DEC     curr_guard_x_offset
ROM:7000 10 24			     BPL     loc_7026
ROM:7002 20 3E 75		     JSR     check_guard_drop_gold
ROM:7005 A4 12			     LDY     curr_guard_col
ROM:7007 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:7009 C9 01			     CMP     #1			     ; brick?
ROM:700B D0 02			     BNE     loc_700F		     ; no, skip
ROM:700D A9 00			     LDA     #0			     ; space
ROM:700F
ROM:700F	     loc_700F:					     ; CODE XREF: ROM:700Bj
ROM:700F 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:7011 C6 12			     DEC     curr_guard_col
ROM:7013 88			     DEY
ROM:7014 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (left)
ROM:7016 C9 09			     CMP     #9			     ; player?
ROM:7018 D0 02			     BNE     loc_701C		     ; no, skip
ROM:701A 46 9A			     LSR     level_active	     ; kill player
ROM:701C
ROM:701C	     loc_701C:					     ; CODE XREF: ROM:7018j
ROM:701C A9 08			     LDA     #8			     ; guard
ROM:701E 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:7020 A9 04			     LDA     #4
ROM:7022 85 17			     STA     curr_guard_x_offset
ROM:7024 D0 03			     BNE     loc_7029		     ; always
ROM:7026
ROM:7026	     loc_7026:					     ; CODE XREF: ROM:7000j
ROM:7026 20 F7 74		     JSR     check_guard_pickup_gold
ROM:7029
ROM:7029	     loc_7029:					     ; CODE XREF: ROM:7024j
ROM:7029 A4 12			     LDY     curr_guard_col
ROM:702B B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:702D C9 04			     CMP     #4			     ; rope?
ROM:702F F0 06			     BEQ     loc_7037		     ; yes, skip
ROM:7031 A9 00			     LDA     #0			     ; =$08 1st	guard sprite (running left)
ROM:7033 A2 02			     LDX     #2			     ; =$2C last guard sprite (running left)
ROM:7035 D0 04			     BNE     loc_703B		     ; always
ROM:7037
ROM:7037	     loc_7037:					     ; CODE XREF: ROM:702Fj
ROM:7037 A9 03			     LDA     #3			     ; =$30 1st	guard sprite (swinging left)
ROM:7039 A2 05			     LDX     #5			     ; =$32 last guard sprite (swinging	left)
ROM:703B
ROM:703B	     loc_703B:					     ; CODE XREF: ROM:7035j
ROM:703B 20 74 75		     JSR     update_guard_sprite_index
ROM:703E 20 DF 74		     JSR     calc_guard_xychar
ROM:7041 20 A7 83		     JSR     display_transparent_char
ROM:7044 4C A8 75		     JMP     copy_curr_to_guard
ROM:7047	     ; ---------------------------------------------------------------------------
ROM:7047
ROM:7047	     guard_move_right:
ROM:7047 A4 13			     LDY     curr_guard_row
ROM:7049 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:704C 85 06			     STA     lsb_row_level_data_addr
ROM:704E 85 08			     STA     byte_8
ROM:7050 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:7053 85 07			     STA     msb_row_level_data_addr
ROM:7055 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7058 85 09			     STA     byte_9		     ; setup tilemap address
ROM:705A A6 17			     LDX     curr_guard_x_offset
ROM:705C E0 02			     CPX     #2
ROM:705E 90 1E			     BCC     guard_can_move_right
ROM:7060 A4 12			     LDY     curr_guard_col
ROM:7062 C0 1B			     CPY     #27		     ; right-most column?
ROM:7064 F0 15			     BEQ     guard_cant_move_right   ; yes, exit
ROM:7066 C8			     INY			     ; next column
ROM:7067 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (right)
ROM:7069 C9 08			     CMP     #8			     ; guard?
ROM:706B F0 0E			     BEQ     guard_cant_move_right   ; yes, skip
ROM:706D C9 02			     CMP     #2			     ; solid?
ROM:706F F0 0A			     BEQ     guard_cant_move_right   ; yes, skip
ROM:7071 C9 01			     CMP     #1			     ; brick?
ROM:7073 F0 06			     BEQ     guard_cant_move_right   ; yes, skip
ROM:7075 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:7077 C9 05			     CMP     #5			     ; fall-thru?
ROM:7079 D0 03			     BNE     guard_can_move_right    ; no, go
ROM:707B
ROM:707B	     guard_cant_move_right:			     ; CODE XREF: ROM:7064j
ROM:707B							     ; ROM:706Bj ...
ROM:707B 4C A8 75		     JMP     copy_curr_to_guard
ROM:707E	     ; ---------------------------------------------------------------------------
ROM:707E
ROM:707E	     guard_can_move_right:			     ; CODE XREF: ROM:705Ej
ROM:707E							     ; ROM:7079j
ROM:707E 20 DF 74		     JSR     calc_guard_xychar
ROM:7081 20 36 83		     JSR     wipe_char
ROM:7084 20 95 75		     JSR     adjust_guard_y_offset
ROM:7087 A9 01			     LDA     #1
ROM:7089 85 15			     STA     curr_guard_dir
ROM:708B E6 17			     INC     curr_guard_x_offset
ROM:708D A5 17			     LDA     curr_guard_x_offset
ROM:708F C9 05			     CMP     #5
ROM:7091 90 24			     BCC     loc_70B7
ROM:7093 20 3E 75		     JSR     check_guard_drop_gold
ROM:7096 A4 12			     LDY     curr_guard_col
ROM:7098 B1 08			     LDA     (byte_8),Y
ROM:709A C9 01			     CMP     #1
ROM:709C D0 02			     BNE     loc_70A0
ROM:709E A9 00			     LDA     #0
ROM:70A0
ROM:70A0	     loc_70A0:					     ; CODE XREF: ROM:709Cj
ROM:70A0 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:70A2 E6 12			     INC     curr_guard_col
ROM:70A4 C8			     INY			     ; next row
ROM:70A5 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:70A7 C9 09			     CMP     #9			     ; player?
ROM:70A9 D0 02			     BNE     loc_70AD
ROM:70AB 46 9A			     LSR     level_active
ROM:70AD
ROM:70AD	     loc_70AD:					     ; CODE XREF: ROM:70A9j
ROM:70AD A9 08			     LDA     #8
ROM:70AF 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:70B1 A9 00			     LDA     #0
ROM:70B3 85 17			     STA     curr_guard_x_offset
ROM:70B5 F0 03			     BEQ     loc_70BA
ROM:70B7
ROM:70B7	     loc_70B7:					     ; CODE XREF: ROM:7091j
ROM:70B7 20 F7 74		     JSR     check_guard_pickup_gold
ROM:70BA
ROM:70BA	     loc_70BA:					     ; CODE XREF: ROM:70B5j
ROM:70BA A4 12			     LDY     curr_guard_col
ROM:70BC B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:70BE C9 04			     CMP     #4			     ; rope?
ROM:70C0 F0 06			     BEQ     loc_70C8		     ; yes, skip
ROM:70C2 A9 07			     LDA     #7
ROM:70C4 A2 09			     LDX     #9
ROM:70C6 D0 04			     BNE     loc_70CC
ROM:70C8
ROM:70C8	     loc_70C8:					     ; CODE XREF: ROM:70C0j
ROM:70C8 A9 0A			     LDA     #$A
ROM:70CA A2 0C			     LDX     #$C
ROM:70CC
ROM:70CC	     loc_70CC:					     ; CODE XREF: ROM:70C6j
ROM:70CC 20 74 75		     JSR     update_guard_sprite_index
ROM:70CF 20 DF 74		     JSR     calc_guard_xychar
ROM:70D2 20 A7 83		     JSR     display_transparent_char
ROM:70D5 4C A8 75		     JMP     copy_curr_to_guard
ROM:70D8
ROM:70D8	     ; =============== S U B R O U T I N E =======================================
ROM:70D8
ROM:70D8
ROM:70D8	     guard_ai:					     ; CODE XREF: ROM:6E89p
ROM:70D8 86 55			     STX     guard_ai_col	     ; col
ROM:70DA 84 56			     STY     guard_ai_row	     ; row
ROM:70DC B9 05 1C		     LDA     lsb_row_addr,Y
ROM:70DF 85 08			     STA     byte_8
ROM:70E1 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:70E4 85 09			     STA     byte_9		     ; setup tilemap addr
ROM:70E6 A4 55			     LDY     guard_ai_col	     ; col
ROM:70E8 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:70EA C9 01			     CMP     #1			     ; brick (ie. trapped)?
ROM:70EC D0 09			     BNE     loc_70F7		     ; no, skip
ROM:70EE A5 16			     LDA     curr_guard_state
ROM:70F0 F0 05			     BEQ     loc_70F7
ROM:70F2 30 03			     BMI     loc_70F7
ROM:70F4 A9 03			     LDA     #3			     ; move guard UP
ROM:70F6 60			     RTS
ROM:70F7	     ; ---------------------------------------------------------------------------
ROM:70F7
ROM:70F7	     loc_70F7:					     ; CODE XREF: guard_ai+14j
ROM:70F7							     ; guard_ai+18j ...
ROM:70F7 A4 56			     LDY     guard_ai_row	     ; row
ROM:70F9 C4 01			     CPY     current_row	     ; player row
ROM:70FB F0 03			     BEQ     same_row		     ; same? yes, continue
ROM:70FD 4C 86 71		     JMP     different_row
ROM:7100	     ; ---------------------------------------------------------------------------
ROM:7100
ROM:7100	     same_row:					     ; CODE XREF: guard_ai+23j
ROM:7100 A4 55			     LDY     guard_ai_col	     ; col
ROM:7102 84 57			     STY     target_col
ROM:7104 C4 00			     CPY     current_col	     ; guard to	the right?
ROM:7106 B0 3F			     BCS     guard_right_of_player   ; yes, go
ROM:7108
ROM:7108	     guard_left_of_player:			     ; CODE XREF: guard_ai+6Aj
ROM:7108 E6 57			     INC     target_col		     ; column to right
ROM:710A A4 56			     LDY     guard_ai_row
ROM:710C B9 05 1C		     LDA     lsb_row_addr,Y
ROM:710F 85 08			     STA     byte_8
ROM:7111 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7114 85 09			     STA     byte_9		     ; setup tilemap address
ROM:7116 A4 57			     LDY     target_col
ROM:7118 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (right)
ROM:711A C9 03			     CMP     #3			     ; ladder?
ROM:711C F0 20			     BEQ     try_next_col_right	     ; yes, go
ROM:711E C9 04			     CMP     #4			     ; rope?
ROM:7120 F0 1C			     BEQ     try_next_col_right	     ; yes, go
ROM:7122 A4 56			     LDY     guard_ai_row
ROM:7124 C0 0F			     CPY     #15		     ; bottom row?
ROM:7126 F0 16			     BEQ     try_next_col_right	     ; yes, go
ROM:7128 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:712B 85 08			     STA     byte_8
ROM:712D B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:7130 85 09			     STA     byte_9		     ; setup tilmap address (row below)
ROM:7132 A4 57			     LDY     target_col
ROM:7134 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below right)
ROM:7136 C9 00			     CMP     #0			     ; space?
ROM:7138 F0 4C			     BEQ     different_row	     ; yes, go
ROM:713A C9 05			     CMP     #5			     ; fall-thru?
ROM:713C F0 48			     BEQ     different_row	     ; yes, go
ROM:713E
ROM:713E	     try_next_col_right:			     ; CODE XREF: guard_ai+44j
ROM:713E							     ; guard_ai+48j ...
ROM:713E A4 57			     LDY     target_col
ROM:7140 C4 00			     CPY     current_col
ROM:7142 D0 C4			     BNE     guard_left_of_player    ; no, try next column
ROM:7144 A9 02			     LDA     #2			     ; RIGHT
ROM:7146 60			     RTS
ROM:7147	     ; ---------------------------------------------------------------------------
ROM:7147
ROM:7147	     guard_right_of_player:			     ; CODE XREF: guard_ai+2Ej
ROM:7147							     ; guard_ai+A9j
ROM:7147 C6 57			     DEC     target_col		     ; column to left
ROM:7149 A4 56			     LDY     guard_ai_row
ROM:714B B9 05 1C		     LDA     lsb_row_addr,Y
ROM:714E 85 08			     STA     byte_8
ROM:7150 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7153 85 09			     STA     byte_9		     ; setup tilemap address (left)
ROM:7155 A4 57			     LDY     target_col
ROM:7157 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (left)
ROM:7159 C9 03			     CMP     #3			     ; ladder?
ROM:715B F0 20			     BEQ     try_next_col_left	     ; yes, go
ROM:715D C9 04			     CMP     #4			     ; rope?
ROM:715F F0 1C			     BEQ     try_next_col_left	     ; yes, go
ROM:7161 A4 56			     LDY     guard_ai_row
ROM:7163 C0 0F			     CPY     #15		     ; bottom row?
ROM:7165 F0 16			     BEQ     try_next_col_left	     ; yes, go
ROM:7167 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:716A 85 08			     STA     byte_8
ROM:716C B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:716F 85 09			     STA     byte_9		     ; setup tilemap address (below)
ROM:7171 A4 57			     LDY     target_col
ROM:7173 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below, left)
ROM:7175 C9 00			     CMP     #0			     ; space?
ROM:7177 F0 0D			     BEQ     different_row	     ; yes, go
ROM:7179 C9 05			     CMP     #5			     ; fall-thru?
ROM:717B F0 09			     BEQ     different_row	     ; yes, go
ROM:717D
ROM:717D	     try_next_col_left:				     ; CODE XREF: guard_ai+83j
ROM:717D							     ; guard_ai+87j ...
ROM:717D A4 57			     LDY     target_col
ROM:717F C4 00			     CPY     current_col	     ; same as player?
ROM:7181 D0 C4			     BNE     guard_right_of_player   ; no, try next column
ROM:7183 A9 01			     LDA     #1			     ; LEFT
ROM:7185 60			     RTS
ROM:7186	     ; ---------------------------------------------------------------------------
ROM:7186
ROM:7186	     different_row:				     ; CODE XREF: guard_ai+25j
ROM:7186							     ; guard_ai+60j ...
ROM:7186 A9 00			     LDA     #0
ROM:7188 85 58			     STA     guard_ai_dir	     ; no direction
ROM:718A A9 FF			     LDA     #$FF
ROM:718C 85 59			     STA     guard_ai_best_delta
ROM:718E A6 55			     LDX     guard_ai_col
ROM:7190 A4 56			     LDY     guard_ai_row
ROM:7192 20 3E 74		     JSR     find_farthest_left_right ;	...on this row?
ROM:7195 20 75 72		     JSR     guard_ai_up_down
ROM:7198 20 A2 71		     JSR     guard_ai_left
ROM:719B 20 0C 72		     JSR     guard_ai_right
ROM:719E A5 58			     LDA     guard_ai_dir
ROM:71A0 60			     RTS
ROM:71A0	     ; End of function guard_ai
ROM:71A0
ROM:71A1	     ; ---------------------------------------------------------------------------
ROM:71A1	     ; START OF	FUNCTION CHUNK FOR guard_ai_left
ROM:71A1
ROM:71A1	     locret_71A1:				     ; CODE XREF: guard_ai_left+4j
ROM:71A1 60			     RTS
ROM:71A1	     ; END OF FUNCTION CHUNK FOR guard_ai_left
ROM:71A2
ROM:71A2	     ; =============== S U B R O U T I N E =======================================
ROM:71A2
ROM:71A2
ROM:71A2	     guard_ai_left:				     ; CODE XREF: guard_ai+C0p
ROM:71A2							     ; guard_ai_left+66j
ROM:71A2
ROM:71A2	     ; FUNCTION	CHUNK AT ROM:71A1 SIZE 00000001	BYTES
ROM:71A2
ROM:71A2 A4 5A			     LDY     farthest_left	     ; left-most column	guard can get to on this row
ROM:71A4 C4 55			     CPY     guard_ai_col	     ; there now?
ROM:71A6 F0 F9			     BEQ     locret_71A1	     ; yes, exit
ROM:71A8 A4 56			     LDY     guard_ai_row
ROM:71AA C0 0F			     CPY     #15		     ; bottom row?
ROM:71AC F0 2C			     BEQ     loc_71DA		     ; yes, go (no good)
ROM:71AE B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:71B1 85 08			     STA     byte_8
ROM:71B3 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:71B6 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:71B8 A4 5A			     LDY     farthest_left
ROM:71BA B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below farthest left)
ROM:71BC C9 01			     CMP     #1			     ; brick?
ROM:71BE F0 1A			     BEQ     loc_71DA		     ; yes, go
ROM:71C0 C9 02			     CMP     #2			     ; solid?
ROM:71C2 F0 16			     BEQ     loc_71DA		     ; yes, go
ROM:71C4 A6 5A			     LDX     farthest_left
ROM:71C6 A4 56			     LDY     guard_ai_row
ROM:71C8 20 9D 73		     JSR     find_farthest_down
ROM:71CB A6 5A			     LDX     farthest_left
ROM:71CD 20 D4 72		     JSR     calc_row_col_delta
ROM:71D0 C5 59			     CMP     guard_ai_best_delta
ROM:71D2 B0 06			     BCS     loc_71DA
ROM:71D4 85 59			     STA     guard_ai_best_delta
ROM:71D6 A9 01			     LDA     #1			     ; LEFT
ROM:71D8 85 58			     STA     guard_ai_dir
ROM:71DA
ROM:71DA	     loc_71DA:					     ; CODE XREF: guard_ai_left+Aj
ROM:71DA							     ; guard_ai_left+1Cj ...
ROM:71DA A4 56			     LDY     guard_ai_row	     ; top row?
ROM:71DC F0 28			     BEQ     loc_7206		     ; yes, go
ROM:71DE B9 05 1C		     LDA     lsb_row_addr,Y
ROM:71E1 85 08			     STA     byte_8
ROM:71E3 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:71E6 85 09			     STA     byte_9		     ; setup tilemap address
ROM:71E8 A4 5A			     LDY     farthest_left
ROM:71EA B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:71EC C9 03			     CMP     #3			     ; ladder?
ROM:71EE D0 16			     BNE     loc_7206		     ; no, go
ROM:71F0 A4 56			     LDY     guard_ai_row
ROM:71F2 A6 5A			     LDX     farthest_left
ROM:71F4 20 00 73		     JSR     find_farthest_up
ROM:71F7 A6 5A			     LDX     farthest_left
ROM:71F9 20 D4 72		     JSR     calc_row_col_delta
ROM:71FC C5 59			     CMP     guard_ai_best_delta
ROM:71FE B0 06			     BCS     loc_7206
ROM:7200 85 59			     STA     guard_ai_best_delta
ROM:7202 A9 01			     LDA     #1			     ; LEFT
ROM:7204 85 58			     STA     guard_ai_dir
ROM:7206
ROM:7206	     loc_7206:					     ; CODE XREF: guard_ai_left+3Aj
ROM:7206							     ; guard_ai_left+4Cj ...
ROM:7206 E6 5A			     INC     farthest_left
ROM:7208 4C A2 71		     JMP     guard_ai_left
ROM:7208	     ; End of function guard_ai_left
ROM:7208
ROM:720B	     ; ---------------------------------------------------------------------------
ROM:720B	     ; START OF	FUNCTION CHUNK FOR guard_ai_right
ROM:720B
ROM:720B	     locret_720B:				     ; CODE XREF: guard_ai_right+4j
ROM:720B 60			     RTS
ROM:720B	     ; END OF FUNCTION CHUNK FOR guard_ai_right
ROM:720C
ROM:720C	     ; =============== S U B R O U T I N E =======================================
ROM:720C
ROM:720C
ROM:720C	     guard_ai_right:				     ; CODE XREF: guard_ai+C3p
ROM:720C							     ; guard_ai_right+66j
ROM:720C
ROM:720C	     ; FUNCTION	CHUNK AT ROM:720B SIZE 00000001	BYTES
ROM:720C
ROM:720C A4 5B			     LDY     farthest_right
ROM:720E C4 55			     CPY     guard_ai_col	     ; left-most column?
ROM:7210 F0 F9			     BEQ     locret_720B	     ; yes, exit
ROM:7212 A4 56			     LDY     guard_ai_row
ROM:7214 C0 0F			     CPY     #15		     ; bottom row?
ROM:7216 F0 2C			     BEQ     loc_7244		     ; yes, go
ROM:7218 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:721B 85 08			     STA     byte_8
ROM:721D B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:7220 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:7222 A4 5B			     LDY     farthest_right
ROM:7224 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below)
ROM:7226 C9 01			     CMP     #1			     ; brick?
ROM:7228 F0 1A			     BEQ     loc_7244		     ; yes, go
ROM:722A C9 02			     CMP     #2			     ; solid?
ROM:722C F0 16			     BEQ     loc_7244		     ; yes, go
ROM:722E A6 5B			     LDX     farthest_right
ROM:7230 A4 56			     LDY     guard_ai_row
ROM:7232 20 9D 73		     JSR     find_farthest_down
ROM:7235 A6 5B			     LDX     farthest_right
ROM:7237 20 D4 72		     JSR     calc_row_col_delta
ROM:723A C5 59			     CMP     guard_ai_best_delta
ROM:723C B0 06			     BCS     loc_7244
ROM:723E 85 59			     STA     guard_ai_best_delta
ROM:7240 A9 02			     LDA     #2			     ; RIGHT
ROM:7242 85 58			     STA     guard_ai_dir
ROM:7244
ROM:7244	     loc_7244:					     ; CODE XREF: guard_ai_right+Aj
ROM:7244							     ; guard_ai_right+1Cj ...
ROM:7244 A4 56			     LDY     guard_ai_row	     ; top row?
ROM:7246 F0 28			     BEQ     loc_7270		     ; yes, go
ROM:7248 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:724B 85 08			     STA     byte_8
ROM:724D B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7250 85 09			     STA     byte_9		     ; setup tilemap address
ROM:7252 A4 5B			     LDY     farthest_right
ROM:7254 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap address
ROM:7256 C9 03			     CMP     #3			     ; ladder?
ROM:7258 D0 16			     BNE     loc_7270		     ; no, go
ROM:725A A4 56			     LDY     guard_ai_row
ROM:725C A6 5B			     LDX     farthest_right
ROM:725E 20 00 73		     JSR     find_farthest_up
ROM:7261 A6 5B			     LDX     farthest_right
ROM:7263 20 D4 72		     JSR     calc_row_col_delta
ROM:7266 C5 59			     CMP     guard_ai_best_delta
ROM:7268 B0 06			     BCS     loc_7270
ROM:726A 85 59			     STA     guard_ai_best_delta
ROM:726C A9 02			     LDA     #2			     ; RIGHT
ROM:726E 85 58			     STA     guard_ai_dir
ROM:7270
ROM:7270	     loc_7270:					     ; CODE XREF: guard_ai_right+3Aj
ROM:7270							     ; guard_ai_right+4Cj ...
ROM:7270 C6 5B			     DEC     farthest_right
ROM:7272 4C 0C 72		     JMP     guard_ai_right
ROM:7272	     ; End of function guard_ai_right
ROM:7272
ROM:7275
ROM:7275	     ; =============== S U B R O U T I N E =======================================
ROM:7275
ROM:7275
ROM:7275	     guard_ai_up_down:				     ; CODE XREF: guard_ai+BDp
ROM:7275 A4 56			     LDY     guard_ai_row
ROM:7277 C0 0F			     CPY     #15		     ; bottom row?
ROM:7279 F0 2C			     BEQ     guard_ai_cant_go_down   ; yes, go
ROM:727B B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:727E 85 08			     STA     byte_8
ROM:7280 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:7283 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:7285 A4 55			     LDY     guard_ai_col
ROM:7287 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below)
ROM:7289 C9 01			     CMP     #1			     ; brick?
ROM:728B F0 1A			     BEQ     guard_ai_cant_go_down   ; yes, go
ROM:728D C9 02			     CMP     #2			     ; solid?
ROM:728F F0 16			     BEQ     guard_ai_cant_go_down   ; yes, go
ROM:7291 A6 55			     LDX     guard_ai_col
ROM:7293 A4 56			     LDY     guard_ai_row
ROM:7295 20 9D 73		     JSR     find_farthest_down	     ; A=farthest row (down)
ROM:7298 A6 55			     LDX     guard_ai_col
ROM:729A 20 D4 72		     JSR     calc_row_col_delta
ROM:729D C5 59			     CMP     guard_ai_best_delta
ROM:729F B0 06			     BCS     guard_ai_cant_go_down
ROM:72A1 85 59			     STA     guard_ai_best_delta
ROM:72A3 A9 04			     LDA     #4			     ; DOWN
ROM:72A5 85 58			     STA     guard_ai_dir
ROM:72A7
ROM:72A7	     guard_ai_cant_go_down:			     ; CODE XREF: guard_ai_up_down+4j
ROM:72A7							     ; guard_ai_up_down+16j ...
ROM:72A7 A4 56			     LDY     guard_ai_row	     ; top row?
ROM:72A9 F0 28			     BEQ     locret_72D3	     ; yes, exit
ROM:72AB B9 05 1C		     LDA     lsb_row_addr,Y
ROM:72AE 85 08			     STA     byte_8
ROM:72B0 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:72B3 85 09			     STA     byte_9		     ; setup tilemap address
ROM:72B5 A4 55			     LDY     guard_ai_col
ROM:72B7 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:72B9 C9 03			     CMP     #3			     ; ladder?
ROM:72BB D0 16			     BNE     locret_72D3	     ; no, exit
ROM:72BD A6 55			     LDX     guard_ai_col
ROM:72BF A4 56			     LDY     guard_ai_row
ROM:72C1 20 00 73		     JSR     find_farthest_up	     ; A=farthest row (up)
ROM:72C4 A6 55			     LDX     guard_ai_col
ROM:72C6 20 D4 72		     JSR     calc_row_col_delta
ROM:72C9 C5 59			     CMP     guard_ai_best_delta
ROM:72CB B0 06			     BCS     locret_72D3
ROM:72CD 85 59			     STA     guard_ai_best_delta
ROM:72CF A9 03			     LDA     #3			     ; UP
ROM:72D1 85 58			     STA     guard_ai_dir
ROM:72D3
ROM:72D3	     locret_72D3:				     ; CODE XREF: guard_ai_up_down+34j
ROM:72D3							     ; guard_ai_up_down+46j ...
ROM:72D3 60			     RTS
ROM:72D3	     ; End of function guard_ai_up_down
ROM:72D3
ROM:72D4
ROM:72D4	     ; =============== S U B R O U T I N E =======================================
ROM:72D4
ROM:72D4
ROM:72D4	     calc_row_col_delta:			     ; CODE XREF: guard_ai_left+2Bp
ROM:72D4							     ; guard_ai_left+57p ...
ROM:72D4 85 1A			     STA     nibble_cnt		     ; A=farthest down,	X=col
ROM:72D6 C5 01			     CMP     current_row	     ; same as player?
ROM:72D8 D0 11			     BNE     calc_row_delta	     ; no, skip
ROM:72DA E4 12			     CPX     curr_guard_col	     ; compare column
ROM:72DC 90 05			     BCC     loc_72E3		     ; to the left
ROM:72DE 8A			     TXA			     ; X=col
ROM:72DF 38			     SEC
ROM:72E0 E5 12			     SBC     curr_guard_col	     ; delta col
ROM:72E2 60			     RTS
ROM:72E3	     ; ---------------------------------------------------------------------------
ROM:72E3
ROM:72E3	     loc_72E3:					     ; CODE XREF: calc_row_col_delta+8j
ROM:72E3 86 1A			     STX     nibble_cnt		     ; guard_ai_col
ROM:72E5 A5 12			     LDA     curr_guard_col
ROM:72E7 38			     SEC
ROM:72E8 E5 1A			     SBC     nibble_cnt		     ; delta col
ROM:72EA 60			     RTS
ROM:72EB	     ; ---------------------------------------------------------------------------
ROM:72EB
ROM:72EB	     calc_row_delta:				     ; CODE XREF: calc_row_col_delta+4j
ROM:72EB 90 07			     BCC     loc_72F4
ROM:72ED 38			     SEC
ROM:72EE E5 01			     SBC     current_row	     ; delta row
ROM:72F0 18			     CLC
ROM:72F1 69 C8			     ADC     #200		     ; weighting
ROM:72F3 60			     RTS
ROM:72F4	     ; ---------------------------------------------------------------------------
ROM:72F4
ROM:72F4	     loc_72F4:					     ; CODE XREF: calc_row_col_delta:calc_row_deltaj
ROM:72F4 A5 01			     LDA     current_row
ROM:72F6 38			     SEC
ROM:72F7 E5 1A			     SBC     nibble_cnt		     ; delta row
ROM:72F9 18			     CLC
ROM:72FA 69 64			     ADC     #100		     ; weighting
ROM:72FC 60			     RTS
ROM:72FC	     ; End of function calc_row_col_delta
ROM:72FC
ROM:72FD	     ; ---------------------------------------------------------------------------
ROM:72FD	     ; START OF	FUNCTION CHUNK FOR find_farthest_up
ROM:72FD
ROM:72FD	     loc_72FD:					     ; CODE XREF: find_farthest_up+14j
ROM:72FD A5 5E			     LDA     byte_5E
ROM:72FF 60			     RTS
ROM:72FF	     ; END OF FUNCTION CHUNK FOR find_farthest_up
ROM:7300
ROM:7300	     ; =============== S U B R O U T I N E =======================================
ROM:7300
ROM:7300
ROM:7300	     find_farthest_up:				     ; CODE XREF: guard_ai_left+52p
ROM:7300							     ; guard_ai_right+52p ...
ROM:7300
ROM:7300	     ; FUNCTION	CHUNK AT ROM:72FD SIZE 00000003	BYTES
ROM:7300
ROM:7300 84 5E			     STY     byte_5E		     ; row
ROM:7302 86 5D			     STX     byte_5D		     ; col
ROM:7304
ROM:7304	     loc_7304:					     ; CODE XREF: find_farthest_up+92j
ROM:7304 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7307 85 08			     STA     byte_8
ROM:7309 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:730C 85 09			     STA     byte_9		     ; setup tilemap address
ROM:730E A4 5D			     LDY     byte_5D		     ; col
ROM:7310 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:7312 C9 03			     CMP     #3			     ; ladder?
ROM:7314 D0 E7			     BNE     loc_72FD		     ; no, exit
ROM:7316 C6 5E			     DEC     byte_5E		     ; can get to row above
ROM:7318 A4 5D			     LDY     byte_5D		     ; col
ROM:731A F0 2E			     BEQ     up_try_right	     ; left-most column? yes, go
ROM:731C 88			     DEY			     ; column to left
ROM:731D B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (left)
ROM:731F C9 01			     CMP     #1			     ; brick?
ROM:7321 F0 1D			     BEQ     loc_7340		     ; yes, go
ROM:7323 C9 02			     CMP     #2			     ; solid?
ROM:7325 F0 19			     BEQ     loc_7340		     ; yes, go
ROM:7327 C9 03			     CMP     #3			     ; ladder?
ROM:7329 F0 15			     BEQ     loc_7340		     ; yes, go
ROM:732B A4 5E			     LDY     byte_5E		     ; row (above)
ROM:732D B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7330 85 08			     STA     byte_8
ROM:7332 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7335 85 09			     STA     byte_9		     ; setup tilemap address (above)
ROM:7337 A4 5D			     LDY     byte_5D		     ; col
ROM:7339 88			     DEY			     ; column to left
ROM:733A B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (above, left)
ROM:733C C9 04			     CMP     #4			     ; rope?
ROM:733E D0 0A			     BNE     up_try_right	     ; no, go
ROM:7340
ROM:7340	     loc_7340:					     ; CODE XREF: find_farthest_up+21j
ROM:7340							     ; find_farthest_up+25j ...
ROM:7340 A4 5E			     LDY     byte_5E		     ; row
ROM:7342 84 5C			     STY     farthest_updown_plyr_row
ROM:7344 C4 01			     CPY     current_row	     ; compare with player
ROM:7346 90 4F			     BCC     farthest_up_is_player_row ; above player -	exit
ROM:7348 F0 4D			     BEQ     farthest_up_is_player_row ; same row as player - exit
ROM:734A
ROM:734A	     up_try_right:				     ; CODE XREF: find_farthest_up+1Aj
ROM:734A							     ; find_farthest_up+3Ej
ROM:734A A4 5D			     LDY     byte_5D		     ; col
ROM:734C C0 1B			     CPY     #27		     ; right-most?
ROM:734E F0 3C			     BEQ     try_next_row_up	     ; yes, go
ROM:7350 A4 5E			     LDY     byte_5E		     ; row (above)
ROM:7352 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:7355 85 08			     STA     byte_8
ROM:7357 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:735A 85 09			     STA     byte_9		     ; setup tilemap address
ROM:735C A4 5D			     LDY     byte_5D		     ; col
ROM:735E C8			     INY			     ; column to right
ROM:735F B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (right)
ROM:7361 C9 01			     CMP     #1			     ; brick?
ROM:7363 F0 1D			     BEQ     loc_7382		     ; yes, go
ROM:7365 C9 02			     CMP     #2			     ; solid?
ROM:7367 F0 19			     BEQ     loc_7382		     ; yes, go
ROM:7369 C9 03			     CMP     #3			     ; ladder?
ROM:736B F0 15			     BEQ     loc_7382		     ; yes, go
ROM:736D A4 5E			     LDY     byte_5E		     ; row
ROM:736F B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7372 85 08			     STA     byte_8
ROM:7374 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7377 85 09			     STA     byte_9		     ; setup tilemap address (row above)
ROM:7379 A4 5D			     LDY     byte_5D		     ; col
ROM:737B C8			     INY			     ; column to right
ROM:737C B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (right, above)
ROM:737E C9 04			     CMP     #4			     ; rope?
ROM:7380 D0 0A			     BNE     try_next_row_up	     ; no, go
ROM:7382
ROM:7382	     loc_7382:					     ; CODE XREF: find_farthest_up+63j
ROM:7382							     ; find_farthest_up+67j ...
ROM:7382 A4 5E			     LDY     byte_5E		     ; row
ROM:7384 84 5C			     STY     farthest_updown_plyr_row
ROM:7386 C4 01			     CPY     current_row	     ; compare with player
ROM:7388 90 0D			     BCC     farthest_up_is_player_row ; above player -	exit
ROM:738A F0 0B			     BEQ     farthest_up_is_player_row ; same row as player - exit
ROM:738C
ROM:738C	     try_next_row_up:				     ; CODE XREF: find_farthest_up+4Ej
ROM:738C							     ; find_farthest_up+80j
ROM:738C A4 5E			     LDY     byte_5E		     ; row
ROM:738E C0 01			     CPY     #1			     ; top row?
ROM:7390 90 03			     BCC     loc_7395		     ; yes, exit
ROM:7392 4C 04 73		     JMP     loc_7304		     ; loop
ROM:7395	     ; ---------------------------------------------------------------------------
ROM:7395
ROM:7395	     loc_7395:					     ; CODE XREF: find_farthest_up+90j
ROM:7395 98			     TYA			     ; row
ROM:7396 60			     RTS
ROM:7397	     ; ---------------------------------------------------------------------------
ROM:7397
ROM:7397	     farthest_up_is_player_row:			     ; CODE XREF: find_farthest_up+46j
ROM:7397							     ; find_farthest_up+48j ...
ROM:7397 A5 5C			     LDA     farthest_updown_plyr_row
ROM:7399 60			     RTS
ROM:7399	     ; End of function find_farthest_up
ROM:7399
ROM:739A	     ; ---------------------------------------------------------------------------
ROM:739A	     ; START OF	FUNCTION CHUNK FOR find_farthest_down
ROM:739A
ROM:739A	     loc_739A:					     ; CODE XREF: find_farthest_down+14j
ROM:739A							     ; find_farthest_down+18j
ROM:739A A5 5E			     LDA     byte_5E
ROM:739C 60			     RTS
ROM:739C	     ; END OF FUNCTION CHUNK FOR find_farthest_down
ROM:739D
ROM:739D	     ; =============== S U B R O U T I N E =======================================
ROM:739D
ROM:739D
ROM:739D	     find_farthest_down:			     ; CODE XREF: guard_ai_left+26p
ROM:739D							     ; guard_ai_right+26p ...
ROM:739D
ROM:739D	     ; FUNCTION	CHUNK AT ROM:739A SIZE 00000003	BYTES
ROM:739D
ROM:739D 84 5E			     STY     byte_5E		     ; store row
ROM:739F 86 5D			     STX     byte_5D		     ; store col
ROM:73A1
ROM:73A1	     loc_73A1:					     ; CODE XREF: find_farthest_down+98j
ROM:73A1 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:73A4 85 08			     STA     byte_8
ROM:73A6 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:73A9 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:73AB A4 5D			     LDY     byte_5D		     ; col
ROM:73AD B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:73AF C9 01			     CMP     #1			     ; brick?
ROM:73B1 F0 E7			     BEQ     loc_739A		     ; yes, exit
ROM:73B3 C9 02			     CMP     #2			     ; solid?
ROM:73B5 F0 E3			     BEQ     loc_739A		     ; yes, exit
ROM:73B7 A4 5E			     LDY     byte_5E		     ; row
ROM:73B9 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:73BC 85 08			     STA     byte_8
ROM:73BE B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:73C1 85 09			     STA     byte_9		     ; setup tilemap address
ROM:73C3 A4 5D			     LDY     byte_5D		     ; col
ROM:73C5 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:73C7 C9 00			     CMP     #0			     ; space (falling)?
ROM:73C9 F0 62			     BEQ     try_next_row_down	     ; yes, go
ROM:73CB C0 00			     CPY     #0			     ; (ladder or rope - can move left/right)
ROM:73CB							     ; left-most col?
ROM:73CD F0 2C			     BEQ     down_try_right	     ; yes, go
ROM:73CF 88			     DEY			     ; column to left
ROM:73D0 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (left)
ROM:73D2 C9 04			     CMP     #4			     ; rope?
ROM:73D4 F0 1D			     BEQ     loc_73F3		     ; yes, go
ROM:73D6 A4 5E			     LDY     byte_5E		     ; row
ROM:73D8 B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:73DB 85 08			     STA     byte_8
ROM:73DD B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:73E0 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:73E2 A4 5D			     LDY     byte_5D		     ; col
ROM:73E4 88			     DEY			     ; column to left
ROM:73E5 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below, left)
ROM:73E7 C9 01			     CMP     #1			     ; brick?
ROM:73E9 F0 08			     BEQ     loc_73F3		     ; yes, go
ROM:73EB C9 02			     CMP     #2			     ; solid?
ROM:73ED F0 04			     BEQ     loc_73F3		     ; yes, go
ROM:73EF C9 03			     CMP     #3			     ; ladder?
ROM:73F1 D0 08			     BNE     down_try_right	     ; no, go
ROM:73F3
ROM:73F3	     loc_73F3:					     ; CODE XREF: find_farthest_down+37j
ROM:73F3							     ; find_farthest_down+4Cj ...
ROM:73F3 A4 5E			     LDY     byte_5E		     ; row
ROM:73F5 84 5C			     STY     farthest_updown_plyr_row
ROM:73F7 C4 01			     CPY     current_row	     ; compare with player
ROM:73F9 B0 40			     BCS     farthest_down_is_player_row ; guard same row or below player, exit
ROM:73FB
ROM:73FB	     down_try_right:				     ; CODE XREF: find_farthest_down+30j
ROM:73FB							     ; find_farthest_down+54j
ROM:73FB A4 5D			     LDY     byte_5D		     ; col
ROM:73FD C0 1B			     CPY     #27		     ; right-most column?
ROM:73FF B0 2C			     BCS     try_next_row_down	     ; yes, go
ROM:7401 C8			     INY			     ; column to right
ROM:7402 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (row/below, right)
ROM:7404 C9 04			     CMP     #4			     ; rope?
ROM:7406 F0 1D			     BEQ     loc_7425		     ; yes, go
ROM:7408 A4 5E			     LDY     byte_5E		     ; row
ROM:740A B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:740D 85 08			     STA     byte_8
ROM:740F B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:7412 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:7414 A4 5D			     LDY     byte_5D		     ; col
ROM:7416 C8			     INY			     ; column to right
ROM:7417 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below, right)
ROM:7419 C9 01			     CMP     #1			     ; brick?
ROM:741B F0 08			     BEQ     loc_7425		     ; yes, go
ROM:741D C9 03			     CMP     #3			     ; ladder?
ROM:741F F0 04			     BEQ     loc_7425		     ; yes, go
ROM:7421 C9 02			     CMP     #2			     ; solid?
ROM:7423 D0 08			     BNE     try_next_row_down	     ; no, go
ROM:7425
ROM:7425	     loc_7425:					     ; CODE XREF: find_farthest_down+69j
ROM:7425							     ; find_farthest_down+7Ej ...
ROM:7425 A4 5E			     LDY     byte_5E		     ; row
ROM:7427 84 5C			     STY     farthest_updown_plyr_row
ROM:7429 C4 01			     CPY     current_row	     ; compare with player
ROM:742B B0 0E			     BCS     farthest_down_is_player_row ; guard same row or below player, exit
ROM:742D
ROM:742D	     try_next_row_down:				     ; CODE XREF: find_farthest_down+2Cj
ROM:742D							     ; find_farthest_down+62j ...
ROM:742D E6 5E			     INC     byte_5E		     ; next row	down
ROM:742F A4 5E			     LDY     byte_5E		     ; row
ROM:7431 C0 10			     CPY     #16		     ; past bottom of screen?
ROM:7433 B0 03			     BCS     loc_7438		     ; yes, exit
ROM:7435 4C A1 73		     JMP     loc_73A1		     ; loop
ROM:7438	     ; ---------------------------------------------------------------------------
ROM:7438
ROM:7438	     loc_7438:					     ; CODE XREF: find_farthest_down+96j
ROM:7438 A9 0F			     LDA     #15
ROM:743A 60			     RTS
ROM:743B	     ; ---------------------------------------------------------------------------
ROM:743B
ROM:743B	     farthest_down_is_player_row:		     ; CODE XREF: find_farthest_down+5Cj
ROM:743B							     ; find_farthest_down+8Ej
ROM:743B A5 5C			     LDA     farthest_updown_plyr_row
ROM:743D 60			     RTS
ROM:743D	     ; End of function find_farthest_down
ROM:743D
ROM:743E
ROM:743E	     ; =============== S U B R O U T I N E =======================================
ROM:743E
ROM:743E
ROM:743E	     find_farthest_left_right:			     ; CODE XREF: guard_ai+BAp
ROM:743E 86 5A			     STX     farthest_left	     ; X=col, y=row
ROM:743E							     ; save col
ROM:7440 86 5B			     STX     farthest_right	     ; save col	(again)
ROM:7442 84 1B			     STY     scanline		     ; save row
ROM:7444
ROM:7444	     find_farthest_left:			     ; CODE XREF: find_farthest_left_right+4Ej
ROM:7444 A5 5A			     LDA     farthest_left	     ; guard col
ROM:7446 F0 48			     BEQ     find_farthest_right     ; left-most col? yes, go
ROM:7448 A4 1B			     LDY     scanline		     ; guard row
ROM:744A B9 05 1C		     LDA     lsb_row_addr,Y
ROM:744D 85 06			     STA     lsb_row_level_data_addr
ROM:744F B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:7452 85 07			     STA     msb_row_level_data_addr ; setup tilemap address
ROM:7454 A4 5A			     LDY     farthest_left	     ; guard col
ROM:7456 88			     DEY			     ; column to left
ROM:7457 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:7459 C9 01			     CMP     #1			     ; brick?
ROM:745B F0 33			     BEQ     find_farthest_right     ; yes, go
ROM:745D C9 02			     CMP     #2			     ; solid?
ROM:745F F0 2F			     BEQ     find_farthest_right     ; yes, go
ROM:7461 C9 03			     CMP     #3			     ; ladder?
ROM:7463 F0 25			     BEQ     loc_748A		     ; yes, go
ROM:7465 C9 04			     CMP     #4			     ; rope?
ROM:7467 F0 21			     BEQ     loc_748A		     ; yes, go
ROM:7469 A4 1B			     LDY     scanline		     ; guard row
ROM:746B C0 0F			     CPY     #15		     ; bottom row?
ROM:746D F0 1B			     BEQ     loc_748A		     ; yes, go
ROM:746F B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:7472 85 08			     STA     byte_8
ROM:7474 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:7477 85 09			     STA     byte_9		     ; setup tilemap (row below)
ROM:7479 A4 5A			     LDY     farthest_left	     ; guard col
ROM:747B 88			     DEY			     ; below left
ROM:747C B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below, left)
ROM:747E C9 01			     CMP     #1			     ; brick?
ROM:7480 F0 08			     BEQ     loc_748A		     ; yes, we can walk	on it, go
ROM:7482 C9 02			     CMP     #2			     ; solid?
ROM:7484 F0 04			     BEQ     loc_748A		     ; yes, we can walk	on it, go
ROM:7486 C9 03			     CMP     #3			     ; ladder?
ROM:7488 D0 04			     BNE     loc_748E		     ; no, we can't walk on it, go
ROM:748A
ROM:748A	     loc_748A:					     ; CODE XREF: find_farthest_left_right+25j
ROM:748A							     ; find_farthest_left_right+29j ...
ROM:748A C6 5A			     DEC     farthest_left	     ; dec guard col
ROM:748C 10 B6			     BPL     find_farthest_left	     ; try again
ROM:748E
ROM:748E	     loc_748E:					     ; CODE XREF: find_farthest_left_right+4Aj
ROM:748E C6 5A			     DEC     farthest_left
ROM:7490
ROM:7490	     find_farthest_right:			     ; CODE XREF: find_farthest_left_right+8j
ROM:7490							     ; find_farthest_left_right+1Dj ...
ROM:7490 A5 5B			     LDA     farthest_right
ROM:7492 C9 1B			     CMP     #27		     ; right-most column?
ROM:7494 F0 48			     BEQ     locret_74DE	     ; yes, go
ROM:7496 A4 1B			     LDY     scanline		     ; guard row
ROM:7498 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:749B 85 06			     STA     lsb_row_level_data_addr
ROM:749D B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:74A0 85 07			     STA     msb_row_level_data_addr ; setup tilemap address
ROM:74A2 A4 5B			     LDY     farthest_right	     ; col?
ROM:74A4 C8			     INY			     ; column to right
ROM:74A5 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap (right)
ROM:74A7 C9 01			     CMP     #1			     ; brick?
ROM:74A9 F0 33			     BEQ     locret_74DE	     ; yes, go
ROM:74AB C9 02			     CMP     #2			     ; solid?
ROM:74AD F0 2F			     BEQ     locret_74DE	     ; yes, go
ROM:74AF C9 03			     CMP     #3			     ; ladder?
ROM:74B1 F0 25			     BEQ     loc_74D8		     ; yes, go
ROM:74B3 C9 04			     CMP     #4			     ; rope?
ROM:74B5 F0 21			     BEQ     loc_74D8		     ; yes, go
ROM:74B7 A4 1B			     LDY     scanline		     ; guard row
ROM:74B9 C0 0F			     CPY     #15		     ; bottom row?
ROM:74BB F0 1B			     BEQ     loc_74D8		     ; yes, go
ROM:74BD B9 06 1C		     LDA     lsb_row_addr+1,Y
ROM:74C0 85 08			     STA     byte_8
ROM:74C2 B9 26 1C		     LDA     msb_row_addr_2+1,Y
ROM:74C5 85 09			     STA     byte_9		     ; setup tilemap address (row below)
ROM:74C7 A4 5B			     LDY     farthest_right	     ; col?
ROM:74C9 C8			     INY			     ; column to right
ROM:74CA B1 08			     LDA     (byte_8),Y		     ; get object from tilemap (below, right)
ROM:74CC C9 01			     CMP     #1			     ; brick?
ROM:74CE F0 08			     BEQ     loc_74D8		     ; yes, go
ROM:74D0 C9 02			     CMP     #2			     ; solid?
ROM:74D2 F0 04			     BEQ     loc_74D8		     ; yes, go
ROM:74D4 C9 03			     CMP     #3			     ; ladder?
ROM:74D6 D0 04			     BNE     loc_74DC		     ; no, go
ROM:74D8
ROM:74D8	     loc_74D8:					     ; CODE XREF: find_farthest_left_right+73j
ROM:74D8							     ; find_farthest_left_right+77j ...
ROM:74D8 E6 5B			     INC     farthest_right	     ; next col?
ROM:74DA 10 B4			     BPL     find_farthest_right     ; try again
ROM:74DC
ROM:74DC	     loc_74DC:					     ; CODE XREF: find_farthest_left_right+98j
ROM:74DC E6 5B			     INC     farthest_right	     ; next col?
ROM:74DE
ROM:74DE	     locret_74DE:				     ; CODE XREF: find_farthest_left_right+56j
ROM:74DE							     ; find_farthest_left_right+6Bj ...
ROM:74DE 60			     RTS
ROM:74DE	     ; End of function find_farthest_left_right
ROM:74DE
ROM:74DF
ROM:74DF	     ; =============== S U B R O U T I N E =======================================
ROM:74DF
ROM:74DF
ROM:74DF	     calc_guard_xychar:				     ; CODE XREF: ROM:handle_guard_fallingp
ROM:74DF							     ; ROM:render_guard_and_retp ...
ROM:74DF A6 12			     LDX     curr_guard_col
ROM:74E1 A4 17			     LDY     curr_guard_x_offset
ROM:74E3 20 8F 88		     JSR     calc_x_in_2_pixel_incs  ; =X
ROM:74E6 86 1E			     STX     msg_char		     ; save
ROM:74E8 A4 13			     LDY     curr_guard_row
ROM:74EA A6 18			     LDX     curr_guard_y_offset
ROM:74EC 20 7C 88		     JSR     calc_scanline	     ; =Y
ROM:74EF A6 14			     LDX     curr_guard_sprite
ROM:74F1 BD CB 6C		     LDA     guard_sprite_to_char_tbl,X	; get char
ROM:74F4 A6 1E			     LDX     msg_char		     ; restore X
ROM:74F6 60			     RTS
ROM:74F6	     ; End of function calc_guard_xychar
ROM:74F6
ROM:74F7
ROM:74F7	     ; =============== S U B R O U T I N E =======================================
ROM:74F7
ROM:74F7
ROM:74F7	     check_guard_pickup_gold:			     ; CODE XREF: ROM:6D85p
ROM:74F7							     ; ROM:guard_climber_check_for_goldp ...
ROM:74F7 A5 17			     LDA     curr_guard_x_offset
ROM:74F9 C9 02			     CMP     #2
ROM:74FB D0 40			     BNE     locret_753D
ROM:74FD A5 18			     LDA     curr_guard_y_offset
ROM:74FF C9 02			     CMP     #2
ROM:7501 D0 3A			     BNE     locret_753D
ROM:7503 A4 13			     LDY     curr_guard_row
ROM:7505 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7508 85 08			     STA     byte_8
ROM:750A B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:750D 85 09			     STA     byte_9		     ; setup tilemap address
ROM:750F A4 12			     LDY     curr_guard_col
ROM:7511 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:7513 C9 07			     CMP     #7			     ; gold?
ROM:7515 D0 26			     BNE     locret_753D	     ; no, exit
ROM:7517 A5 16			     LDA     curr_guard_state
ROM:7519 30 22			     BMI     locret_753D
ROM:751B A9 FF			     LDA     #$FF
ROM:751D 38			     SEC
ROM:751E E5 53			     SBC     guard_respawn_col
ROM:7520 85 16			     STA     curr_guard_state
ROM:7522 A9 00			     LDA     #0
ROM:7524 91 08			     STA     (byte_8),Y		     ; update tilemap
ROM:7526 A4 13			     LDY     curr_guard_row
ROM:7528 84 86			     STY     row
ROM:752A A4 12			     LDY     curr_guard_col
ROM:752C 84 85			     STY     col
ROM:752E 20 B0 82		     JSR     display_char_pg2	     ; render space on bg
ROM:7531 A4 86			     LDY     row
ROM:7533 A6 85			     LDX     col
ROM:7535 20 5D 88		     JSR     calc_colx5_scanline
ROM:7538 A9 07			     LDA     #7			     ; gold
ROM:753A 4C 36 83		     JMP     wipe_char
ROM:753D	     ; ---------------------------------------------------------------------------
ROM:753D
ROM:753D	     locret_753D:				     ; CODE XREF: check_guard_pickup_gold+4j
ROM:753D							     ; check_guard_pickup_gold+Aj ...
ROM:753D 60			     RTS
ROM:753D	     ; End of function check_guard_pickup_gold
ROM:753D
ROM:753E
ROM:753E	     ; =============== S U B R O U T I N E =======================================
ROM:753E
ROM:753E
ROM:753E	     check_guard_drop_gold:			     ; CODE XREF: ROM:6EF5p
ROM:753E							     ; ROM:6F87p ...
ROM:753E A5 16			     LDA     curr_guard_state
ROM:7540 10 31			     BPL     locret_7573
ROM:7542 E6 16			     INC     curr_guard_state
ROM:7544 D0 2D			     BNE     locret_7573
ROM:7546 A4 13			     LDY     curr_guard_row
ROM:7548 84 86			     STY     row
ROM:754A B9 05 1C		     LDA     lsb_row_addr,Y
ROM:754D 85 08			     STA     byte_8
ROM:754F B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7552 85 09			     STA     byte_9
ROM:7554 A4 12			     LDY     curr_guard_col
ROM:7556 84 85			     STY     col		     ; col
ROM:7558 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:755A C9 00			     CMP     #0			     ; space?
ROM:755C D0 13			     BNE     loc_7571		     ; no, skip
ROM:755E A9 07			     LDA     #7			     ; gold
ROM:7560 91 08			     STA     (byte_8),Y		     ; update tilemap
ROM:7562 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7565 A4 86			     LDY     row
ROM:7567 A6 85			     LDX     col
ROM:7569 20 5D 88		     JSR     calc_colx5_scanline
ROM:756C A9 07			     LDA     #7			     ; gold
ROM:756E 4C A7 83		     JMP     display_transparent_char ;	render onto fg
ROM:7571	     ; ---------------------------------------------------------------------------
ROM:7571
ROM:7571	     loc_7571:					     ; CODE XREF: check_guard_drop_gold+1Ej
ROM:7571 C6 16			     DEC     curr_guard_state
ROM:7573
ROM:7573	     locret_7573:				     ; CODE XREF: check_guard_drop_gold+2j
ROM:7573							     ; check_guard_drop_gold+6j
ROM:7573 60			     RTS
ROM:7573	     ; End of function check_guard_drop_gold
ROM:7573
ROM:7574
ROM:7574	     ; =============== S U B R O U T I N E =======================================
ROM:7574
ROM:7574
ROM:7574	     update_guard_sprite_index:			     ; CODE XREF: ROM:6F2Dp
ROM:7574							     ; ROM:loc_703Bp ...
ROM:7574 E6 14			     INC     curr_guard_sprite
ROM:7576 C5 14			     CMP     curr_guard_sprite
ROM:7578 90 03			     BCC     loc_757D
ROM:757A
ROM:757A	     loc_757A:					     ; CODE XREF: update_guard_sprite_index+Bj
ROM:757A 85 14			     STA     curr_guard_sprite
ROM:757C 60			     RTS
ROM:757D	     ; ---------------------------------------------------------------------------
ROM:757D
ROM:757D	     loc_757D:					     ; CODE XREF: update_guard_sprite_index+4j
ROM:757D E4 14			     CPX     curr_guard_sprite
ROM:757F 90 F9			     BCC     loc_757A
ROM:7581 60			     RTS
ROM:7581	     ; End of function update_guard_sprite_index
ROM:7581
ROM:7582
ROM:7582	     ; =============== S U B R O U T I N E =======================================
ROM:7582
ROM:7582
ROM:7582	     adjust_guard_x_offset:			     ; CODE XREF: ROM:6D6Ap
ROM:7582							     ; ROM:6EDBp ...
ROM:7582 A5 17			     LDA     curr_guard_x_offset
ROM:7584 C9 02			     CMP     #2
ROM:7586 90 07			     BCC     loc_758F
ROM:7588 F0 0A			     BEQ     locret_7594
ROM:758A C6 17			     DEC     curr_guard_x_offset
ROM:758C 4C F7 74		     JMP     check_guard_pickup_gold
ROM:758F	     ; ---------------------------------------------------------------------------
ROM:758F
ROM:758F	     loc_758F:					     ; CODE XREF: adjust_guard_x_offset+4j
ROM:758F E6 17			     INC     curr_guard_x_offset
ROM:7591 4C F7 74		     JMP     check_guard_pickup_gold
ROM:7594	     ; ---------------------------------------------------------------------------
ROM:7594
ROM:7594	     locret_7594:				     ; CODE XREF: adjust_guard_x_offset+6j
ROM:7594 60			     RTS
ROM:7594	     ; End of function adjust_guard_x_offset
ROM:7594
ROM:7595
ROM:7595	     ; =============== S U B R O U T I N E =======================================
ROM:7595
ROM:7595
ROM:7595	     adjust_guard_y_offset:			     ; CODE XREF: ROM:6FF7p
ROM:7595							     ; ROM:7084p
ROM:7595 A5 18			     LDA     curr_guard_y_offset
ROM:7597 C9 02			     CMP     #2
ROM:7599 90 07			     BCC     loc_75A2
ROM:759B F0 0A			     BEQ     locret_75A7
ROM:759D C6 18			     DEC     curr_guard_y_offset
ROM:759F 4C F7 74		     JMP     check_guard_pickup_gold
ROM:75A2	     ; ---------------------------------------------------------------------------
ROM:75A2
ROM:75A2	     loc_75A2:					     ; CODE XREF: adjust_guard_y_offset+4j
ROM:75A2 E6 18			     INC     curr_guard_y_offset
ROM:75A4 4C F7 74		     JMP     check_guard_pickup_gold
ROM:75A7	     ; ---------------------------------------------------------------------------
ROM:75A7
ROM:75A7	     locret_75A7:				     ; CODE XREF: adjust_guard_y_offset+6j
ROM:75A7 60			     RTS
ROM:75A7	     ; End of function adjust_guard_y_offset
ROM:75A7
ROM:75A8	     ; ---------------------------------------------------------------------------
ROM:75A8
ROM:75A8	     copy_curr_to_guard:			     ; CODE XREF: ROM:6D02j
ROM:75A8							     ; ROM:6DBDj ...
ROM:75A8 A6 19			     LDX     curr_guard
ROM:75AA A5 12			     LDA     curr_guard_col
ROM:75AC 9D 60 0C		     STA     guard_col,X
ROM:75AF A5 13			     LDA     curr_guard_row
ROM:75B1 9D 68 0C		     STA     guard_row,X
ROM:75B4 A5 17			     LDA     curr_guard_x_offset
ROM:75B6 9D 78 0C		     STA     guard_x_offset,X
ROM:75B9 A5 18			     LDA     curr_guard_y_offset
ROM:75BB 9D 80 0C		     STA     guard_y_offset,X
ROM:75BE A5 16			     LDA     curr_guard_state
ROM:75C0 9D 70 0C		     STA     guard_state,X
ROM:75C3 A5 15			     LDA     curr_guard_dir
ROM:75C5 9D 90 0C		     STA     guard_dir,X
ROM:75C8 A5 14			     LDA     curr_guard_sprite
ROM:75CA 9D 88 0C		     STA     guard_sprite,X
ROM:75CD 60			     RTS
ROM:75CE
ROM:75CE	     ; =============== S U B R O U T I N E =======================================
ROM:75CE
ROM:75CE
ROM:75CE	     copy_guard_to_curr:			     ; CODE XREF: ROM:loc_6CE7p
ROM:75CE							     ; respawn_guards_and_update_holes+B2p ...
ROM:75CE A6 19			     LDX     curr_guard
ROM:75D0 BD 60 0C		     LDA     guard_col,X
ROM:75D3 85 12			     STA     curr_guard_col
ROM:75D5 BD 68 0C		     LDA     guard_row,X
ROM:75D8 85 13			     STA     curr_guard_row
ROM:75DA BD 78 0C		     LDA     guard_x_offset,X
ROM:75DD 85 17			     STA     curr_guard_x_offset
ROM:75DF BD 80 0C		     LDA     guard_y_offset,X
ROM:75E2 85 18			     STA     curr_guard_y_offset
ROM:75E4 BD 88 0C		     LDA     guard_sprite,X
ROM:75E7 85 14			     STA     curr_guard_sprite
ROM:75E9 BD 90 0C		     LDA     guard_dir,X
ROM:75EC 85 15			     STA     curr_guard_dir
ROM:75EE BD 70 0C		     LDA     guard_state,X
ROM:75F1 85 16			     STA     curr_guard_state
ROM:75F3 60			     RTS
ROM:75F3	     ; End of function copy_guard_to_curr
ROM:75F3
ROM:75F4
ROM:75F4	     ; =============== S U B R O U T I N E =======================================
ROM:75F4
ROM:75F4
ROM:75F4	     respawn_guards_and_update_holes:		     ; CODE XREF: ROM:loc_6107p
ROM:75F4 20 16 77		     JSR     check_and_handle_respawn
ROM:75F7 E6 53			     INC     guard_respawn_col
ROM:75F9 A5 53			     LDA     guard_respawn_col
ROM:75FB C9 1C			     CMP     #28
ROM:75FD 90 04			     BCC     loc_7603
ROM:75FF A9 00			     LDA     #0
ROM:7601 85 53			     STA     guard_respawn_col
ROM:7603
ROM:7603	     loc_7603:					     ; CODE XREF: respawn_guards_and_update_holes+9j
ROM:7603 A2 1E			     LDX     #$1E		     ; max number of holes
ROM:7605
ROM:7605	     check_hole:				     ; CODE XREF: respawn_guards_and_update_holes+11Ej
ROM:7605 BD E0 0C		     LDA     hole_cnt,X
ROM:7608 86 88			     STX     byte_88		     ; store hole#
ROM:760A D0 03			     BNE     update_hole	     ; hole refilling
ROM:760C 4C 0D 77		     JMP     next_hole
ROM:760F	     ; ---------------------------------------------------------------------------
ROM:760F
ROM:760F	     update_hole:				     ; CODE XREF: respawn_guards_and_update_holes+16j
ROM:760F DE E0 0C		     DEC     hole_cnt,X
ROM:7612 F0 2D			     BEQ     restore_brick
ROM:7614 BD A0 0C		     LDA     hole_col,X
ROM:7617 85 85			     STA     col
ROM:7619 BD C0 0C		     LDA     hole_row,X
ROM:761C 85 86			     STA     row
ROM:761E BD E0 0C		     LDA     hole_cnt,X
ROM:7621 C9 14			     CMP     #20
ROM:7623 D0 14			     BNE     chk_hole_cnt_10
ROM:7625 A9 37			     LDA     #$37 ; '7'              ; brick refill 0
ROM:7627
ROM:7627	     update_hole_tile:				     ; CODE XREF: respawn_guards_and_update_holes+4Bj
ROM:7627 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:762A A6 85			     LDX     col
ROM:762C A4 86			     LDY     row
ROM:762E 20 5D 88		     JSR     calc_colx5_scanline
ROM:7631 A9 00			     LDA     #0			     ; space
ROM:7633 20 36 83		     JSR     wipe_char
ROM:7636
ROM:7636	     goto_next_hole:				     ; CODE XREF: respawn_guards_and_update_holes+47j
ROM:7636 4C 0D 77		     JMP     next_hole
ROM:7639	     ; ---------------------------------------------------------------------------
ROM:7639
ROM:7639	     chk_hole_cnt_10:				     ; CODE XREF: respawn_guards_and_update_holes+2Fj
ROM:7639 C9 0A			     CMP     #10
ROM:763B D0 F9			     BNE     goto_next_hole
ROM:763D A9 38			     LDA     #$38 ; '8'              ; brick refill 1
ROM:763F D0 E6			     BNE     update_hole_tile
ROM:7641
ROM:7641	     restore_brick:				     ; CODE XREF: respawn_guards_and_update_holes+1Ej
ROM:7641 A6 88			     LDX     byte_88
ROM:7643 BC C0 0C		     LDY     hole_row,X
ROM:7646 84 86			     STY     row
ROM:7648 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:764B 85 06			     STA     lsb_row_level_data_addr
ROM:764D 85 08			     STA     byte_8
ROM:764F B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:7652 85 07			     STA     msb_row_level_data_addr
ROM:7654 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:7657 85 09			     STA     byte_9		     ; setup tilemap address
ROM:7659 BC A0 0C		     LDY     hole_col,X
ROM:765C 84 85			     STY     col
ROM:765E B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:7660 C9 00			     CMP     #0
ROM:7662 D0 03			     BNE     loc_7667
ROM:7664 4C 01 77		     JMP     redisplay_brick
ROM:7667	     ; ---------------------------------------------------------------------------
ROM:7667
ROM:7667	     loc_7667:					     ; CODE XREF: respawn_guards_and_update_holes+6Ej
ROM:7667 C9 09			     CMP     #9			     ; player?
ROM:7669 D0 02			     BNE     loc_766D		     ; no, skip
ROM:766B 46 9A			     LSR     level_active	     ; kill player
ROM:766D
ROM:766D	     loc_766D:					     ; CODE XREF: respawn_guards_and_update_holes+75j
ROM:766D C9 08			     CMP     #8			     ; guard?
ROM:766F F0 09			     BEQ     loc_767A		     ; yes, go
ROM:7671 C9 07			     CMP     #7			     ; gold?
ROM:7673 D0 02			     BNE     loc_7677		     ; no, skip
ROM:7675 C6 93			     DEC     no_gold		     ; gold gone - adjust gold count
ROM:7677
ROM:7677	     loc_7677:					     ; CODE XREF: respawn_guards_and_update_holes+7Fj
ROM:7677 4C 01 77		     JMP     redisplay_brick
ROM:767A	     ; ---------------------------------------------------------------------------
ROM:767A
ROM:767A	     loc_767A:					     ; CODE XREF: respawn_guards_and_update_holes+7Bj
ROM:767A A9 01			     LDA     #1			     ; diggable	brick
ROM:767C 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:767E 91 08			     STA     (byte_8),Y		     ; update tilemap
ROM:7680 20 AA 82		     JSR     display_char_pg1	     ; render onto display
ROM:7683 A9 01			     LDA     #1			     ; diggable	brick
ROM:7685 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7688 A6 8D			     LDX     no_guards
ROM:768A
ROM:768A	     check_trapped_guards:			     ; CODE XREF: respawn_guards_and_update_holes+10Bj
ROM:768A BD 60 0C		     LDA     guard_col,X
ROM:768D C5 85			     CMP     col		     ; column match?
ROM:768F D0 6D			     BNE     check_next_trapped	     ; no, skip
ROM:7691 BD 68 0C		     LDA     guard_row,X
ROM:7694 C5 86			     CMP     row		     ; row match?
ROM:7696 D0 66			     BNE     check_next_trapped	     ; no, skip
ROM:7698 BD 70 0C		     LDA     guard_state,X
ROM:769B 10 02			     BPL     loc_769F
ROM:769D C6 93			     DEC     no_gold
ROM:769F
ROM:769F	     loc_769F:					     ; CODE XREF: respawn_guards_and_update_holes+A7j
ROM:769F A9 7F			     LDA     #$7F ; ''
ROM:76A1 9D 70 0C		     STA     guard_state,X
ROM:76A4 86 19			     STX     curr_guard
ROM:76A6 20 CE 75		     JSR     copy_guard_to_curr
ROM:76A9 20 DF 74		     JSR     calc_guard_xychar
ROM:76AC 20 36 83		     JSR     wipe_char		     ; wipe guard from screen
ROM:76AF A6 19			     LDX     curr_guard
ROM:76B1 A0 01			     LDY     #1
ROM:76B3 84 86			     STY     row		     ; reset guard row to 1
ROM:76B5
ROM:76B5	     loc_76B5:					     ; CODE XREF: respawn_guards_and_update_holes+E3j
ROM:76B5 A4 86			     LDY     row
ROM:76B7 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:76BA 85 08			     STA     byte_8
ROM:76BC B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:76BF 85 09			     STA     byte_9		     ; setup tilemap address
ROM:76C1 A4 53			     LDY     guard_respawn_col
ROM:76C3
ROM:76C3	     loc_76C3:					     ; CODE XREF: respawn_guards_and_update_holes+DBj
ROM:76C3 B1 08			     LDA     (byte_8),Y
ROM:76C5 C9 00			     CMP     #0
ROM:76C7 F0 10			     BEQ     loc_76D9
ROM:76C9 E6 53			     INC     guard_respawn_col
ROM:76CB A4 53			     LDY     guard_respawn_col
ROM:76CD C0 1C			     CPY     #28		     ; past last column?
ROM:76CF 90 F2			     BCC     loc_76C3		     ; no, loop
ROM:76D1 E6 86			     INC     row
ROM:76D3 A9 00			     LDA     #0			     ; reset column
ROM:76D5 85 53			     STA     guard_respawn_col
ROM:76D7 F0 DC			     BEQ     loc_76B5
ROM:76D9
ROM:76D9	     loc_76D9:					     ; CODE XREF: respawn_guards_and_update_holes+D3j
ROM:76D9 98			     TYA
ROM:76DA 9D 60 0C		     STA     guard_col,X
ROM:76DD A5 86			     LDA     row
ROM:76DF 9D 68 0C		     STA     guard_row,X
ROM:76E2 A9 14			     LDA     #20		     ; init count=20
ROM:76E4 9D 98 0C		     STA     guard_cnt,X
ROM:76E7 A9 02			     LDA     #2
ROM:76E9 9D 80 0C		     STA     guard_y_offset,X
ROM:76EC 9D 78 0C		     STA     guard_x_offset,X
ROM:76EF A9 00			     LDA     #0
ROM:76F1 9D 88 0C		     STA     guard_sprite,X
ROM:76F4 A0 00			     LDY     #0
ROM:76F6 A9 75			     LDA     #$75 ; 'u'              ; add 75
ROM:76F8 20 92 7A		     JSR     update_and_display_score
ROM:76FB 4C 0D 77		     JMP     next_hole
ROM:76FE	     ; ---------------------------------------------------------------------------
ROM:76FE
ROM:76FE	     check_next_trapped:			     ; CODE XREF: respawn_guards_and_update_holes+9Bj
ROM:76FE							     ; respawn_guards_and_update_holes+A2j
ROM:76FE CA			     DEX
ROM:76FF D0 89			     BNE     check_trapped_guards
ROM:7701
ROM:7701	     redisplay_brick:				     ; CODE XREF: respawn_guards_and_update_holes+70j
ROM:7701							     ; respawn_guards_and_update_holes:loc_7677j
ROM:7701 A9 01			     LDA     #1			     ; diggable	brick
ROM:7703 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:7705 20 AA 82		     JSR     display_char_pg1
ROM:7708 A9 01			     LDA     #1			     ; diggable	brick
ROM:770A 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:770D
ROM:770D	     next_hole:					     ; CODE XREF: respawn_guards_and_update_holes+18j
ROM:770D							     ; respawn_guards_and_update_holes:goto_next_holej	...
ROM:770D A6 88			     LDX     byte_88		     ; hole#
ROM:770F CA			     DEX			     ; next hole
ROM:7710 30 03			     BMI     locret_7715	     ; done? yes, exit
ROM:7712 4C 05 76		     JMP     check_hole		     ; loop
ROM:7715	     ; ---------------------------------------------------------------------------
ROM:7715
ROM:7715	     locret_7715:				     ; CODE XREF: respawn_guards_and_update_holes+11Cj
ROM:7715							     ; ROM:7718j
ROM:7715 60			     RTS
ROM:7715	     ; End of function respawn_guards_and_update_holes
ROM:7715
ROM:7716	     ; ---------------------------------------------------------------------------
ROM:7716
ROM:7716	     check_and_handle_respawn:			     ; CODE XREF: respawn_guards_and_update_holesp
ROM:7716 A6 8D			     LDX     no_guards		     ; any guards active?
ROM:7718 F0 FB			     BEQ     locret_7715	     ; no, exit
ROM:771A A5 19			     LDA     curr_guard
ROM:771C 48			     PHA
ROM:771D
ROM:771D	     loc_771D:					     ; CODE XREF: ROM:7766j
ROM:771D BD 98 0C		     LDA     guard_cnt,X
ROM:7720 F0 43			     BEQ     next_guard		     ; 0? yes, skip
ROM:7722 86 19			     STX     curr_guard
ROM:7724 20 CE 75		     JSR     copy_guard_to_curr
ROM:7727 A9 7F			     LDA     #$7F ; ''
ROM:7729 9D 70 0C		     STA     guard_state,X
ROM:772C BD 60 0C		     LDA     guard_col,X
ROM:772F 85 85			     STA     col
ROM:7731 BD 68 0C		     LDA     guard_row,X
ROM:7734 85 86			     STA     row
ROM:7736 DE 98 0C		     DEC     guard_cnt,X	     ; dec counter
ROM:7739 F0 31			     BEQ     finish_respawn	     ; 0? yes, go
ROM:773B BD 98 0C		     LDA     guard_cnt,X
ROM:773E C9 13			     CMP     #19
ROM:7740 D0 10			     BNE     loc_7752
ROM:7742 A9 39			     LDA     #$39 ; '9'              ; enemy respawn 0
ROM:7744 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7747 20 DF 74		     JSR     calc_guard_xychar
ROM:774A A9 39			     LDA     #$39 ; '9'              ; enemy respawn 0
ROM:774C 20 A7 83		     JSR     display_transparent_char
ROM:774F 4C 63 77		     JMP     loc_7763
ROM:7752	     ; ---------------------------------------------------------------------------
ROM:7752
ROM:7752	     loc_7752:					     ; CODE XREF: ROM:7740j
ROM:7752 C9 0A			     CMP     #10		     ; guard_cnt=10?
ROM:7754 D0 0F			     BNE     next_guard		     ; no, skip
ROM:7756 A9 3A			     LDA     #$3A ; ':'              ; enemy respawn 1
ROM:7758 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:775B 20 DF 74		     JSR     calc_guard_xychar
ROM:775E A9 3A			     LDA     #$3A ; ':'              ; enemy respawn 1
ROM:7760 20 A7 83		     JSR     display_transparent_char
ROM:7763
ROM:7763	     loc_7763:					     ; CODE XREF: ROM:774Fj
ROM:7763 A6 19			     LDX     curr_guard
ROM:7765
ROM:7765	     next_guard:				     ; CODE XREF: ROM:7720j
ROM:7765							     ; ROM:7754j ...
ROM:7765 CA			     DEX			     ; next guard
ROM:7766 D0 B5			     BNE     loc_771D		     ; continue
ROM:7768 68			     PLA
ROM:7769 85 19			     STA     curr_guard
ROM:776B 60			     RTS
ROM:776C	     ; ---------------------------------------------------------------------------
ROM:776C
ROM:776C	     finish_respawn:				     ; CODE XREF: ROM:7739j
ROM:776C A4 86			     LDY     row
ROM:776E B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7771 85 06			     STA     lsb_row_level_data_addr
ROM:7773 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:7776 85 07			     STA     msb_row_level_data_addr ; setup tilemap address
ROM:7778 A6 19			     LDX     curr_guard
ROM:777A FE 98 0C		     INC     guard_cnt,X	     ; count=1?
ROM:777D A4 85			     LDY     col
ROM:777F B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:7781 D0 E2			     BNE     next_guard		     ; not free, skip
ROM:7783 A9 08			     LDA     #8			     ; guard
ROM:7785 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:7787 A9 00			     LDA     #0			     ; space
ROM:7789 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:778C A9 00			     LDA     #0
ROM:778E A6 19			     LDX     curr_guard
ROM:7790 9D 70 0C		     STA     guard_state,X
ROM:7793 9D 98 0C		     STA     guard_cnt,X	     ; reset counter
ROM:7796 A9 08			     LDA     #8			     ; enemy left 0
ROM:7798 20 AA 82		     JSR     display_char_pg1
ROM:779B 20 E1 87		     JSR     sub_87E1		     ; sound stuff!
ROM:779B	     ; ---------------------------------------------------------------------------
ROM:779E 02 7C 03 78+		     .WORD $7C02, $7803, $7404,	$7005
ROM:77A6 00			     .BYTE   0
ROM:77A7	     ; ---------------------------------------------------------------------------
ROM:77A7 A6 19			     LDX     curr_guard
ROM:77A9
ROM:77A9	     loc_77A9:					     ; DATA XREF: ROM:6B7Fo
ROM:77A9 4C 65 77		     JMP     next_guard
ROM:77AC	     ; ---------------------------------------------------------------------------
ROM:77AC
ROM:77AC	     ctrl_m:
ROM:77AC 20 6B 78		     JSR     cls_and_display_high_scores
ROM:77AF A2 FF			     LDX     #$FF
ROM:77B1 A0 FF			     LDY     #$FF
ROM:77B3 A9 04			     LDA     #4
ROM:77B5 85 A1			     STA     timer		     ; timeout=256*256*4 loops
ROM:77B7
ROM:77B7	     loc_77B7:					     ; CODE XREF: ROM:77CDj
ROM:77B7							     ; ROM:77D0j ...
ROM:77B7 A5 95			     LDA     paddles_detected
ROM:77B9 C9 CB			     CMP     #$CB ; 'Ë'
ROM:77BB F0 0A			     BEQ     loc_77C7
ROM:77BD AD 62 C0		     LDA     $C062		     ; closed apple key	read
ROM:77C0 30 14			     BMI     loc_77D6		     ; pressed?	yes, go
ROM:77C2 AD 61 C0		     LDA     $C061		     ; open apple key read
ROM:77C5 30 0F			     BMI     loc_77D6		     ; pressed?	yes, go
ROM:77C7
ROM:77C7	     loc_77C7:					     ; CODE XREF: ROM:77BBj
ROM:77C7 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:77CA 30 0A			     BMI     loc_77D6		     ; key pressed? yes, go
ROM:77CC CA			     DEX
ROM:77CD D0 E8			     BNE     loc_77B7
ROM:77CF 88			     DEY
ROM:77D0 D0 E5			     BNE     loc_77B7
ROM:77D2 C6 A1			     DEC     timer		     ; timed out?
ROM:77D4 D0 E1			     BNE     loc_77B7		     ; no, loop
ROM:77D6
ROM:77D6	     loc_77D6:					     ; CODE XREF: ROM:77C0j
ROM:77D6							     ; ROM:77C5j ...
ROM:77D6 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:77D9 8D 54 C0		     STA     $C054		     ; select text/graphics page 1
ROM:77DC 20 57 7A		     JSR     gcls2
ROM:77DF A0 0F			     LDY     #$F
ROM:77E1 84 86			     STY     row
ROM:77E3
ROM:77E3	     loc_77E3:					     ; CODE XREF: ROM:7806j
ROM:77E3 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:77E6 85 08			     STA     byte_8
ROM:77E8 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:77EB 85 09			     STA     byte_9
ROM:77ED A0 1B			     LDY     #$1B
ROM:77EF 84 85			     STY     col
ROM:77F1
ROM:77F1	     loc_77F1:					     ; CODE XREF: ROM:7800j
ROM:77F1 B1 08			     LDA     (byte_8),Y
ROM:77F3 C9 05			     CMP     #5
ROM:77F5 D0 02			     BNE     loc_77F9
ROM:77F7 A9 01			     LDA     #1
ROM:77F9
ROM:77F9	     loc_77F9:					     ; CODE XREF: ROM:77F5j
ROM:77F9 20 B0 82		     JSR     display_char_pg2
ROM:77FC C6 85			     DEC     col
ROM:77FE A4 85			     LDY     col
ROM:7800 10 EF			     BPL     loc_77F1
ROM:7802 C6 86			     DEC     row
ROM:7804 A4 86			     LDY     row
ROM:7806 10 DB			     BPL     loc_77E3
ROM:7808 A2 1E			     LDX     #$1E
ROM:780A
ROM:780A	     loc_780A:					     ; CODE XREF: ROM:783Bj
ROM:780A 86 88			     STX     byte_88
ROM:780C BD E0 0C		     LDA     hole_cnt,X
ROM:780F F0 27			     BEQ     loc_7838
ROM:7811 BC C0 0C		     LDY     hole_row,X
ROM:7814 84 86			     STY     row
ROM:7816 BC A0 0C		     LDY     hole_col,X
ROM:7819 84 85			     STY     col
ROM:781B C9 15			     CMP     #$15
ROM:781D 90 08			     BCC     loc_7827
ROM:781F A9 00			     LDA     #0			     ; space
ROM:7821 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7824 4C 38 78		     JMP     loc_7838
ROM:7827	     ; ---------------------------------------------------------------------------
ROM:7827
ROM:7827	     loc_7827:					     ; CODE XREF: ROM:781Dj
ROM:7827 C9 0B			     CMP     #$B
ROM:7829 90 08			     BCC     loc_7833
ROM:782B A9 37			     LDA     #$37 ; '7'              ; brick refill 0
ROM:782D 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7830 4C 38 78		     JMP     loc_7838
ROM:7833	     ; ---------------------------------------------------------------------------
ROM:7833
ROM:7833	     loc_7833:					     ; CODE XREF: ROM:7829j
ROM:7833 A9 38			     LDA     #$38 ; '8'              ; brick refill 1
ROM:7835 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7838
ROM:7838	     loc_7838:					     ; CODE XREF: ROM:780Fj
ROM:7838							     ; ROM:7824j ...
ROM:7838 A6 88			     LDX     byte_88
ROM:783A CA			     DEX
ROM:783B 10 CD			     BPL     loc_780A
ROM:783D A6 8D			     LDX     no_guards
ROM:783F F0 27			     BEQ     loc_7868
ROM:7841
ROM:7841	     loc_7841:					     ; CODE XREF: ROM:7866j
ROM:7841 BD 98 0C		     LDA     guard_cnt,X
ROM:7844 86 88			     STX     byte_88
ROM:7846 F0 1B			     BEQ     loc_7863
ROM:7848 BC 60 0C		     LDY     guard_col,X
ROM:784B 84 85			     STY     col
ROM:784D BC 68 0C		     LDY     guard_row,X
ROM:7850 84 86			     STY     row
ROM:7852 C9 14			     CMP     #$14
ROM:7854 B0 0D			     BCS     loc_7863
ROM:7856 C9 0B			     CMP     #$B
ROM:7858 90 04			     BCC     loc_785E
ROM:785A A9 39			     LDA     #$39 ; '9'
ROM:785C D0 02			     BNE     loc_7860
ROM:785E
ROM:785E	     loc_785E:					     ; CODE XREF: ROM:7858j
ROM:785E A9 3A			     LDA     #$3A ; ':'              ; enemy respawn 1
ROM:7860
ROM:7860	     loc_7860:					     ; CODE XREF: ROM:785Cj
ROM:7860 20 B0 82		     JSR     display_char_pg2	     ; render onto background
ROM:7863
ROM:7863	     loc_7863:					     ; CODE XREF: ROM:7846j
ROM:7863							     ; ROM:7854j
ROM:7863 A6 88			     LDX     byte_88
ROM:7865 CA			     DEX
ROM:7866 D0 D9			     BNE     loc_7841
ROM:7868
ROM:7868	     loc_7868:					     ; CODE XREF: ROM:783Fj
ROM:7868 4C 12 6A		     JMP     read_controls
ROM:786B	     ; ---------------------------------------------------------------------------
ROM:786B
ROM:786B	     cls_and_display_high_scores:		     ; CODE XREF: ROM:high_score_screenp
ROM:786B							     ; ROM:ctrl_mp ...
ROM:786B 20 57 7A		     JSR     gcls2
ROM:786E A9 40			     LDA     #$40 ; '@'              ; page2
ROM:7870 85 87			     STA     display_char_page
ROM:7872 A9 00			     LDA     #0
ROM:7874 85 85			     STA     col		     ; =0
ROM:7876 85 86			     STA     row		     ; =0
ROM:7878 20 E0 86		     JSR     display_message
ROM:7878	     ; ---------------------------------------------------------------------------
ROM:787B A0 A0 A0 A0+aLodeRunnerHighScores:.BYTE $A0, $A0, $A0,	$A0, $CC, $CF, $C4, $C5, $A0, $D2, $D5,	$CE ; "	   LODE	RUNNER HIGH SCORES\n\n\n"
ROM:787B CC CF C4 C5+		     .BYTE $CE,	$C5, $D2, $A0, $C8, $C9, $C7, $C8, $A0,	$D3, $C3, $CF
ROM:787B A0 D2 D5 CE+		     .BYTE $D2,	$C5, $D3, $8D, $8D, $8D
ROM:7899 A0 A0 A0 A0+aInitialsLevelScore:.BYTE $A0, $A0, $A0, $A0, $C9,	$CE, $C9, $D4, $C9, $C1, $CC, $D3 ; "	 INITIALS LEVEL	 SCORE\n"
ROM:7899 C9 CE C9 D4+		     .BYTE $A0,	$CC, $C5, $D6, $C5, $CC, $A0, $A0, $D3,	$C3, $CF, $D2
ROM:7899 C9 C1 CC D3+		     .BYTE $C5,	$8D
ROM:78B3 A0 A0 A0 A0+aDashes:	     .BYTE $A0,	$A0, $A0, $A0, $AD, $AD, $AD, $AD, $AD,	$AD, $AD, $AD
ROM:78B3 AD AD AD AD+		     .BYTE $A0,	$AD, $AD, $AD, $AD, $AD, $A0, $AD, $AD,	$AD, $AD, $AD
ROM:78B3 AD AD AD AD+		     .BYTE $AD,	$AD, $AD, $8D
ROM:78CF 00			     .BYTE   0
ROM:78D0	     ; ---------------------------------------------------------------------------
ROM:78D0 A9 01			     LDA     #1			     ; score counter
ROM:78D2 85 55			     STA     guard_ai_col
ROM:78D4
ROM:78D4	     loc_78D4:					     ; CODE XREF: ROM:7997j
ROM:78D4 C9 0A			     CMP     #10		     ; tenth score?
ROM:78D6 D0 0D			     BNE     loc_78E5		     ; no, skip
ROM:78D8 A9 01			     LDA     #1
ROM:78DA 20 15 7B		     JSR     display_digit
ROM:78DD A9 00			     LDA     #0
ROM:78DF 20 15 7B		     JSR     display_digit	     ; display "10"
ROM:78E2 4C EF 78		     JMP     loc_78EF		     ; continue
ROM:78E5	     ; ---------------------------------------------------------------------------
ROM:78E5
ROM:78E5	     loc_78E5:					     ; CODE XREF: ROM:78D6j
ROM:78E5 A9 A0			     LDA     #$A0 ; ' '              ; space
ROM:78E7 20 64 7B		     JSR     display_character
ROM:78EA A5 55			     LDA     guard_ai_col	     ; display " <n>" (score counter)
ROM:78EC 20 15 7B		     JSR     display_digit
ROM:78EF
ROM:78EF	     loc_78EF:					     ; CODE XREF: ROM:78E2j
ROM:78EF 20 E0 86		     JSR     display_message
ROM:78EF	     ; ---------------------------------------------------------------------------
ROM:78F2 AE A0 A0 A0+		     .BYTE $AE,	$A0, $A0, $A0, $A0   ; ".    "
ROM:78F7 00			     .BYTE   0
ROM:78F8	     ; ---------------------------------------------------------------------------
ROM:78F8 A6 55			     LDX     guard_ai_col
ROM:78FA BC A2 79		     LDY     byte_79A2,X
ROM:78FD 84 56			     STY     guard_ai_row
ROM:78FF B9 03 1F		     LDA     $1F03,Y
ROM:7902 D0 03			     BNE     loc_7907
ROM:7904 4C 8C 79		     JMP     loc_798C
ROM:7907	     ; ---------------------------------------------------------------------------
ROM:7907
ROM:7907	     loc_7907:					     ; CODE XREF: ROM:7902j
ROM:7907 A4 56			     LDY     guard_ai_row
ROM:7909 B9 00 1F		     LDA     $1F00,Y		     ; initial 1
ROM:790C 20 64 7B		     JSR     display_character
ROM:790F A4 56			     LDY     guard_ai_row
ROM:7911 B9 01 1F		     LDA     $1F01,Y		     ; initial 2
ROM:7914 20 64 7B		     JSR     display_character
ROM:7917 A4 56			     LDY     guard_ai_row
ROM:7919 B9 02 1F		     LDA     $1F02,Y		     ; initial 3
ROM:791C 20 64 7B		     JSR     display_character
ROM:791F 20 E0 86		     JSR     display_message
ROM:791F	     ; ---------------------------------------------------------------------------
ROM:7922 A0 A0 A0 A0		     .BYTE $A0,	$A0, $A0, $A0	     ; "    "
ROM:7926 00			     .BYTE   0
ROM:7927	     ; ---------------------------------------------------------------------------
ROM:7927 A4 56			     LDY     guard_ai_row
ROM:7929 B9 03 1F		     LDA     $1F03,Y		     ; level
ROM:792C 20 F8 7A		     JSR     cnv_byte_to_3_digits
ROM:792F A5 89			     LDA     hundreds
ROM:7931 20 15 7B		     JSR     display_digit
ROM:7934 A5 8A			     LDA     tens
ROM:7936 20 15 7B		     JSR     display_digit
ROM:7939 A5 8B			     LDA     units
ROM:793B 20 15 7B		     JSR     display_digit
ROM:793E 20 E0 86		     JSR     display_message
ROM:793E	     ; ---------------------------------------------------------------------------
ROM:7941 A0 A0			     .BYTE $A0,	$A0		     ; "  "
ROM:7943 00			     .BYTE   0
ROM:7944	     ; ---------------------------------------------------------------------------
ROM:7944 A4 56			     LDY     guard_ai_row
ROM:7946 B9 04 1F		     LDA     $1F04,Y		     ; millions
ROM:7949 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:794C A5 8A			     LDA     tens
ROM:794E 20 15 7B		     JSR     display_digit
ROM:7951 A5 8B			     LDA     units
ROM:7953 20 15 7B		     JSR     display_digit
ROM:7956 A4 56			     LDY     guard_ai_row
ROM:7958 B9 05 1F		     LDA     $1F05,Y		     ; hundreds, tens of thousands
ROM:795B 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:795E A5 8A			     LDA     tens
ROM:7960 20 15 7B		     JSR     display_digit
ROM:7963 A5 8B			     LDA     units
ROM:7965 20 15 7B		     JSR     display_digit
ROM:7968 A4 56			     LDY     guard_ai_row
ROM:796A B9 06 1F		     LDA     $1F06,Y		     ; thousands, hundreds
ROM:796D 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7970 A5 8A			     LDA     tens
ROM:7972 20 15 7B		     JSR     display_digit
ROM:7975 A5 8B			     LDA     units
ROM:7977 20 15 7B		     JSR     display_digit
ROM:797A A4 56			     LDY     guard_ai_row
ROM:797C B9 07 1F		     LDA     $1F07,Y		     ; tens, units
ROM:797F 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7982 A5 8A			     LDA     tens
ROM:7984 20 15 7B		     JSR     display_digit
ROM:7987 A5 8B			     LDA     units
ROM:7989 20 15 7B		     JSR     display_digit
ROM:798C
ROM:798C	     loc_798C:					     ; CODE XREF: ROM:7904j
ROM:798C 20 7D 7B		     JSR     cr
ROM:798F E6 55			     INC     guard_ai_col	     ; next score
ROM:7991 A5 55			     LDA     guard_ai_col
ROM:7993 C9 0B			     CMP     #11		     ; done all	scores?
ROM:7995 B0 03			     BCS     loc_799A		     ; yes, skip
ROM:7997 4C D4 78		     JMP     loc_78D4		     ; loop
ROM:799A	     ; ---------------------------------------------------------------------------
ROM:799A
ROM:799A	     loc_799A:					     ; CODE XREF: ROM:7995j
ROM:799A 8D 55 C0		     STA     $C055		     ; select text/graphics page 2
ROM:799D A9 20			     LDA     #$20 ; ' '              ; hires page 1
ROM:799F 85 87			     STA     display_char_page
ROM:79A1 60			     RTS
ROM:79A1	     ; ---------------------------------------------------------------------------
ROM:79A2 00 00 08 10+byte_79A2:	     .BYTE 0, 0, 8, $10, $18, $20, $28,	$30, $38, $40, $48
ROM:79A2 18 20 28 30+						     ; DATA XREF: ROM:78FAr
ROM:79AD	     ; ---------------------------------------------------------------------------
ROM:79AD
ROM:79AD	     cls_and_display_game_status:		     ; CODE XREF: ROM:loc_6099p
ROM:79AD 20 51 7A		     JSR     gcls1
ROM:79B0 20 57 7A		     JSR     gcls2
ROM:79B3
ROM:79B3	     loc_79B3:					     ; CODE XREF: ROM:7F08p
ROM:79B3 A0 27			     LDY     #39		     ; last column on screen
ROM:79B5 A5 87			     LDA     display_char_page	     ; hires_page_msb_2
ROM:79B7 C9 40			     CMP     #$40 ; '@'              ; page 2?
ROM:79B9 F0 22			     BEQ     loc_79DD		     ; yes, skip
ROM:79BB
ROM:79BB	     loc_79BB:					     ; CODE XREF: ROM:79D9j
ROM:79BB A9 AA			     LDA     #$AA ; 'ª'              ; pattern #1
ROM:79BD 99 50 23		     STA     $2350,Y
ROM:79C0 99 50 27		     STA     $2750,Y
ROM:79C3 99 50 2B		     STA     $2B50,Y
ROM:79C6 99 50 2F		     STA     $2F50,Y		     ; 4 pixels	high
ROM:79C9 88			     DEY
ROM:79CA A9 D5			     LDA     #$D5 ; 'Õ'              ; pattern #2
ROM:79CC 99 50 23		     STA     $2350,Y
ROM:79CF 99 50 27		     STA     $2750,Y
ROM:79D2 99 50 2B		     STA     $2B50,Y
ROM:79D5 99 50 2F		     STA     $2F50,Y		     ; 4 pixels	high
ROM:79D8 88			     DEY			     ; done across screen?
ROM:79D9 10 E0			     BPL     loc_79BB		     ; no, loop
ROM:79DB 30 20			     BMI     loc_79FD		     ; continue
ROM:79DD
ROM:79DD	     loc_79DD:					     ; CODE XREF: ROM:79B9j
ROM:79DD							     ; ROM:79FBj
ROM:79DD A9 AA			     LDA     #$AA ; 'ª'
ROM:79DF 99 50 43		     STA     $4350,Y
ROM:79E2 99 50 47		     STA     $4750,Y
ROM:79E5 99 50 4B		     STA     $4B50,Y
ROM:79E8 99 50 4F		     STA     $4F50,Y
ROM:79EB 88			     DEY
ROM:79EC A9 D5			     LDA     #$D5 ; 'Õ'
ROM:79EE 99 50 43		     STA     $4350,Y
ROM:79F1 99 50 47		     STA     $4750,Y
ROM:79F4 99 50 4B		     STA     $4B50,Y
ROM:79F7 99 50 4F		     STA     $4F50,Y
ROM:79FA 88			     DEY
ROM:79FB 10 E0			     BPL     loc_79DD		     ; draw line across	screen
ROM:79FD
ROM:79FD	     loc_79FD:					     ; CODE XREF: ROM:79DBj
ROM:79FD A9 10			     LDA     #16
ROM:79FF 85 86			     STA     row
ROM:7A01 A9 00			     LDA     #0
ROM:7A03 85 85			     STA     col
ROM:7A05 20 E0 86		     JSR     display_message
ROM:7A05	     ; ---------------------------------------------------------------------------
ROM:7A08 D3 C3 CF D2+aScoreMenLevel: .BYTE $D3,	$C3, $CF, $D2, $C5, $A0, $A0, $A0, $A0,	$A0, $A0, $A0 ;	"SCORE	      MEN    LEVEL   "
ROM:7A08 C5 A0 A0 A0+		     .BYTE $A0,	$CD, $C5, $CE, $A0, $A0, $A0, $A0, $CC,	$C5, $D6, $C5
ROM:7A08 A0 A0 A0 A0+		     .BYTE $CC,	$A0, $A0, $A0
ROM:7A24 00			     .BYTE   0
ROM:7A25	     ; ---------------------------------------------------------------------------
ROM:7A25 20 70 7A		     JSR     display_no_lives
ROM:7A28 20 8C 7A		     JSR     display_level
ROM:7A2B A9 00			     LDA     #0
ROM:7A2D A8			     TAY			     ; add 0
ROM:7A2E 4C 92 7A		     JMP     update_and_display_score
ROM:7A31
ROM:7A31	     ; =============== S U B R O U T I N E =======================================
ROM:7A31
ROM:7A31
ROM:7A31	     calc_line_addr_in_0C:			     ; CODE XREF: read_disk_and_chk_sig:loc_6023p
ROM:7A31							     ; display_char_pg2+31p ...
ROM:7A31 B9 85 1A		     LDA     lsb_line_addr,Y	     ; lsb of line start address
ROM:7A34 85 0C			     STA     lsb_line_addr_pg1
ROM:7A36 B9 45 1B		     LDA     msb_line_addr,Y	     ; msb of line start address
ROM:7A39 05 1F			     ORA     hires_page_msb_1	     ; or-in page address
ROM:7A3B 85 0D			     STA     msb_line_addr_pg1
ROM:7A3D 60			     RTS
ROM:7A3D	     ; End of function calc_line_addr_in_0C
ROM:7A3D
ROM:7A3E
ROM:7A3E	     ; =============== S U B R O U T I N E =======================================
ROM:7A3E
ROM:7A3E
ROM:7A3E	     get_line_addr_pgs_1_2:			     ; CODE XREF: wipe_char+1Cp
ROM:7A3E							     ; wipe_char+42p ...
ROM:7A3E B9 85 1A		     LDA     lsb_line_addr,Y	     ; lsb of line start address
ROM:7A41 85 0C			     STA     lsb_line_addr_pg1
ROM:7A43 85 0E			     STA     lsb_line_addr_pg2
ROM:7A45 B9 45 1B		     LDA     msb_line_addr,Y	     ; msb of line start address
ROM:7A48 09 20			     ORA     #$20 ; ' '              ; or-in page 1 address
ROM:7A4A 85 0D			     STA     msb_line_addr_pg1
ROM:7A4C 49 60			     EOR     #$60 ; '`'              ; or-in page 2 address
ROM:7A4E 85 0F			     STA     msb_line_addr_pg2
ROM:7A50 60			     RTS
ROM:7A50	     ; End of function get_line_addr_pgs_1_2
ROM:7A50
ROM:7A51
ROM:7A51	     ; =============== S U B R O U T I N E =======================================
ROM:7A51
ROM:7A51
ROM:7A51	     gcls1:					     ; CODE XREF: read_disk_and_chk_sig:display_title_screenp
ROM:7A51							     ; ROM:cls_and_display_game_statusp ...
ROM:7A51 A9 20			     LDA     #$20 ; ' '              ; starting MSB
ROM:7A53 A2 40			     LDX     #$40 ; '@'              ; ending MSB
ROM:7A55 D0 04			     BNE     loc_7A5B		     ; (always)
ROM:7A57
ROM:7A57	     gcls2:					     ; CODE XREF: ROM:77DCp
ROM:7A57							     ; ROM:cls_and_display_high_scoresp ...
ROM:7A57 A9 40			     LDA     #$40 ; '@'              ; starting MSB
ROM:7A59 A2 60			     LDX     #$60 ; '`'              ; ending MSB
ROM:7A5B
ROM:7A5B	     loc_7A5B:					     ; CODE XREF: gcls1+4j
ROM:7A5B 85 0B			     STA     $B			     ; msb of hires address
ROM:7A5D A9 00			     LDA     #0
ROM:7A5F 85 0A			     STA     $A			     ; lsb of address
ROM:7A61 A8			     TAY
ROM:7A62 A9 80			     LDA     #$80 ; ''              ; byte to write
ROM:7A64
ROM:7A64	     loc_7A64:					     ; CODE XREF: gcls1+16j
ROM:7A64							     ; gcls1+1Cj
ROM:7A64 91 0A			     STA     ($A),Y		     ; write byte to video
ROM:7A66 C8			     INY			     ; next address
ROM:7A67 D0 FB			     BNE     loc_7A64		     ; loop 256	times
ROM:7A69 E6 0B			     INC     $B			     ; inc MSB
ROM:7A6B E4 0B			     CPX     $B			     ; done?
ROM:7A6D D0 F5			     BNE     loc_7A64		     ; no, loop
ROM:7A6F 60			     RTS
ROM:7A6F	     ; End of function gcls1
ROM:7A6F
ROM:7A70
ROM:7A70	     ; =============== S U B R O U T I N E =======================================
ROM:7A70
ROM:7A70
ROM:7A70	     display_no_lives:				     ; CODE XREF: ROM:6141p
ROM:7A70							     ; read_controls:loc_6A67p	...
ROM:7A70 A5 98			     LDA     no_lives
ROM:7A72 A2 10			     LDX     #16		     ; col=16
ROM:7A74
ROM:7A74	     display_byte:				     ; CODE XREF: display_level+4j
ROM:7A74 86 85			     STX     col
ROM:7A76 20 F8 7A		     JSR     cnv_byte_to_3_digits
ROM:7A79 A9 10			     LDA     #16		     ; row=16
ROM:7A7B 85 86			     STA     row
ROM:7A7D A5 89			     LDA     hundreds
ROM:7A7F 20 15 7B		     JSR     display_digit
ROM:7A82 A5 8A			     LDA     tens
ROM:7A84 20 15 7B		     JSR     display_digit
ROM:7A87 A5 8B			     LDA     units
ROM:7A89 4C 15 7B		     JMP     display_digit
ROM:7A89	     ; End of function display_no_lives
ROM:7A89
ROM:7A8C
ROM:7A8C	     ; =============== S U B R O U T I N E =======================================
ROM:7A8C
ROM:7A8C
ROM:7A8C	     display_level:				     ; CODE XREF: ROM:7A28p
ROM:7A8C							     ; wipe_or_draw_level+26p
ROM:7A8C A5 A6			     LDA     level
ROM:7A8E A2 19			     LDX     #25		     ; col=25
ROM:7A90 D0 E2			     BNE     display_byte	     ; always
ROM:7A90	     ; End of function display_level
ROM:7A90
ROM:7A92
ROM:7A92	     ; =============== S U B R O U T I N E =======================================
ROM:7A92
ROM:7A92
ROM:7A92	     update_and_display_score:			     ; CODE XREF: ROM:612Cp
ROM:7A92							     ; ROM:6BE0p ...
ROM:7A92 18			     CLC			     ; clear carry
ROM:7A93 F8			     SED			     ; set decimal mode	(BCD)
ROM:7A94 65 8E			     ADC     score_1e1_1
ROM:7A96 85 8E			     STA     score_1e1_1
ROM:7A98 98			     TYA
ROM:7A99 65 8F			     ADC     score_1e3_1e2
ROM:7A9B 85 8F			     STA     score_1e3_1e2
ROM:7A9D A9 00			     LDA     #0
ROM:7A9F 65 90			     ADC     score_1e5_1e4
ROM:7AA1 85 90			     STA     score_1e5_1e4
ROM:7AA3 A9 00			     LDA     #0
ROM:7AA5 65 91			     ADC     score_1e6		     ; millions
ROM:7AA7 85 91			     STA     score_1e6
ROM:7AA9 D8			     CLD			     ; clear decimal flag
ROM:7AAA A9 05			     LDA     #5			     ; col=5
ROM:7AAC 85 85			     STA     col
ROM:7AAE A9 10			     LDA     #16		     ; row=16
ROM:7AB0 85 86			     STA     row
ROM:7AB2 A5 91			     LDA     score_1e6
ROM:7AB4 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7AB7 A5 8B			     LDA     units
ROM:7AB9 20 15 7B		     JSR     display_digit	     ; millions
ROM:7ABC A5 90			     LDA     score_1e5_1e4
ROM:7ABE 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7AC1 A5 8A			     LDA     tens
ROM:7AC3 20 15 7B		     JSR     display_digit	     ; hundreds	of thousands
ROM:7AC6 A5 8B			     LDA     units
ROM:7AC8 20 15 7B		     JSR     display_digit	     ; tens of thousands
ROM:7ACB A5 8F			     LDA     score_1e3_1e2
ROM:7ACD 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7AD0 A5 8A			     LDA     tens
ROM:7AD2 20 15 7B		     JSR     display_digit	     ; thousands
ROM:7AD5 A5 8B			     LDA     units
ROM:7AD7 20 15 7B		     JSR     display_digit	     ; hundreds
ROM:7ADA A5 8E			     LDA     score_1e1_1
ROM:7ADC 20 E9 7A		     JSR     cnv_bcd_to_2_digits
ROM:7ADF A5 8A			     LDA     tens
ROM:7AE1 20 15 7B		     JSR     display_digit	     ; tens
ROM:7AE4 A5 8B			     LDA     units
ROM:7AE6 4C 15 7B		     JMP     display_digit	     ; units
ROM:7AE6	     ; End of function update_and_display_score
ROM:7AE6
ROM:7AE9
ROM:7AE9	     ; =============== S U B R O U T I N E =======================================
ROM:7AE9
ROM:7AE9
ROM:7AE9	     cnv_bcd_to_2_digits:			     ; CODE XREF: ROM:7949p
ROM:7AE9							     ; ROM:795Bp ...
ROM:7AE9 85 8A			     STA     tens		     ; tens
ROM:7AEB 29 0F			     AND     #$F
ROM:7AED 85 8B			     STA     units		     ; units
ROM:7AEF A5 8A			     LDA     tens
ROM:7AF1 4A			     LSR     A
ROM:7AF2 4A			     LSR     A
ROM:7AF3 4A			     LSR     A
ROM:7AF4 4A			     LSR     A			     ; high to low nibble
ROM:7AF5 85 8A			     STA     tens		     ; tens
ROM:7AF7 60			     RTS
ROM:7AF7	     ; End of function cnv_bcd_to_2_digits
ROM:7AF7
ROM:7AF8
ROM:7AF8	     ; =============== S U B R O U T I N E =======================================
ROM:7AF8
ROM:7AF8
ROM:7AF8	     cnv_byte_to_3_digits:			     ; CODE XREF: ROM:792Cp
ROM:7AF8							     ; display_no_lives+6p ...
ROM:7AF8 A2 00			     LDX     #0
ROM:7AFA 86 8A			     STX     tens
ROM:7AFC 86 89			     STX     hundreds
ROM:7AFE
ROM:7AFE	     loc_7AFE:					     ; CODE XREF: cnv_byte_to_3_digits+Ej
ROM:7AFE C9 64			     CMP     #100		     ; >=100?
ROM:7B00 90 06			     BCC     loc_7B08		     ; no, skip
ROM:7B02 E6 89			     INC     hundreds
ROM:7B04 E9 64			     SBC     #100
ROM:7B06 D0 F6			     BNE     loc_7AFE		     ; loop counting 100's
ROM:7B08
ROM:7B08	     loc_7B08:					     ; CODE XREF: cnv_byte_to_3_digits+8j
ROM:7B08							     ; cnv_byte_to_3_digits+18j
ROM:7B08 C9 0A			     CMP     #10		     ; >=10?
ROM:7B0A 90 06			     BCC     loc_7B12		     ; no, skip
ROM:7B0C E6 8A			     INC     tens
ROM:7B0E E9 0A			     SBC     #10
ROM:7B10 D0 F6			     BNE     loc_7B08		     ; loop counting tens
ROM:7B12
ROM:7B12	     loc_7B12:					     ; CODE XREF: cnv_byte_to_3_digits+12j
ROM:7B12 85 8B			     STA     units
ROM:7B14 60			     RTS
ROM:7B14	     ; End of function cnv_byte_to_3_digits
ROM:7B14
ROM:7B15
ROM:7B15	     ; =============== S U B R O U T I N E =======================================
ROM:7B15
ROM:7B15
ROM:7B15	     display_digit:				     ; CODE XREF: ROM:78DAp
ROM:7B15							     ; ROM:78DFp ...
ROM:7B15 18			     CLC
ROM:7B16 69 3B			     ADC     #$3B ; ';'              ; convert to 'ascii'
ROM:7B18 A6 87			     LDX     display_char_page
ROM:7B1A E0 40			     CPX     #$40 ; '@'              ; page 2?
ROM:7B1C F0 06			     BEQ     loc_7B24		     ; yes, go
ROM:7B1E 20 AA 82		     JSR     display_char_pg1
ROM:7B21 E6 85			     INC     col
ROM:7B23 60			     RTS
ROM:7B24	     ; ---------------------------------------------------------------------------
ROM:7B24
ROM:7B24	     loc_7B24:					     ; CODE XREF: display_digit+7j
ROM:7B24 20 B0 82		     JSR     display_char_pg2
ROM:7B27 E6 85			     INC     col		     ; next column
ROM:7B29 60			     RTS
ROM:7B29	     ; End of function display_digit
ROM:7B29
ROM:7B2A
ROM:7B2A	     ; =============== S U B R O U T I N E =======================================
ROM:7B2A
ROM:7B2A
ROM:7B2A	     remap_character:				     ; CODE XREF: display_character+4p
ROM:7B2A							     ; ROM:8585p
ROM:7B2A C9 C1			     CMP     #$C1 ; 'Á'              ; <'A' - control character?
ROM:7B2C 90 04			     BCC     loc_7B32		     ; yes, skip
ROM:7B2E C9 DB			     CMP     #$DB ; 'Û'              ; <'Z'+1 - alphabetical?
ROM:7B30 90 2E			     BCC     loc_7B60		     ; yes, go
ROM:7B32
ROM:7B32	     loc_7B32:					     ; CODE XREF: remap_character+2j
ROM:7B32 A2 7C			     LDX     #$7C ; '|'
ROM:7B34 C9 A0			     CMP     #$A0 ; ' '              ; space?
ROM:7B36 F0 27			     BEQ     loc_7B5F		     ; yes, go
ROM:7B38 A2 DB			     LDX     #$DB ; 'Û'
ROM:7B3A C9 BE			     CMP     #$BE ; '¾'              ; '>'
ROM:7B3C F0 21			     BEQ     loc_7B5F
ROM:7B3E E8			     INX
ROM:7B3F C9 AE			     CMP     #$AE ; '®'              ; '.'
ROM:7B41 F0 1C			     BEQ     loc_7B5F
ROM:7B43 E8			     INX
ROM:7B44 C9 A8			     CMP     #$A8 ; '¨'              ; '('
ROM:7B46 F0 17			     BEQ     loc_7B5F
ROM:7B48 E8			     INX
ROM:7B49 C9 A9			     CMP     #$A9 ; '©'              ; ')'
ROM:7B4B F0 12			     BEQ     loc_7B5F
ROM:7B4D E8			     INX
ROM:7B4E C9 AF			     CMP     #$AF ; '¯'              ; '/'
ROM:7B50 F0 0D			     BEQ     loc_7B5F
ROM:7B52 E8			     INX
ROM:7B53 C9 AD			     CMP     #$AD ; '­'              ; '-'
ROM:7B55 F0 08			     BEQ     loc_7B5F
ROM:7B57 E8			     INX
ROM:7B58 C9 BC			     CMP     #$BC ; '¼'              ; '<'
ROM:7B5A F0 03			     BEQ     loc_7B5F
ROM:7B5C A9 10			     LDA     #$10
ROM:7B5E 60			     RTS
ROM:7B5F	     ; ---------------------------------------------------------------------------
ROM:7B5F
ROM:7B5F	     loc_7B5F:					     ; CODE XREF: remap_character+Cj
ROM:7B5F							     ; remap_character+12j ...
ROM:7B5F 8A			     TXA			     ; re-mapped character
ROM:7B60
ROM:7B60	     loc_7B60:					     ; CODE XREF: remap_character+6j
ROM:7B60 38			     SEC
ROM:7B61 E9 7C			     SBC     #$7C ; '|'              ; 0-base characters
ROM:7B63 60			     RTS
ROM:7B63	     ; End of function remap_character
ROM:7B63
ROM:7B64
ROM:7B64	     ; =============== S U B R O U T I N E =======================================
ROM:7B64
ROM:7B64
ROM:7B64	     display_character:				     ; CODE XREF: ROM:78E7p
ROM:7B64							     ; ROM:790Cp ...
ROM:7B64 C9 8D			     CMP     #$8D ; ''              ; carriage-return?
ROM:7B66 F0 15			     BEQ     cr			     ; yes, go
ROM:7B68 20 2A 7B		     JSR     remap_character
ROM:7B6B A6 87			     LDX     display_char_page
ROM:7B6D E0 40			     CPX     #$40 ; '@'              ; page 2?
ROM:7B6F F0 06			     BEQ     loc_7B77		     ; yes, skip
ROM:7B71 20 AA 82		     JSR     display_char_pg1	     ; switch to page 1
ROM:7B74 E6 85			     INC     col
ROM:7B76 60			     RTS
ROM:7B77	     ; ---------------------------------------------------------------------------
ROM:7B77
ROM:7B77	     loc_7B77:					     ; CODE XREF: display_character+Bj
ROM:7B77 20 B0 82		     JSR     display_char_pg2
ROM:7B7A E6 85			     INC     col
ROM:7B7C 60			     RTS
ROM:7B7D	     ; ---------------------------------------------------------------------------
ROM:7B7D
ROM:7B7D	     cr:					     ; CODE XREF: ROM:loc_798Cp
ROM:7B7D							     ; display_character+2j
ROM:7B7D E6 86			     INC     row		     ; next line
ROM:7B7F A9 00			     LDA     #0
ROM:7B81 85 85			     STA     col		     ; column=0
ROM:7B83 60			     RTS
ROM:7B83	     ; End of function display_character
ROM:7B83
ROM:7B84	     ; ---------------------------------------------------------------------------
ROM:7B84
ROM:7B84	     enter_board_editor:			     ; CODE XREF: ROM:jmp_board_editorj
ROM:7B84 A9 00			     LDA     #0
ROM:7B86 85 8E			     STA     score_1e1_1
ROM:7B88 85 8F			     STA     score_1e3_1e2
ROM:7B8A 85 90			     STA     score_1e5_1e4
ROM:7B8C 85 91			     STA     score_1e6
ROM:7B8E A5 36			     LDA     $36
ROM:7B90 85 24			     STA     $24
ROM:7B92 A5 37			     LDA     $37
ROM:7B94 85 25			     STA     $25
ROM:7B96 A9 05			     LDA     #5
ROM:7B98 85 98			     STA     no_lives
ROM:7B9A 85 A7			     STA     attract_mode
ROM:7B9C A5 95			     LDA     paddles_detected
ROM:7B9E 8D 77 7C		     STA     $7C77
ROM:7BA1 A9 CB			     LDA     #$CB ; 'Ë'
ROM:7BA3 85 95			     STA     paddles_detected
ROM:7BA5 8D 54 C0		     STA     $C054		     ; select text/graphics page 1
ROM:7BA8 A5 96			     LDA     level_0_based
ROM:7BAA C9 96			     CMP     #150
ROM:7BAC 90 04			     BCC     loc_7BB2
ROM:7BAE A9 00			     LDA     #0
ROM:7BB0 85 96			     STA     level_0_based
ROM:7BB2	     ; START OF	FUNCTION CHUNK FOR sub_823D
ROM:7BB2
ROM:7BB2	     loc_7BB2:					     ; CODE XREF: ROM:7BACj
ROM:7BB2							     ; sub_823D-623j ...
ROM:7BB2 20 51 7A		     JSR     gcls1
ROM:7BB5 A9 20			     LDA     #$20 ; ' '              ; hires page 1
ROM:7BB7 85 87			     STA     display_char_page
ROM:7BB9 A9 00			     LDA     #0
ROM:7BBB 85 85			     STA     col		     ; =0
ROM:7BBD 85 86			     STA     row		     ; =0
ROM:7BBF 20 E0 86		     JSR     display_message
ROM:7BBF	     ; END OF FUNCTION CHUNK FOR sub_823D
ROM:7BBF	     ; ---------------------------------------------------------------------------
ROM:7BC2 A0 A0 CC CF+aLodeRunnerBoardEditor:.BYTE $A0, $A0, $CC, $CF, $C4, $C5,	$A0, $D2, $D5, $CE, $CE, $C5 ; "  LODE RUNNER BOARD EDITOR\n"
ROM:7BC2 C4 C5 A0 D2+		     .BYTE $D2,	$A0, $C2, $CF, $C1, $D2, $C4, $A0, $C5,	$C4, $C9, $D4
ROM:7BC2 D5 CE CE C5+		     .BYTE $CF,	$D2, $8D
ROM:7BDD AD AD AD AD+aDashes2:	     .BYTE $AD,	$AD, $AD, $AD, $AD, $AD, $AD, $AD, $AD,	$AD, $AD, $AD
ROM:7BDD AD AD AD AD+		     .BYTE $AD,	$AD, $AD, $AD, $AD, $AD, $AD, $AD, $AD,	$AD, $AD, $AD
ROM:7BDD AD AD AD AD+		     .BYTE $AD,	$AD, $AD, $AD, $8D
ROM:7BFA A0 A0 BC C5+aESCAbortsAnyCommand:.BYTE	$A0, $A0, $BC, $C5, $D3, $C3, $BE, $A0,	$C1, $C2, $CF, $D2 ; "	<ESC> ABORTS ANY COMMAND\n"
ROM:7BFA D3 C3 BE A0+		     .BYTE $D4,	$D3, $A0, $C1, $CE, $D9, $A0, $C3, $CF,	$CD, $CD, $C1
ROM:7BFA C1 C2 CF D2+		     .BYTE $CE,	$C4, $8D
ROM:7C15 00			     .BYTE   0
ROM:7C16	     ; ---------------------------------------------------------------------------
ROM:7C16	     ; START OF	FUNCTION CHUNK FOR sub_823D
ROM:7C16
ROM:7C16	     loc_7C16:					     ; CODE XREF: ROM:7C3Ej
ROM:7C16							     ; ROM:7CB6j ...
ROM:7C16 A5 86			     LDA     row
ROM:7C18 C9 09			     CMP     #9
ROM:7C1A B0 96			     BCS     loc_7BB2
ROM:7C1C 20 E0 86		     JSR     display_message
ROM:7C1C	     ; ---------------------------------------------------------------------------
ROM:7C1F 8D C3 CF CD+aCommand:	     .BYTE $8D,	$C3, $CF, $CD, $CD, $C1, $CE, $C4, $BE ; "\nCOMMAND>"
ROM:7C28 00			     .BYTE   0
ROM:7C28	     ; END OF FUNCTION CHUNK FOR sub_823D
ROM:7C29	     ; ---------------------------------------------------------------------------
ROM:7C29 20 3D 82		     JSR     sub_823D
ROM:7C2C A2 00			     LDX     #0
ROM:7C2E
ROM:7C2E	     loc_7C2E:					     ; CODE XREF: ROM:7C39j
ROM:7C2E BC 4D 7C		     LDY     $7C4D,X
ROM:7C31 F0 08			     BEQ     loc_7C3B
ROM:7C33 DD 4D 7C		     CMP     $7C4D,X
ROM:7C36 F0 09			     BEQ     loc_7C41
ROM:7C38 E8			     INX
ROM:7C39 D0 F3			     BNE     loc_7C2E
ROM:7C3B
ROM:7C3B	     loc_7C3B:					     ; CODE XREF: ROM:7C31j
ROM:7C3B							     ; ROM:loc_7C8Bj ...
ROM:7C3B 20 CE 86		     JSR     sound1
ROM:7C3E 4C 16 7C		     JMP     loc_7C16
ROM:7C41	     ; ---------------------------------------------------------------------------
ROM:7C41
ROM:7C41	     loc_7C41:					     ; CODE XREF: ROM:7C36j
ROM:7C41 8A			     TXA			     ; entry
ROM:7C42 0A			     ASL     A			     ; word offset
ROM:7C43 AA			     TAX
ROM:7C44 BD 55 7C		     LDA     off_7C54+1,X
ROM:7C47 48			     PHA
ROM:7C48 BD 54 7C		     LDA     off_7C54,X
ROM:7C4B 48			     PHA
ROM:7C4C 60			     RTS
ROM:7C4C	     ; ---------------------------------------------------------------------------
ROM:7C4D D0			     .BYTE $D0 ; Ð
ROM:7C4E C3			     .BYTE $C3 ; Ã
ROM:7C4F C5			     .BYTE $C5 ; Å
ROM:7C50 CD			     .BYTE $CD ; Í
ROM:7C51 C9			     .BYTE $C9 ; É
ROM:7C52 D3			     .BYTE $D3 ; Ó
ROM:7C53 00			     .BYTE   0
ROM:7C54 5F 7C	     off_7C54:	     .WORD off_7C5E+1		     ; DATA XREF: ROM:7C48r
ROM:7C54							     ; ROM:7C44r
ROM:7C56 8D 7C			     .WORD loc_7C8B+2		     ; clear level
ROM:7C58 BB 7C			     .WORD loc_7CB9+2		     ; edit level
ROM:7C5A D7 7C			     .WORD loc_7CD5+2		     ; move level
ROM:7C5C 5C 7D			     .WORD loc_7D5A+2		     ; initialize
ROM:7C5E 74 7E	     off_7C5E:	     .WORD loc_7E72+2		     ; DATA XREF: ROM:off_7C54o
ROM:7C5E							     ; clear score file
ROM:7C60	     ; ---------------------------------------------------------------------------
ROM:7C60 20 E0 86		     JSR     display_message
ROM:7C60	     ; ---------------------------------------------------------------------------
ROM:7C63 8D BE BE D0+aPlayLevel:     .BYTE $8D,	$BE, $BE, $D0, $CC, $C1, $D9, $A0, $CC,	$C5, $D6, $C5 ;	"\n>>PLAY LEVEL"
ROM:7C63 CC C1 D9 A0+		     .BYTE $CC
ROM:7C70 00			     .BYTE   0
ROM:7C71	     ; ---------------------------------------------------------------------------
ROM:7C71 20 7B 81		     JSR     sub_817B
ROM:7C74 B0 15			     BCS     loc_7C8B
ROM:7C76
ROM:7C76	     loc_7C76:
ROM:7C76 A9 00			     LDA     #0
ROM:7C78 85 95			     STA     paddles_detected
ROM:7C7A A9 03			     LDA     #3
ROM:7C7C 85 A7			     STA     attract_mode
ROM:7C7E A9 01			     LDA     #1
ROM:7C80 85 9D			     STA     game_active
ROM:7C82 A5 96			     LDA     level_0_based
ROM:7C84 F0 02			     BEQ     loc_7C88
ROM:7C86 46 9D			     LSR     game_active
ROM:7C88
ROM:7C88	     loc_7C88:					     ; CODE XREF: ROM:7C84j
ROM:7C88 4C 56 60		     JMP     zero_score_and_init_game
ROM:7C8B	     ; ---------------------------------------------------------------------------
ROM:7C8B
ROM:7C8B	     loc_7C8B:					     ; CODE XREF: ROM:7C74j
ROM:7C8B							     ; DATA XREF: ROM:7C56o
ROM:7C8B 4C 3B 7C		     JMP     loc_7C3B
ROM:7C8E	     ; ---------------------------------------------------------------------------
ROM:7C8E 20 E0 86		     JSR     display_message
ROM:7C8E	     ; ---------------------------------------------------------------------------
ROM:7C91 8D BE BE C3+aClearLevel:    .BYTE $8D,	$BE, $BE, $C3, $CC, $C5, $C1, $D2, $A0,	$CC, $C5, $D6 ;	"\n>>CLEAR LEVEL"
ROM:7C91 CC C5 C1 D2+		     .BYTE $C5,	$CC
ROM:7C9F 00			     .BYTE   0
ROM:7CA0	     ; ---------------------------------------------------------------------------
ROM:7CA0 20 7B 81		     JSR     sub_817B
ROM:7CA3 B0 14			     BCS     loc_7CB9
ROM:7CA5 20 7F 80		     JSR     sub_807F
ROM:7CA8 A0 00			     LDY     #0
ROM:7CAA 98			     TYA
ROM:7CAB
ROM:7CAB	     loc_7CAB:					     ; CODE XREF: ROM:7CAFj
ROM:7CAB 99 00 0D		     STA     $D00,Y
ROM:7CAE C8			     INY
ROM:7CAF D0 FA			     BNE     loc_7CAB
ROM:7CB1 A9 02			     LDA     #2
ROM:7CB3 20 0E 63		     JSR     read_level_data
ROM:7CB6 4C 16 7C		     JMP     loc_7C16
ROM:7CB9	     ; ---------------------------------------------------------------------------
ROM:7CB9
ROM:7CB9	     loc_7CB9:					     ; CODE XREF: ROM:7CA3j
ROM:7CB9							     ; DATA XREF: ROM:7C58o
ROM:7CB9 4C 3B 7C		     JMP     loc_7C3B
ROM:7CBC	     ; ---------------------------------------------------------------------------
ROM:7CBC 20 E0 86		     JSR     display_message
ROM:7CBC	     ; ---------------------------------------------------------------------------
ROM:7CBF 8D BE BE C5+aEditLevel:     .BYTE $8D,	$BE, $BE, $C5, $C4, $C9, $D4, $A0, $CC,	$C5, $D6, $C5 ;	"\n>>EDIT LEVEL"
ROM:7CBF C4 C9 D4 A0+		     .BYTE $CC
ROM:7CCC 00			     .BYTE   0
ROM:7CCD	     ; ---------------------------------------------------------------------------
ROM:7CCD 20 7B 81		     JSR     sub_817B
ROM:7CD0 B0 03			     BCS     loc_7CD5
ROM:7CD2 4C 01 7F		     JMP     loc_7F01
ROM:7CD5	     ; ---------------------------------------------------------------------------
ROM:7CD5
ROM:7CD5	     loc_7CD5:					     ; CODE XREF: ROM:7CD0j
ROM:7CD5							     ; DATA XREF: ROM:7C5Ao
ROM:7CD5 4C 3B 7C		     JMP     loc_7C3B
ROM:7CD8	     ; ---------------------------------------------------------------------------
ROM:7CD8 20 E0 86		     JSR     display_message
ROM:7CD8	     ; ---------------------------------------------------------------------------
ROM:7CDB 8D			     .BYTE $8D ; 
ROM:7CDC BE BE CD CF+aMoveLevel:     .BYTE $BE,	$BE, $CD, $CF, $D6, $C5, $A0, $CC, $C5,	$D6, $C5, $CC ;	">>MOVE	LEVEL"
ROM:7CE8 00			     .BYTE   0
ROM:7CE9	     ; ---------------------------------------------------------------------------
ROM:7CE9 20 7B 81		     JSR     sub_817B
ROM:7CEC B0 6C			     BCS     loc_7D5A
ROM:7CEE 8C 4F 82		     STY     $824F
ROM:7CF1 20 E0 86		     JSR     display_message
ROM:7CF1	     ; ---------------------------------------------------------------------------
ROM:7CF4 A0 D4 CF A0+aToLevel:	     .BYTE $A0,	$D4, $CF, $A0, $CC, $C5, $D6, $C5, $CC ; " TO LEVEL"
ROM:7CFD 00			     .BYTE   0
ROM:7CFE	     ; ---------------------------------------------------------------------------
ROM:7CFE 20 7B 81		     JSR     sub_817B
ROM:7D01 B0 57			     BCS     loc_7D5A
ROM:7D03 8C 50 82		     STY     $8250
ROM:7D06 20 E0 86		     JSR     display_message
ROM:7D06	     ; ---------------------------------------------------------------------------
ROM:7D09 8D A0 A0 D3+aSourceDiskette:.BYTE $8D,	$A0, $A0, $D3, $CF, $D5, $D2, $C3, $C5,	$A0, $C4, $C9 ;	"\n  Source Diskette"
ROM:7D09 CF D5 D2 C3+		     .BYTE $D3,	$CB, $C5, $D4, $D4, $C5
ROM:7D1B 00			     .BYTE   0
ROM:7D1C	     ; ---------------------------------------------------------------------------
ROM:7D1C 20 3D 82		     JSR     sub_823D
ROM:7D1F 20 7F 80		     JSR     sub_807F
ROM:7D22 AD 4F 82		     LDA     $824F
ROM:7D25 85 96			     STA     $96
ROM:7D27 A9 01			     LDA     #1
ROM:7D29 20 0E 63		     JSR     read_level_data
ROM:7D2C 20 E0 86		     JSR     display_message
ROM:7D2C	     ; ---------------------------------------------------------------------------
ROM:7D2F 8D A0 A0 C4+aDestinationDiskette:.BYTE	$8D, $A0, $A0, $C4, $C5, $D3, $D4, $C9,	$CE, $C1, $D4, $C9 ; "\n  Destination Diskette"
ROM:7D2F C5 D3 D4 C9+		     .BYTE $CF,	$CE, $A0, $C4, $C9, $D3, $CB, $C5, $D4,	$D4, $C5
ROM:7D46 00			     .BYTE   0
ROM:7D47	     ; ---------------------------------------------------------------------------
ROM:7D47 20 3D 82		     JSR     sub_823D
ROM:7D4A 20 7F 80		     JSR     sub_807F
ROM:7D4D AD 50 82		     LDA     $8250
ROM:7D50 85 96			     STA     $96
ROM:7D52 A9 02			     LDA     #2
ROM:7D54 20 0E 63		     JSR     read_level_data
ROM:7D57 4C 16 7C		     JMP     loc_7C16
ROM:7D5A	     ; ---------------------------------------------------------------------------
ROM:7D5A
ROM:7D5A	     loc_7D5A:					     ; CODE XREF: ROM:7CECj
ROM:7D5A							     ; ROM:7D01j
ROM:7D5A							     ; DATA XREF: ...
ROM:7D5A 4C 3B 7C		     JMP     loc_7C3B
ROM:7D5D	     ; ---------------------------------------------------------------------------
ROM:7D5D 20 E0 86		     JSR     display_message
ROM:7D5D	     ; ---------------------------------------------------------------------------
ROM:7D60 8D BE BE C9+aInitialize:    .BYTE $8D,	$BE, $BE, $C9, $CE, $C9, $D4, $C9, $C1,	$CC, $C9, $DA ;	"\n>>INITIALIZE\n"
ROM:7D60 CE C9 D4 C9+		     .BYTE $C5,	$8D
ROM:7D6E A0 A0 D4 C8+		     .BYTE $A0,	$A0, $D4, $C8, $C9, $D3, $A0, $C6, $CF,	$D2, $CD, $C1 ;	"  THIS	FORMATS	THE DISKETTE\n"
ROM:7D6E C9 D3 A0 C6+		     .BYTE $D4,	$D3, $A0, $D4, $C8, $C5, $A0, $C4, $C9,	$D3, $CB, $C5
ROM:7D6E CF D2 CD C1+		     .BYTE $D4,	$D4, $C5, $8D
ROM:7D8A A0 A0 C6 CF+		     .BYTE $A0,	$A0, $C6, $CF, $D2, $A0, $D5, $D3, $C5,	$D2, $A0, $C3 ;	"  FOR USER CREATED LEVELS\n"
ROM:7D8A D2 A0 D5 D3+		     .BYTE $D2,	$C5, $C1, $D4, $C5, $C4, $A0, $CC, $C5,	$D6, $C5, $CC
ROM:7D8A C5 D2 A0 C3+		     .BYTE $D3,	$AE, $8D
ROM:7DA5 A0 A0 A8 C3+		     .BYTE $A0,	$A0, $A8, $C3, $C1, $D5, $D4, $C9, $CF,	$CE, $AE, $A0 ;	"   (CAUTION. IT ERASES	THE\n"
ROM:7DA5 C1 D5 D4 C9+		     .BYTE $C9,	$D4, $A0, $C5, $D2, $C1, $D3, $C5, $D3,	$A0, $D4, $C8
ROM:7DA5 CF CE AE A0+		     .BYTE $C5,	$8D
ROM:7DBF A0 A0 A0 C5+		     .BYTE $A0,	$A0, $A0, $C5, $CE, $D4, $C9, $D2, $C5,	$A0, $C4, $C9 ;	"  ENTIRE DISKETTE FIRST)\n\n"
ROM:7DBF CE D4 C9 D2+		     .BYTE $D3,	$CB, $C5, $D4, $D4, $C5, $A0, $C6, $C9,	$D2, $D3, $D4
ROM:7DBF C5 A0 C4 C9+		     .BYTE $A9,	$8D, $8D
ROM:7DDA A0 A0 C1 D2+		     .BYTE $A0,	$A0, $C1, $D2, $C5, $A0, $D9, $CF, $D5,	$A0, $D3, $D5 ;	" ARE YOU SURE (Y/N) "
ROM:7DDA C5 A0 D9 CF+		     .BYTE $D2,	$C5, $A0, $A8, $D9, $AF, $CE, $A9, $A0
ROM:7DEF 00			     .BYTE   0
ROM:7DF0	     ; ---------------------------------------------------------------------------
ROM:7DF0 20 3D 82		     JSR     sub_823D
ROM:7DF3 C9 D9			     CMP     #$D9 ; 'Ù'
ROM:7DF5 D0 7B			     BNE     loc_7E72
ROM:7DF7 EA			     NOP
ROM:7DF8 EA			     NOP
ROM:7DF9 EA			     NOP
ROM:7DFA EA			     NOP
ROM:7DFB EA			     NOP
ROM:7DFC EA			     NOP
ROM:7DFD EA			     NOP
ROM:7DFE EA			     NOP
ROM:7DFF EA			     NOP
ROM:7E00 EA			     NOP
ROM:7E01 EA			     NOP
ROM:7E02 EA			     NOP
ROM:7E03 EA			     NOP
ROM:7E04 EA			     NOP
ROM:7E05 EA			     NOP
ROM:7E06 A5 96			     LDA     $96
ROM:7E08 48			     PHA
ROM:7E09 A9 04			     LDA     #4
ROM:7E0B 20 0E 63		     JSR     read_level_data
ROM:7E0E A9 B2			     LDA     #$B2 ; '²'
ROM:7E10 8D F0 B7		     STA     $B7F0
ROM:7E13 A9 1D			     LDA     #$1D
ROM:7E15 8D F1 B7		     STA     $B7F1
ROM:7E18 A9 00			     LDA     #0
ROM:7E1A 8D ED B7		     STA     $B7ED
ROM:7E1D 8D EC B7		     STA     $B7EC
ROM:7E20 A9 02			     LDA     #2
ROM:7E22 8D F4 B7		     STA     $B7F4
ROM:7E25 20 38 63		     JSR     loc_6338
ROM:7E28 A9 E0			     LDA     #$E0 ; 'à'
ROM:7E2A 85 96			     STA     $96
ROM:7E2C A9 01			     LDA     #1
ROM:7E2E 20 0E 63		     JSR     read_level_data
ROM:7E31 A0 37			     LDY     #$37 ; '7'
ROM:7E33
ROM:7E33	     loc_7E33:					     ; CODE XREF: ROM:7E3Aj
ROM:7E33 B9 51 82		     LDA     $8251,Y
ROM:7E36 99 00 0D		     STA     $D00,Y
ROM:7E39 88			     DEY
ROM:7E3A 10 F7			     BPL     loc_7E33
ROM:7E3C A9 02			     LDA     #2
ROM:7E3E 20 0E 63		     JSR     read_level_data
ROM:7E41 A9 EF			     LDA     #$EF ; 'ï'
ROM:7E43 85 96			     STA     level_0_based
ROM:7E45 A9 01			     LDA     #1
ROM:7E47 20 0E 63		     JSR     read_level_data
ROM:7E4A A0 20			     LDY     #$20 ; ' '
ROM:7E4C
ROM:7E4C	     loc_7E4C:					     ; CODE XREF: ROM:7E53j
ROM:7E4C B9 89 82		     LDA     $8289,Y
ROM:7E4F 99 0B 0D		     STA     $D0B,Y
ROM:7E52 88			     DEY
ROM:7E53 10 F7			     BPL     loc_7E4C
ROM:7E55 A9 02			     LDA     #2
ROM:7E57 20 0E 63		     JSR     read_level_data
ROM:7E5A A9 01			     LDA     #1
ROM:7E5C 20 59 63		     JSR     read_disk_and_chk_sig
ROM:7E5F A0 0A			     LDY     #$A
ROM:7E61
ROM:7E61	     loc_7E61:					     ; CODE XREF: ROM:7E68j
ROM:7E61 B9 A8 63		     LDA     $63A8,Y
ROM:7E64 99 F4 1F		     STA     $1FF4,Y
ROM:7E67 88			     DEY
ROM:7E68 10 F7			     BPL     loc_7E61
ROM:7E6A A9 02			     LDA     #2
ROM:7E6C 20 59 63		     JSR     read_disk_and_chk_sig
ROM:7E6F 68			     PLA
ROM:7E70 85 96			     STA     level_0_based
ROM:7E72
ROM:7E72	     loc_7E72:					     ; CODE XREF: ROM:7DF5j
ROM:7E72							     ; DATA XREF: ROM:off_7C5Eo
ROM:7E72 4C 16 7C		     JMP     loc_7C16
ROM:7E75	     ; ---------------------------------------------------------------------------
ROM:7E75 20 E0 86		     JSR     display_message
ROM:7E75	     ; ---------------------------------------------------------------------------
ROM:7E78 8D BE BE C3+aClearScoreFile:.BYTE $8D,	$BE, $BE, $C3, $CC, $C5, $C1, $D2, $A0,	$D3, $C3, $CF ;	"\n>>CLEAR SCORE FILE\n"
ROM:7E78 CC C5 C1 D2+		     .BYTE $D2,	$C5, $A0, $C6, $C9, $CC, $C5, $8D
ROM:7E8C A0 A0 D4 C8+		     .BYTE $A0,	$A0, $D4, $C8, $C9, $D3, $A0, $C3, $CC,	$C5, $C1, $D2 ;	"  THIS	CLEARS THE HIGH\n"
ROM:7E8C C9 D3 A0 C3+		     .BYTE $D3,	$A0, $D4, $C8, $C5, $A0, $C8, $C9, $C7,	$C8, $8D
ROM:7EA3 A0 A0 D3 C3+		     .BYTE $A0,	$A0, $D3, $C3, $CF, $D2, $C5, $A0, $C6,	$C9, $CC, $C5 ;	"  SCORE FILE OF ALL\n"
ROM:7EA3 CF D2 C5 A0+		     .BYTE $A0,	$CF, $C6, $A0, $C1, $CC, $CC, $8D
ROM:7EB7 A0 A0 C5 CE+		     .BYTE $A0,	$A0, $C5, $CE, $D4, $D2, $C9, $C5, $D3,	$AE, $8D, $8D ;	"  ENTRIES.\n\n"
ROM:7EC3 A0 A0 C1 D2+		     .BYTE $A0,	$A0, $C1, $D2, $C5, $A0, $D9, $CF, $D5,	$A0, $D3, $D5 ;	"  ARE YOU SURE	(Y/N) "
ROM:7EC3 C5 A0 D9 CF+		     .BYTE $D2,	$C5, $A0, $A8, $D9, $AF, $CE, $A9, $A0
ROM:7ED8 00			     .BYTE   0
ROM:7ED9	     ; ---------------------------------------------------------------------------
ROM:7ED9 20 3D 82		     JSR     sub_823D
ROM:7EDC C9 D9			     CMP     #$D9 ; 'Ù'
ROM:7EDE D0 1E			     BNE     loc_7EFE
ROM:7EE0 A9 01			     LDA     #1
ROM:7EE2 20 59 63		     JSR     read_disk_and_chk_sig
ROM:7EE5 C9 00			     CMP     #0
ROM:7EE7 D0 06			     BNE     loc_7EEF
ROM:7EE9 20 06 81		     JSR     disk_not_lode_runner
ROM:7EEC 4C B2 7B		     JMP     loc_7BB2
ROM:7EEF	     ; ---------------------------------------------------------------------------
ROM:7EEF
ROM:7EEF	     loc_7EEF:					     ; CODE XREF: ROM:7EE7j
ROM:7EEF A0 4F			     LDY     #$4F ; 'O'
ROM:7EF1 A9 00			     LDA     #0
ROM:7EF3
ROM:7EF3	     loc_7EF3:					     ; CODE XREF: ROM:7EF7j
ROM:7EF3 99 00 1F		     STA     $1F00,Y
ROM:7EF6 88			     DEY
ROM:7EF7 10 FA			     BPL     loc_7EF3
ROM:7EF9 A9 02			     LDA     #2
ROM:7EFB 20 59 63		     JSR     read_disk_and_chk_sig
ROM:7EFE
ROM:7EFE	     loc_7EFE:					     ; CODE XREF: ROM:7EDEj
ROM:7EFE 4C 16 7C		     JMP     loc_7C16
ROM:7F01	     ; ---------------------------------------------------------------------------
ROM:7F01
ROM:7F01	     loc_7F01:					     ; CODE XREF: ROM:7CD2j
ROM:7F01							     ; ROM:7FE1j ...
ROM:7F01 20 57 7A		     JSR     gcls2
ROM:7F04 A9 40			     LDA     #$40 ; '@'
ROM:7F06 85 87			     STA     display_char_page
ROM:7F08 20 B3 79		     JSR     loc_79B3
ROM:7F0B A9 20			     LDA     #$20 ; ' '
ROM:7F0D 85 87			     STA     display_char_page
ROM:7F0F 20 7F 80		     JSR     sub_807F
ROM:7F12 A2 01			     LDX     #1
ROM:7F14 86 AD			     STX     $AD
ROM:7F16 CA			     DEX
ROM:7F17 20 38 62		     JSR     init_read_unpack_display_level
ROM:7F1A 90 03			     BCC     loc_7F1F
ROM:7F1C 4C 3B 7C		     JMP     loc_7C3B
ROM:7F1F	     ; ---------------------------------------------------------------------------
ROM:7F1F
ROM:7F1F	     loc_7F1F:					     ; CODE XREF: ROM:7F1Aj
ROM:7F1F A9 00			     LDA     #0
ROM:7F21 85 85			     STA     col		     ; =0
ROM:7F23 85 86			     STA     row		     ; =0
ROM:7F25	     ; START OF	FUNCTION CHUNK FOR sub_7F98
ROM:7F25
ROM:7F25	     loc_7F25:					     ; CODE XREF: sub_7F98-47j
ROM:7F25							     ; sub_7F98-27j ...
ROM:7F25 20 4B 81		     JSR     sub_814B
ROM:7F28 C9 BA			     CMP     #$BA ; 'º'
ROM:7F2A B0 28			     BCS     loc_7F54
ROM:7F2C C9 B0			     CMP     #$B0 ; '°'
ROM:7F2E 90 24			     BCC     loc_7F54
ROM:7F30 29 0F			     AND     #$F
ROM:7F32 85 1E			     STA     msg_char
ROM:7F34 A4 86			     LDY     row
ROM:7F36 B9 05 1C		     LDA     lsb_row_addr,Y
ROM:7F39 85 06			     STA     lsb_row_level_data_addr
ROM:7F3B B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:7F3E 85 07			     STA     msb_row_level_data_addr
ROM:7F40 A4 85			     LDY     col
ROM:7F42 A5 1E			     LDA     msg_char
ROM:7F44 51 06			     EOR     (lsb_row_level_data_addr),Y
ROM:7F46 F0 02			     BEQ     loc_7F4A
ROM:7F48 46 AD			     LSR     $AD
ROM:7F4A
ROM:7F4A	     loc_7F4A:					     ; CODE XREF: sub_7F98-52j
ROM:7F4A A5 1E			     LDA     msg_char
ROM:7F4C 91 06			     STA     (lsb_row_level_data_addr),Y
ROM:7F4E 20 AA 82		     JSR     display_char_pg1
ROM:7F51 4C 25 7F		     JMP     loc_7F25
ROM:7F54	     ; ---------------------------------------------------------------------------
ROM:7F54
ROM:7F54	     loc_7F54:					     ; CODE XREF: sub_7F98-6Ej
ROM:7F54							     ; sub_7F98-6Aj
ROM:7F54 85 1E			     STA     msg_char
ROM:7F56 A0 FF			     LDY     #$FF
ROM:7F58
ROM:7F58	     loc_7F58:					     ; CODE XREF: sub_7F98-38j
ROM:7F58 C8			     INY			     ; next entry
ROM:7F59 B9 62 81		     LDA     mystery_tbl,Y	     ; get entry
ROM:7F5C F0 10			     BEQ     loc_7F6E		     ; end of table? yes, exit
ROM:7F5E C5 1E			     CMP     msg_char		     ; match?
ROM:7F60 D0 F6			     BNE     loc_7F58		     ; no, loop
ROM:7F62 98			     TYA
ROM:7F63 0A			     ASL     A			     ; byte to word offset
ROM:7F64 A8			     TAY
ROM:7F65 B9 6C 81		     LDA     word_816B+1,Y
ROM:7F68 48			     PHA
ROM:7F69 B9 6B 81		     LDA     word_816B,Y
ROM:7F6C 48			     PHA
ROM:7F6D 60			     RTS			     ; jump to vector fn
ROM:7F6E	     ; ---------------------------------------------------------------------------
ROM:7F6E
ROM:7F6E	     loc_7F6E:					     ; CODE XREF: sub_7F98-3Cj
ROM:7F6E							     ; ROM:7F76j ...
ROM:7F6E 20 CE 86		     JSR     sound1
ROM:7F71 4C 25 7F		     JMP     loc_7F25
ROM:7F71	     ; END OF FUNCTION CHUNK FOR sub_7F98
ROM:7F74	     ; ---------------------------------------------------------------------------
ROM:7F74
ROM:7F74	     vec1_c9:					     ; top row?
ROM:7F74 A5 86			     LDA     row
ROM:7F76 F0 F6			     BEQ     loc_7F6E		     ; yes, exit
ROM:7F78 C6 86			     DEC     row		     ; row above
ROM:7F7A 10 A9			     BPL     loc_7F25		     ; always
ROM:7F7C
ROM:7F7C	     vec0_ca:					     ; left-most col?
ROM:7F7C A5 85			     LDA     col
ROM:7F7E F0 EE			     BEQ     loc_7F6E		     ; yes, exit
ROM:7F80 C6 85			     DEC     col		     ; column to left
ROM:7F82 10 A1			     BPL     loc_7F25		     ; always
ROM:7F84
ROM:7F84	     vec2_cb:
ROM:7F84 A5 85			     LDA     col
ROM:7F86 C9 1B			     CMP     #27		     ; right-most col?
ROM:7F88 B0 E4			     BCS     loc_7F6E		     ; yes, exit
ROM:7F8A E6 85			     INC     col		     ; column to right
ROM:7F8C D0 97			     BNE     loc_7F25
ROM:7F8E
ROM:7F8E	     vec3_cd:
ROM:7F8E A5 86			     LDA     row
ROM:7F90 C9 0F			     CMP     #15		     ; bottom row?
ROM:7F92 B0 DA			     BCS     loc_7F6E		     ; yes, exit
ROM:7F94 E6 86			     INC     row		     ; row below
ROM:7F96 D0 8D			     BNE     loc_7F25
ROM:7F98
ROM:7F98	     ; =============== S U B R O U T I N E =======================================
ROM:7F98
ROM:7F98
ROM:7F98	     sub_7F98:					     ; CODE XREF: ROM:vec4_93p
ROM:7F98							     ; ROM:8072p
ROM:7F98
ROM:7F98	     ; FUNCTION	CHUNK AT ROM:7F25 SIZE 0000004F	BYTES
ROM:7F98
ROM:7F98 A5 86			     LDA     row
ROM:7F9A 48			     PHA
ROM:7F9B A5 85			     LDA     col
ROM:7F9D 48			     PHA
ROM:7F9E A9 01			     LDA     #1
ROM:7FA0 20 59 63		     JSR     read_disk_and_chk_sig
ROM:7FA3 C9 00			     CMP     #0
ROM:7FA5 D0 06			     BNE     loc_7FAD
ROM:7FA7 20 06 81		     JSR     disk_not_lode_runner
ROM:7FAA 4C C5 7F		     JMP     loc_7FC5
ROM:7FAD	     ; ---------------------------------------------------------------------------
ROM:7FAD
ROM:7FAD	     loc_7FAD:					     ; CODE XREF: sub_7F98+Dj
ROM:7FAD C9 01			     CMP     #1
ROM:7FAF D0 06			     BNE     loc_7FB7
ROM:7FB1 20 98 80		     JSR     loc_8098
ROM:7FB4 4C C5 7F		     JMP     loc_7FC5
ROM:7FB7	     ; ---------------------------------------------------------------------------
ROM:7FB7
ROM:7FB7	     loc_7FB7:					     ; CODE XREF: sub_7F98+17j
ROM:7FB7 20 C7 62		     JSR     sub_62C7
ROM:7FBA 68			     PLA
ROM:7FBB 85 85			     STA     col
ROM:7FBD 68			     PLA
ROM:7FBE 85 86			     STA     row
ROM:7FC0 A9 01			     LDA     #1
ROM:7FC2 85 AD			     STA     $AD
ROM:7FC4 60			     RTS
ROM:7FC5	     ; ---------------------------------------------------------------------------
ROM:7FC5
ROM:7FC5	     loc_7FC5:					     ; CODE XREF: sub_7F98+12j
ROM:7FC5							     ; sub_7F98+1Cj
ROM:7FC5 A9 00			     LDA     #0
ROM:7FC7 85 85			     STA     col
ROM:7FC9 85 86			     STA     row
ROM:7FCB 4C 25 7F		     JMP     loc_7F25
ROM:7FCB	     ; End of function sub_7F98
ROM:7FCB
ROM:7FCE	     ; ---------------------------------------------------------------------------
ROM:7FCE
ROM:7FCE	     vec4_93:
ROM:7FCE 20 98 7F		     JSR     sub_7F98
ROM:7FD1 4C 25 7F		     JMP     loc_7F25
ROM:7FD4	     ; ---------------------------------------------------------------------------
ROM:7FD4
ROM:7FD4	     vec5_95:
ROM:7FD4 A5 96			     LDA     level_0_based
ROM:7FD6 C9 95			     CMP     #149		     ; last level?
ROM:7FD8
ROM:7FD8	     loc_7FD8:					     ; CODE XREF: ROM:7FE6j
ROM:7FD8 F0 94			     BEQ     loc_7F6E		     ; yes, exit
ROM:7FDA 20 F8 7F		     JSR     loc_7FF8
ROM:7FDD E6 96			     INC     level_0_based
ROM:7FDF E6 A6			     INC     level		     ; next level
ROM:7FE1 4C 01 7F		     JMP     loc_7F01
ROM:7FE4	     ; ---------------------------------------------------------------------------
ROM:7FE4
ROM:7FE4	     vec6_88:
ROM:7FE4 A5 96			     LDA     level_0_based
ROM:7FE6 F0 F0			     BEQ     loc_7FD8
ROM:7FE8 20 F8 7F		     JSR     loc_7FF8
ROM:7FEB C6 A6			     DEC     level
ROM:7FED C6 96			     DEC     level_0_based
ROM:7FEF 4C 01 7F		     JMP     loc_7F01
ROM:7FF2	     ; ---------------------------------------------------------------------------
ROM:7FF2
ROM:7FF2	     vec7_91:
ROM:7FF2 20 F8 7F		     JSR     loc_7FF8
ROM:7FF5 4C B2 7B		     JMP     loc_7BB2
ROM:7FF8	     ; ---------------------------------------------------------------------------
ROM:7FF8
ROM:7FF8	     loc_7FF8:					     ; CODE XREF: ROM:7FDAp
ROM:7FF8							     ; ROM:7FE8p ...
ROM:7FF8 A5 AD			     LDA     $AD
ROM:7FFA D0 79			     BNE     loc_8075
ROM:7FFC 20 57 7A		     JSR     gcls2
ROM:7FFF A9 40			     LDA     #$40 ; '@'
ROM:8001 85 87			     STA     display_char_page
ROM:8003 A9 00			     LDA     #0
ROM:8005 85 85			     STA     col
ROM:8007 85 86			     STA     row
ROM:8009 20 E0 86		     JSR     display_message
ROM:8009	     ; ---------------------------------------------------------------------------
ROM:800C CC C5 D6 C5+aLevelHasBeenChanged:.BYTE	$CC, $C5, $D6, $C5, $CC, $A0, $C8, $C1,	$D3, $A0, $C2, $C5 ; "LEVEL HAS	BEEN CHANGED BUT\n"
ROM:800C CC A0 C8 C1+		     .BYTE $C5,	$CE, $A0, $C3, $C8, $C1, $CE, $C7, $C5,	$C4, $A0, $C2
ROM:800C D3 A0 C2 C5+		     .BYTE $D5,	$D4, $8D
ROM:8027 CE CF D4 A0+		     .BYTE $CE,	$CF, $D4, $A0, $D3, $C1, $D6, $C5, $C4,	$AE, $A0, $C4 ;	"NOT SAVED. DO YOU WISH	TO\n"
ROM:8027 D3 C1 D6 C5+		     .BYTE $CF,	$A0, $D9, $CF, $D5, $A0, $D7, $C9, $D3,	$C8, $A0, $D4
ROM:8027 C4 AE A0 C4+		     .BYTE $CF,	$8D
ROM:8041 D3 C1 D6 C5+		     .BYTE $D3,	$C1, $D6, $C5, $A0, $CD, $CF, $C4, $C9,	$C6, $C9, $C5 ;	"SAVE MODIFIED LEVEL (Y/N) "
ROM:8041 A0 CD CF C4+		     .BYTE $C4,	$A0, $CC, $C5, $D6, $C5, $CC, $A0, $A8,	$D9, $AF, $CE
ROM:8041 C9 C6 C9 C5+		     .BYTE $A9,	$A0
ROM:805B 00			     .BYTE   0
ROM:805C	     ; ---------------------------------------------------------------------------
ROM:805C 20 CE 86		     JSR     sound1
ROM:805F 8D 55 C0		     STA     $C055		     ; select text/graphics page 2
ROM:8062
ROM:8062	     loc_8062:					     ; CODE XREF: ROM:8070j
ROM:8062 A9 00			     LDA     #0
ROM:8064 20 F3 85		     JSR     sub_85F3
ROM:8067 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:806A C9 CE			     CMP     #$CE ; 'Î'
ROM:806C F0 07			     BEQ     loc_8075
ROM:806E C9 D9			     CMP     #$D9 ; 'Ù'
ROM:8070 D0 F0			     BNE     loc_8062
ROM:8072 20 98 7F		     JSR     sub_7F98
ROM:8075
ROM:8075	     loc_8075:					     ; CODE XREF: ROM:7FFAj
ROM:8075							     ; ROM:806Cj
ROM:8075 8D 54 C0		     STA     $C054
ROM:8078 A9 00			     LDA     #0
ROM:807A 85 85			     STA     col
ROM:807C 85 86			     STA     row
ROM:807E 60			     RTS
ROM:807F
ROM:807F	     ; =============== S U B R O U T I N E =======================================
ROM:807F
ROM:807F
ROM:807F	     sub_807F:					     ; CODE XREF: ROM:7CA5p
ROM:807F							     ; ROM:7D1Fp ...
ROM:807F
ROM:807F	     ; FUNCTION	CHUNK AT ROM:8105 SIZE 00000001	BYTES
ROM:807F
ROM:807F A9 01			     LDA     #1
ROM:8081 20 59 63		     JSR     read_disk_and_chk_sig
ROM:8084 C9 00			     CMP     #0
ROM:8086 D0 06			     BNE     loc_808E
ROM:8088 20 06 81		     JSR     disk_not_lode_runner
ROM:808B 4C B2 7B		     JMP     loc_7BB2
ROM:808E	     ; ---------------------------------------------------------------------------
ROM:808E
ROM:808E	     loc_808E:					     ; CODE XREF: sub_807F+7j
ROM:808E C9 01			     CMP     #1
ROM:8090 D0 73			     BNE     locret_8105
ROM:8092 20 98 80		     JSR     loc_8098
ROM:8095 4C B2 7B		     JMP     loc_7BB2
ROM:8095	     ; End of function sub_807F
ROM:8095
ROM:8098	     ; ---------------------------------------------------------------------------
ROM:8098
ROM:8098	     loc_8098:					     ; CODE XREF: sub_7F98+19p
ROM:8098							     ; sub_807F+13p ...
ROM:8098 20 57 7A		     JSR     gcls2
ROM:809B A9 40			     LDA     #$40 ; '@'
ROM:809D 85 87			     STA     display_char_page
ROM:809F A9 00			     LDA     #0
ROM:80A1 85 85			     STA     col
ROM:80A3 85 86			     STA     row
ROM:80A5 20 E0 86		     JSR     display_message
ROM:80A5	     ; ---------------------------------------------------------------------------
ROM:80A8 D5 D3 C5 D2+aUserNotAllowedTo:.BYTE $D5, $D3, $C5, $D2, $A0, $CE, $CF,	$D4, $A0, $C1, $CC, $CC	; "USER	NOT ALLOWED TO\n"
ROM:80A8 A0 CE CF D4+		     .BYTE $CF,	$D7, $C5, $C4, $A0, $D4, $CF, $8D
ROM:80BC CD C1 CE C9+		     .BYTE $CD,	$C1, $CE, $C9, $D0, $D5, $CC, $C1, $D4,	$C5, $A0, $CD ;	"MANIPULATE MASTER DISKETTE."
ROM:80BC D0 D5 CC C1+		     .BYTE $C1,	$D3, $D4, $C5, $D2, $A0, $C4, $C9, $D3,	$CB, $C5, $D4
ROM:80BC D4 C5 A0 CD+		     .BYTE $D4,	$C5, $AE
ROM:80D7 00			     .BYTE   0
ROM:80D8	     ; ---------------------------------------------------------------------------
ROM:80D8
ROM:80D8	     hit_a_key_to_continue:			     ; CODE XREF: ROM:8148j
ROM:80D8 20 E0 86		     JSR     display_message
ROM:80D8	     ; ---------------------------------------------------------------------------
ROM:80DB 8D 8D C8 C9+aHitAKeyToContinue:.BYTE $8D, $8D,	$C8, $C9, $D4, $A0, $C1, $A0, $CB, $C5,	$D9, $A0 ; "\n\nHIT A KEY TO CONTINUE "
ROM:80DB D4 A0 C1 A0+		     .BYTE $D4,	$CF, $A0, $C3, $CF, $CE, $D4, $C9, $CE,	$D5, $C5, $A0
ROM:80F3 00			     .BYTE   0
ROM:80F4	     ; ---------------------------------------------------------------------------
ROM:80F4 20 CE 86		     JSR     sound1
ROM:80F7 8D 55 C0		     STA     $C055		     ; select text/graphics page 2
ROM:80FA A9 00			     LDA     #0
ROM:80FC 20 F3 85		     JSR     sub_85F3
ROM:80FF 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:8102 8D 54 C0		     STA     $C054		     ; select text/graphics page 1
ROM:8105	     ; START OF	FUNCTION CHUNK FOR sub_807F
ROM:8105
ROM:8105	     locret_8105:				     ; CODE XREF: sub_807F+11j
ROM:8105 60			     RTS
ROM:8105	     ; END OF FUNCTION CHUNK FOR sub_807F
ROM:8106	     ; ---------------------------------------------------------------------------
ROM:8106
ROM:8106	     disk_not_lode_runner:			     ; CODE XREF: ROM:6080p
ROM:8106							     ; ROM:7EE9p ...
ROM:8106 20 57 7A		     JSR     gcls2
ROM:8109 A9 40			     LDA     #$40 ; '@'              ; hires page 2
ROM:810B 85 87			     STA     display_char_page
ROM:810D A9 00			     LDA     #0
ROM:810F 85 85			     STA     col
ROM:8111 85 86			     STA     row
ROM:8113 20 E0 86		     JSR     display_message
ROM:8113	     ; ---------------------------------------------------------------------------
ROM:8116 C4 C9 D3 CB+aDisketteInDriveIsNotA:.BYTE $C4, $C9, $D3, $CB, $C5, $D4,	$D4, $C5, $A0, $C9, $CE, $A0 ; "DISKETTE IN DRIVE IS NOT A\n"
ROM:8116 C5 D4 D4 C5+		     .BYTE $C4,	$D2, $C9, $D6, $C5, $A0, $C9, $D3, $A0,	$CE, $CF, $D4
ROM:8116 A0 C9 CE A0+		     .BYTE $A0,	$C1, $8D
ROM:8131 CC CF C4 C5+		     .BYTE $CC,	$CF, $C4, $C5, $A0, $D2, $D5, $CE, $CE,	$C5, $D2, $A0 ;	"LODE RUNNER DATA DISK."
ROM:8131 A0 D2 D5 CE+		     .BYTE $C4,	$C1, $D4, $C1, $A0, $C4, $C9, $D3, $CB,	$AE
ROM:8147 00			     .BYTE   0
ROM:8148	     ; ---------------------------------------------------------------------------
ROM:8148 4C D8 80		     JMP     hit_a_key_to_continue
ROM:814B
ROM:814B	     ; =============== S U B R O U T I N E =======================================
ROM:814B
ROM:814B
ROM:814B	     sub_814B:					     ; CODE XREF: sub_7F98:loc_7F25p
ROM:814B A4 86			     LDY     row
ROM:814D B9 05 1C		     LDA     lsb_row_addr,Y
ROM:8150 85 06			     STA     lsb_row_level_data_addr
ROM:8152 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:8155 85 07			     STA     msb_row_level_data_addr
ROM:8157 A4 85			     LDY     col
ROM:8159 B1 06			     LDA     (lsb_row_level_data_addr),Y
ROM:815B 20 00 87		     JSR     blink_char_and_wait_for_key
ROM:815E 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:8161 60			     RTS
ROM:8161	     ; End of function sub_814B
ROM:8161
ROM:8161	     ; ---------------------------------------------------------------------------
ROM:8162 CA C9 CB CD+mystery_tbl:    .BYTE $CA,	$C9, $CB, $CD, $93, $95, $88, $91
ROM:8162 93 95 88 91						     ; DATA XREF: sub_7F98-3Fr
ROM:816A 00			     .BYTE   0			     ; J,I,K,M,?,?,?,?
ROM:816B 7B 7F	     word_816B:	     .WORD $7F7B		     ; DATA XREF: sub_7F98-2Fr
ROM:816B							     ; sub_7F98-33r
ROM:816D 73 7F			     .WORD $7F73
ROM:816F 83 7F			     .WORD $7F83
ROM:8171 8D 7F			     .WORD $7F8D
ROM:8173 CD 7F			     .WORD $7FCD
ROM:8175 D3 7F			     .WORD $7FD3
ROM:8177 E3 7F			     .WORD $7FE3
ROM:8179 F1 7F			     .WORD $7FF1
ROM:817B
ROM:817B	     ; =============== S U B R O U T I N E =======================================
ROM:817B
ROM:817B
ROM:817B	     sub_817B:					     ; CODE XREF: ROM:7C71p
ROM:817B							     ; ROM:7CA0p ...
ROM:817B A4 96			     LDY     level_0_based	     ; keyboard	entry?
ROM:817D C8			     INY
ROM:817E 98			     TYA
ROM:817F 20 F8 7A		     JSR     cnv_byte_to_3_digits
ROM:8182 A5 85			     LDA     col
ROM:8184 8D 4E 82		     STA     $824E
ROM:8187 A0 00			     LDY     #0
ROM:8189
ROM:8189	     loc_8189:					     ; CODE XREF: sub_817B+1Dj
ROM:8189 B9 89 00		     LDA     $89,Y
ROM:818C 8C 4D 82		     STY     $824D
ROM:818F 20 15 7B		     JSR     display_digit
ROM:8192 AC 4D 82		     LDY     $824D
ROM:8195 C8			     INY
ROM:8196 C0 03			     CPY     #3
ROM:8198 90 EF			     BCC     loc_8189
ROM:819A AD 4E 82		     LDA     $824E
ROM:819D 85 85			     STA     col
ROM:819F A0 00			     LDY     #0
ROM:81A1 8C 4D 82		     STY     $824D
ROM:81A4
ROM:81A4	     loc_81A4:					     ; CODE XREF: sub_817B+49j
ROM:81A4							     ; sub_817B+5Cj ...
ROM:81A4 AE 4D 82		     LDX     $824D
ROM:81A7 B5 89			     LDA     $89,X
ROM:81A9 18			     CLC
ROM:81AA 69 3B			     ADC     #$3B ; ';'
ROM:81AC 20 00 87		     JSR     blink_char_and_wait_for_key
ROM:81AF 8D 10 C0		     STA     $C010
ROM:81B2 C9 8D			     CMP     #$8D ; ''
ROM:81B4 F0 57			     BEQ     loc_820D
ROM:81B6 C9 88			     CMP     #$88 ; ''
ROM:81B8 D0 0D			     BNE     loc_81C7
ROM:81BA AE 4D 82		     LDX     $824D
ROM:81BD F0 48			     BEQ     loc_8207
ROM:81BF CE 4D 82		     DEC     $824D
ROM:81C2 C6 85			     DEC     col
ROM:81C4 4C A4 81		     JMP     loc_81A4
ROM:81C7	     ; ---------------------------------------------------------------------------
ROM:81C7
ROM:81C7	     loc_81C7:					     ; CODE XREF: sub_817B+3Dj
ROM:81C7 C9 95			     CMP     #$95 ; ''
ROM:81C9 D0 0F			     BNE     loc_81DA
ROM:81CB AE 4D 82		     LDX     $824D
ROM:81CE E0 02			     CPX     #2
ROM:81D0 F0 35			     BEQ     loc_8207
ROM:81D2 E6 85			     INC     col
ROM:81D4 EE 4D 82		     INC     $824D
ROM:81D7 4C A4 81		     JMP     loc_81A4
ROM:81DA	     ; ---------------------------------------------------------------------------
ROM:81DA
ROM:81DA	     loc_81DA:					     ; CODE XREF: sub_817B+4Ej
ROM:81DA C9 9B			     CMP     #$9B ; ''
ROM:81DC D0 03			     BNE     loc_81E1
ROM:81DE 4C 16 7C		     JMP     loc_7C16
ROM:81E1	     ; ---------------------------------------------------------------------------
ROM:81E1
ROM:81E1	     loc_81E1:					     ; CODE XREF: sub_817B+61j
ROM:81E1 C9 B0			     CMP     #$B0 ; '°'
ROM:81E3 90 22			     BCC     loc_8207
ROM:81E5 C9 BA			     CMP     #$BA ; 'º'
ROM:81E7 B0 1E			     BCS     loc_8207
ROM:81E9 38			     SEC
ROM:81EA E9 B0			     SBC     #$B0 ; '°'
ROM:81EC AC 4D 82		     LDY     $824D
ROM:81EF 99 89 00		     STA     $89,Y
ROM:81F2 20 15 7B		     JSR     display_digit
ROM:81F5 EE 4D 82		     INC     $824D
ROM:81F8 AD 4D 82		     LDA     $824D
ROM:81FB C9 03			     CMP     #3
ROM:81FD 90 A5			     BCC     loc_81A4
ROM:81FF CE 4D 82		     DEC     $824D
ROM:8202 C6 85			     DEC     col
ROM:8204 4C A4 81		     JMP     loc_81A4
ROM:8207	     ; ---------------------------------------------------------------------------
ROM:8207
ROM:8207	     loc_8207:					     ; CODE XREF: sub_817B+42j
ROM:8207							     ; sub_817B+55j ...
ROM:8207 20 CE 86		     JSR     sound1
ROM:820A 4C A4 81		     JMP     loc_81A4
ROM:820D	     ; ---------------------------------------------------------------------------
ROM:820D
ROM:820D	     loc_820D:					     ; CODE XREF: sub_817B+39j
ROM:820D AD 4E 82		     LDA     $824E		     ; translates level	to ascii??
ROM:8210 18			     CLC
ROM:8211 69 03			     ADC     #3
ROM:8213 85 85			     STA     col
ROM:8215 A9 00			     LDA     #0
ROM:8217 A6 89			     LDX     $89
ROM:8219 F0 08			     BEQ     loc_8223
ROM:821B 18			     CLC
ROM:821C
ROM:821C	     loc_821C:					     ; CODE XREF: sub_817B+A6j
ROM:821C 69 64			     ADC     #100
ROM:821E B0 1C			     BCS     locret_823C
ROM:8220 CA			     DEX
ROM:8221 D0 F9			     BNE     loc_821C
ROM:8223
ROM:8223	     loc_8223:					     ; CODE XREF: sub_817B+9Ej
ROM:8223 A6 8A			     LDX     $8A
ROM:8225 F0 08			     BEQ     loc_822F
ROM:8227 18			     CLC
ROM:8228
ROM:8228	     loc_8228:					     ; CODE XREF: sub_817B+B2j
ROM:8228 69 0A			     ADC     #10
ROM:822A B0 10			     BCS     locret_823C
ROM:822C CA			     DEX
ROM:822D D0 F9			     BNE     loc_8228
ROM:822F
ROM:822F	     loc_822F:					     ; CODE XREF: sub_817B+AAj
ROM:822F 18			     CLC
ROM:8230 65 8B			     ADC     units
ROM:8232 B0 08			     BCS     locret_823C
ROM:8234 85 A6			     STA     level
ROM:8236 A8			     TAY
ROM:8237 88			     DEY
ROM:8238 84 96			     STY     level_0_based
ROM:823A C0 96			     CPY     #150		     ; last level?
ROM:823C
ROM:823C	     locret_823C:				     ; CODE XREF: sub_817B+A3j
ROM:823C							     ; sub_817B+AFj ...
ROM:823C 60			     RTS
ROM:823C	     ; End of function sub_817B
ROM:823C
ROM:823D
ROM:823D	     ; =============== S U B R O U T I N E =======================================
ROM:823D
ROM:823D
ROM:823D	     sub_823D:					     ; CODE XREF: ROM:7C29p
ROM:823D							     ; ROM:7D1Cp ...
ROM:823D
ROM:823D	     ; FUNCTION	CHUNK AT ROM:7BB2 SIZE 00000010	BYTES
ROM:823D	     ; FUNCTION	CHUNK AT ROM:7C16 SIZE 00000013	BYTES
ROM:823D
ROM:823D A9 00			     LDA     #0
ROM:823F 20 00 87		     JSR     blink_char_and_wait_for_key
ROM:8242 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:8245 C9 9B			     CMP     #$9B ; ''
ROM:8247 D0 03			     BNE     locret_824C
ROM:8249 4C 16 7C		     JMP     loc_7C16
ROM:824C	     ; ---------------------------------------------------------------------------
ROM:824C
ROM:824C	     locret_824C:				     ; CODE XREF: sub_823D+Aj
ROM:824C 60			     RTS
ROM:824C	     ; End of function sub_823D
ROM:824C
ROM:824C	     ; ---------------------------------------------------------------------------
ROM:824D 60			     .BYTE $60
ROM:824E 85			     .BYTE $85
ROM:824F 0F			     .BYTE $F
ROM:8250 60			     .BYTE $60
ROM:8251 02 11 0F 04+		     .BYTE 2, $11, $F, 4, 0, 0,	$FE, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0
ROM:8251 00 00 FE 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8251 00 00 00 00+		     .BYTE 0, $7A, 0, 0, 0, 0, 0, 0, 0,	0, $FF,	$FF, 0,	0, $23,	$F, 0
ROM:8251 00 00 00 00+		     .BYTE 1, $22, $F, $88, $88, $88, $88, $88,	$88, $88, $88
ROM:8293 CC CF C4 C5+aLodeRunnerDataDisk:.BYTE $CC, $CF, $C4, $C5, $A0,	$D2, $D5, $CE, $CE, $C5, $D2, $A0 ; "LODE RUNNER DATA DISK  "
ROM:8293 A0 D2 D5 CE+		     .BYTE $C4,	$C1, $D4, $C1, $A0, $C4, $C9, $D3, $CB,	$A0, $A0
ROM:82AA
ROM:82AA	     ; =============== S U B R O U T I N E =======================================
ROM:82AA
ROM:82AA
ROM:82AA	     display_char_pg1:				     ; CODE XREF: dig_left+8Cp
ROM:82AA							     ; dig_left+9Fp ...
ROM:82AA 85 1E			     STA     msg_char		     ; store character
ROM:82AC A9 20			     LDA     #$20 ; ' '              ; hires page 1
ROM:82AE D0 04			     BNE     loc_82B4		     ; always
ROM:82AE	     ; End of function display_char_pg1
ROM:82AE
ROM:82B0
ROM:82B0	     ; =============== S U B R O U T I N E =======================================
ROM:82B0
ROM:82B0
ROM:82B0	     display_char_pg2:				     ; CODE XREF: init_and_draw_level:loc_6450p
ROM:82B0							     ; init_and_draw_level+F9p	...
ROM:82B0 85 1E			     STA     msg_char
ROM:82B2 A9 40			     LDA     #$40 ; '@'              ; hires page 2
ROM:82B4
ROM:82B4	     loc_82B4:					     ; CODE XREF: display_char_pg1+4j
ROM:82B4 85 1F			     STA     hires_page_msb_1
ROM:82B6 A4 86			     LDY     row
ROM:82B8 20 5D 88		     JSR     calc_colx5_scanline
ROM:82BB 84 1B			     STY     scanline
ROM:82BD A6 85			     LDX     col
ROM:82BF 20 68 88		     JSR     calc_col_addr_shift
ROM:82C2 85 1C			     STA     col_addr_offset
ROM:82C4 86 71			     STX     col_pixel_shift
ROM:82C6 BD 28 83		     LDA     left_char_masks,X
ROM:82C9 85 50			     STA     lchar_mask
ROM:82CB BD 2F 83		     LDA     right_char_masks,X
ROM:82CE 85 51			     STA     rchar_mask
ROM:82D0 20 38 84		     JSR     render_char_in_buffer
ROM:82D3 A9 0B			     LDA     #11		     ; 11 scanlines/character
ROM:82D5 85 1D			     STA     scanline_cnt
ROM:82D7 A2 00			     LDX     #0
ROM:82D9 A5 71			     LDA     col_pixel_shift
ROM:82DB C9 05			     CMP     #5			     ; pixel offset > 5?
ROM:82DD B0 22			     BCS     render_3_byte_char_to_video ; yes,	go
ROM:82DF
ROM:82DF	     render_2_byte_char_to_video:		     ; CODE XREF: display_char_pg2+4Ej
ROM:82DF A4 1B			     LDY     scanline
ROM:82E1 20 31 7A		     JSR     calc_line_addr_in_0C
ROM:82E4 A4 1C			     LDY     col_addr_offset
ROM:82E6 B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get video byte
ROM:82E8 25 50			     AND     lchar_mask
ROM:82EA 15 DF			     ORA     char_render_buf,X
ROM:82EC 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video byte
ROM:82EE E8			     INX			     ; next render buffer addr
ROM:82EF C8			     INY			     ; next video addr
ROM:82F0 B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get video byte
ROM:82F2 25 51			     AND     rchar_mask
ROM:82F4 15 DF			     ORA     char_render_buf,X
ROM:82F6 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video byte
ROM:82F8 E8			     INX			     ; skip unused 3rd byte
ROM:82F9 E8			     INX			     ; next render buffer addr
ROM:82FA E6 1B			     INC     scanline
ROM:82FC C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:82FE D0 DF			     BNE     render_2_byte_char_to_video ; no, loop
ROM:8300 60			     RTS
ROM:8301	     ; ---------------------------------------------------------------------------
ROM:8301
ROM:8301	     render_3_byte_char_to_video:		     ; CODE XREF: display_char_pg2+2Dj
ROM:8301							     ; display_char_pg2+75j
ROM:8301 A4 1B			     LDY     scanline
ROM:8303 20 31 7A		     JSR     calc_line_addr_in_0C
ROM:8306 A4 1C			     LDY     col_addr_offset
ROM:8308 B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get video byte
ROM:830A 25 50			     AND     lchar_mask
ROM:830C 15 DF			     ORA     char_render_buf,X
ROM:830E 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video byte
ROM:8310 E8			     INX			     ; next render buffer addr
ROM:8311 C8			     INY			     ; next video addr
ROM:8312 B5 DF			     LDA     char_render_buf,X
ROM:8314 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video byte
ROM:8316 E8			     INX			     ; next render buffer addr
ROM:8317 C8			     INY			     ; next video addr
ROM:8318 B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get video byte
ROM:831A 25 51			     AND     rchar_mask
ROM:831C 15 DF			     ORA     char_render_buf,X
ROM:831E 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video byte
ROM:8320 E8			     INX			     ; next render buffer addr
ROM:8321 E6 1B			     INC     scanline
ROM:8323 C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:8325 D0 DA			     BNE     render_3_byte_char_to_video ; no, loop
ROM:8327 60			     RTS
ROM:8327	     ; End of function display_char_pg2
ROM:8327
ROM:8327	     ; ---------------------------------------------------------------------------
ROM:8328 00 01 03 07+left_char_masks:.BYTE 0, 1, 3, 7, $F, $1F,	$3F  ; DATA XREF: display_char_pg2+16r
ROM:832F F8 F0 E0 C0+right_char_masks:.BYTE $F8, $F0, $E0, $C0,	$80, $FE, $FC
ROM:832F 80 FE FC						     ; DATA XREF: display_char_pg2+1Br
ROM:8336
ROM:8336	     ; =============== S U B R O U T I N E =======================================
ROM:8336
ROM:8336
ROM:8336	     wipe_char:					     ; CODE XREF: handle_player+6Fp
ROM:8336							     ; handle_player+146p ...
ROM:8336 84 1B			     STY     scanline
ROM:8338 85 1E			     STA     msg_char
ROM:833A 20 72 88		     JSR     calc_addr_shift_for_x   ; address offset and shift
ROM:833D 85 1C			     STA     col_addr_offset
ROM:833F 86 71			     STX     col_pixel_shift
ROM:8341 20 38 84		     JSR     render_char_in_buffer
ROM:8344 A2 0B			     LDX     #11		     ; 11 scanlines/character
ROM:8346 86 1D			     STX     scanline_cnt
ROM:8348 A2 00			     LDX     #0
ROM:834A A5 71			     LDA     col_pixel_shift
ROM:834C C9 05			     CMP     #5			     ; >5?
ROM:834E B0 26			     BCS     wipe_3_byte_char_from_video ; yes,	go
ROM:8350
ROM:8350	     wipe_2_byte_char_from_video:		     ; CODE XREF: wipe_char+3Dj
ROM:8350 A4 1B			     LDY     scanline
ROM:8352 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:8355 A4 1C			     LDY     col_addr_offset
ROM:8357 B5 DF			     LDA     char_render_buf,X
ROM:8359 49 7F			     EOR     #$7F ; ''              ; invert character data
ROM:835B 31 0C			     AND     (lsb_line_addr_pg1),Y   ; wipe character pixels
ROM:835D 11 0E			     ORA     (lsb_line_addr_pg2),Y   ; restore background
ROM:835F 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:8361 E8			     INX			     ; next render buffer addr
ROM:8362 C8			     INY			     ; next video addr
ROM:8363 B5 DF			     LDA     char_render_buf,X
ROM:8365 49 7F			     EOR     #$7F ; ''              ; invert character data
ROM:8367 31 0C			     AND     (lsb_line_addr_pg1),Y   ; wipe character pixels
ROM:8369 11 0E			     ORA     (lsb_line_addr_pg2),Y   ; restore background
ROM:836B 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:836D E8			     INX
ROM:836E E8			     INX			     ; next render buffer addr
ROM:836F E6 1B			     INC     scanline
ROM:8371 C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:8373 D0 DB			     BNE     wipe_2_byte_char_from_video ; no, loop
ROM:8375 60			     RTS
ROM:8376	     ; ---------------------------------------------------------------------------
ROM:8376
ROM:8376	     wipe_3_byte_char_from_video:		     ; CODE XREF: wipe_char+18j
ROM:8376							     ; wipe_char+6Ej
ROM:8376 A4 1B			     LDY     scanline
ROM:8378 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:837B A4 1C			     LDY     col_addr_offset
ROM:837D B5 DF			     LDA     char_render_buf,X
ROM:837F 49 7F			     EOR     #$7F ; ''              ; invert character data
ROM:8381 31 0C			     AND     (lsb_line_addr_pg1),Y   ; wipe character pixels
ROM:8383 11 0E			     ORA     (lsb_line_addr_pg2),Y   ; restore background
ROM:8385 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:8387 E8			     INX			     ; next render buffer addr
ROM:8388 C8			     INY			     ; next video addr
ROM:8389 B5 DF			     LDA     char_render_buf,X
ROM:838B 49 7F			     EOR     #$7F ; ''              ; invert character data
ROM:838D 31 0C			     AND     (lsb_line_addr_pg1),Y   ; wipe character pixels
ROM:838F 11 0E			     ORA     (lsb_line_addr_pg2),Y   ; restore background
ROM:8391 91 0C			     STA     (lsb_line_addr_pg1),Y   ; updte video
ROM:8393 E8			     INX			     ; next render buffer addr
ROM:8394 C8			     INY			     ; next video addr
ROM:8395 B5 DF			     LDA     char_render_buf,X
ROM:8397 49 7F			     EOR     #$7F ; ''              ; invert character data
ROM:8399 31 0C			     AND     (lsb_line_addr_pg1),Y   ; wipe character pixels
ROM:839B 11 0E			     ORA     (lsb_line_addr_pg2),Y   ; restore background
ROM:839D 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:839F E8			     INX			     ; next render buffer addr
ROM:83A0 E6 1B			     INC     scanline
ROM:83A2 C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:83A4 D0 D0			     BNE     wipe_3_byte_char_from_video ; no, loop
ROM:83A6 60			     RTS
ROM:83A6	     ; End of function wipe_char
ROM:83A6
ROM:83A7
ROM:83A7	     ; =============== S U B R O U T I N E =======================================
ROM:83A7
ROM:83A7
ROM:83A7	     display_transparent_char:			     ; CODE XREF: dig_left+82p
ROM:83A7							     ; dig_right+84p ...
ROM:83A7 84 1B			     STY     scanline
ROM:83A9 85 1E			     STA     msg_char
ROM:83AB 20 72 88		     JSR     calc_addr_shift_for_x
ROM:83AE 85 1C			     STA     col_addr_offset
ROM:83B0 86 71			     STX     col_pixel_shift
ROM:83B2 20 38 84		     JSR     render_char_in_buffer
ROM:83B5 A9 0B			     LDA     #11		     ; 11 scanlines to display
ROM:83B7 85 1D			     STA     scanline_cnt
ROM:83B9 A2 00			     LDX     #0
ROM:83BB 86 52			     STX     byte_52
ROM:83BD A5 71			     LDA     col_pixel_shift
ROM:83BF C9 05			     CMP     #5			     ; >5?
ROM:83C1 B0 32			     BCS     OR_3_byte_char_to_video ; yes, continue
ROM:83C3
ROM:83C3	     OR_2_byte_char_to_video:			     ; CODE XREF: display_transparent_char+4Bj
ROM:83C3 A4 1B			     LDY     scanline
ROM:83C5 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:83C8 A4 1C			     LDY     col_addr_offset
ROM:83CA B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get video byte
ROM:83CC 51 0E			     EOR     (lsb_line_addr_pg2),Y
ROM:83CE 35 DF			     AND     char_render_buf,X
ROM:83D0 05 52			     ORA     byte_52
ROM:83D2 85 52			     STA     byte_52
ROM:83D4 B5 DF			     LDA     char_render_buf,X	     ; get character data byte
ROM:83D6 11 0C			     ORA     (lsb_line_addr_pg1),Y   ; OR with video byte
ROM:83D8 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:83DA E8			     INX			     ; next render buffer addr
ROM:83DB C8			     INY			     ; next video addr
ROM:83DC B1 0C			     LDA     (lsb_line_addr_pg1),Y
ROM:83DE 51 0E			     EOR     (lsb_line_addr_pg2),Y
ROM:83E0 35 DF			     AND     char_render_buf,X
ROM:83E2 05 52			     ORA     byte_52
ROM:83E4 85 52			     STA     byte_52
ROM:83E6 B5 DF			     LDA     char_render_buf,X	     ; get character data byte
ROM:83E8 11 0C			     ORA     (lsb_line_addr_pg1),Y   ; OR with video byte
ROM:83EA 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:83EC E8			     INX
ROM:83ED E8			     INX			     ; next render buffer addr
ROM:83EE E6 1B			     INC     scanline
ROM:83F0 C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:83F2 D0 CF			     BNE     OR_2_byte_char_to_video ; no, loop
ROM:83F4 60			     RTS
ROM:83F5	     ; ---------------------------------------------------------------------------
ROM:83F5
ROM:83F5	     OR_3_byte_char_to_video:			     ; CODE XREF: display_transparent_char+1Aj
ROM:83F5							     ; display_transparent_char+8Ej
ROM:83F5 A4 1B			     LDY     scanline
ROM:83F7 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:83FA A4 1C			     LDY     col_addr_offset
ROM:83FC B1 0C			     LDA     (lsb_line_addr_pg1),Y
ROM:83FE 51 0E			     EOR     (lsb_line_addr_pg2),Y
ROM:8400 35 DF			     AND     char_render_buf,X
ROM:8402 05 52			     ORA     byte_52
ROM:8404 85 52			     STA     byte_52
ROM:8406 B5 DF			     LDA     char_render_buf,X	     ; get character data byte
ROM:8408 11 0C			     ORA     (lsb_line_addr_pg1),Y   ; OR with video byte
ROM:840A 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:840C E8			     INX			     ; next render buffer addr
ROM:840D C8			     INY			     ; next video addr
ROM:840E B1 0C			     LDA     (lsb_line_addr_pg1),Y
ROM:8410 51 0E			     EOR     (lsb_line_addr_pg2),Y
ROM:8412 35 DF			     AND     char_render_buf,X
ROM:8414 05 52			     ORA     byte_52
ROM:8416 85 52			     STA     byte_52
ROM:8418 B5 DF			     LDA     char_render_buf,X	     ; get character data byte
ROM:841A 11 0C			     ORA     (lsb_line_addr_pg1),Y   ; OR with video byte
ROM:841C 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:841E E8			     INX			     ; next render buffer addr
ROM:841F C8			     INY			     ; next video addr
ROM:8420 B1 0C			     LDA     (lsb_line_addr_pg1),Y   ; get character data byte
ROM:8422 51 0E			     EOR     (lsb_line_addr_pg2),Y
ROM:8424 35 DF			     AND     char_render_buf,X
ROM:8426 05 52			     ORA     byte_52
ROM:8428 85 52			     STA     byte_52
ROM:842A B5 DF			     LDA     char_render_buf,X	     ; get video data byte
ROM:842C 11 0C			     ORA     (lsb_line_addr_pg1),Y   ; OR with video byte
ROM:842E 91 0C			     STA     (lsb_line_addr_pg1),Y   ; update video
ROM:8430 E8			     INX			     ; next render buffer addr
ROM:8431 E6 1B			     INC     scanline
ROM:8433 C6 1D			     DEC     scanline_cnt	     ; done character?
ROM:8435 D0 BE			     BNE     OR_3_byte_char_to_video ; no, loop
ROM:8437 60			     RTS
ROM:8437	     ; End of function display_transparent_char
ROM:8437
ROM:8438
ROM:8438	     ; =============== S U B R O U T I N E =======================================
ROM:8438
ROM:8438
ROM:8438	     render_char_in_buffer:			     ; CODE XREF: display_char_pg2+20p
ROM:8438							     ; wipe_char+Bp ...
ROM:8438 A9 0B			     LDA     #11		     ; renders 11*3=33 bytes into $DF-$FF
ROM:8438							     ; X=col_pixel_shift
ROM:8438							     ; 11 scan lines per character?
ROM:843A 85 1D			     STA     $1D		     ; scanline_cnt
ROM:843C A9 00			     LDA     #0
ROM:843E 85 0A			     STA     $A
ROM:8440 A9 AD			     LDA     #$AD ; '­'
ROM:8442 85 0B			     STA     $B			     ; start AD00; 22 tables $68 bytes each
ROM:8444 BD C1 84		     LDA     byte_84C1,X	     ; offsets for character data per pixel shift ($A2-$A8)
ROM:8447 8D 5C 84		     STA     $845C		     ; self-modifying code (msb)
ROM:844A 8D 68 84		     STA     $8468
ROM:844D 8D 8D 84		     STA     $848D
ROM:8450 8D 99 84		     STA     $8499
ROM:8453 A2 00			     LDX     #0			     ; init offset into	character render buffer
ROM:8455
ROM:8455	     loc_8455:					     ; CODE XREF: render_char_in_buffer+86j
ROM:8455 A4 1E			     LDY     $1E		     ; msg_char
ROM:8457 B1 0A			     LDA     (word_A),Y		     ; [$AD00+char]
ROM:8459 A8			     TAY			     ; Y=$00..$7F
ROM:845A
ROM:845A	     loc_845A:					     ; (msb modified) A2/A3/A4/A5/A6/A7/A8
ROM:845A B9 00 A0		     LDA     $A000,Y		     ; Y=offset	from [$AD00+char]
ROM:845D 8D 70 84		     STA     $8470		     ; self-modifying code (lsb)
ROM:8460 18			     CLC
ROM:8461 69 01			     ADC     #1			     ; next address
ROM:8463 8D 75 84		     STA     $8475		     ; self-modifying code (lsb)
ROM:8466
ROM:8466	     loc_8466:					     ; (msb modified)
ROM:8466 B9 80 A0		     LDA     $A080,Y		     ; Y=offset	from [$AD00+char] A2/A3/A4/A5/A6/A7/A8
ROM:8469 8D 71 84		     STA     $8471		     ; self-modifying code (msb)
ROM:846C 8D 76 84		     STA     $8476		     ; self-modifying code (msb)
ROM:846F
ROM:846F	     loc_846F:					     ; (msb & lsb modified)
ROM:846F AD 00 A0		     LDA     $A000
ROM:8472 95 DF			     STA     $DF,X		     ; lchar_data
ROM:8474
ROM:8474	     loc_8474:					     ; (msb & lsb modified)
ROM:8474 AD 00 A0		     LDA     $A000
ROM:8477 95 E0			     STA     $E0,X		     ; lchar_data+1
ROM:8479 A5 0A			     LDA     $A
ROM:847B 18			     CLC
ROM:847C 69 68			     ADC     #$68 ; 'h'
ROM:847E 85 0A			     STA     $A
ROM:8480 A5 0B			     LDA     $B
ROM:8482 69 00			     ADC     #0
ROM:8484 85 0B			     STA     $B			     ; inc $AD00 address
ROM:8486 A4 1E			     LDY     $1E		     ; msg_char
ROM:8488 B1 0A			     LDA     ($A),Y		     ; [$AD68+char]
ROM:848A A8			     TAY
ROM:848B
ROM:848B	     loc_848B:					     ; (msb modified)
ROM:848B B9 00 A0		     LDA     $A000,Y		     ; Y=offset	from [$AD80+char]
ROM:848E 8D A1 84		     STA     $84A1		     ; self-modifying code (lsb)
ROM:8491 18			     CLC
ROM:8492 69 01			     ADC     #1
ROM:8494 8D A8 84		     STA     $84A8		     ; self-modifying code (lsb)
ROM:8497
ROM:8497	     loc_8497:					     ; (msb modified)
ROM:8497 B9 80 A0		     LDA     $A080,Y
ROM:849A 8D A2 84		     STA     $84A2		     ; self-modifying code
ROM:849D 8D A9 84		     STA     $84A9		     ; self-modifying code
ROM:84A0
ROM:84A0	     loc_84A0:					     ; (msb & lsb modified)
ROM:84A0 AD 00 A0		     LDA     $A000
ROM:84A3 15 E0			     ORA     $E0,X
ROM:84A5 95 E0			     STA     $E0,X		     ; lchar_data+1
ROM:84A7
ROM:84A7	     loc_84A7:					     ; (msb & lsb modified)
ROM:84A7 AD 00 A0		     LDA     $A000
ROM:84AA 95 E1			     STA     $E1,X		     ; lchar_data+2
ROM:84AC A5 0A			     LDA     word_A
ROM:84AE 18			     CLC
ROM:84AF 69 68			     ADC     #$68 ; 'h'
ROM:84B1 85 0A			     STA     word_A
ROM:84B3 A5 0B			     LDA     word_A+1
ROM:84B5 69 00			     ADC     #0
ROM:84B7 85 0B			     STA     word_A+1		     ; next character data addr
ROM:84B9 E8			     INX
ROM:84BA E8			     INX
ROM:84BB E8			     INX			     ; next render buffer addr
ROM:84BC C6 1D			     DEC     scanline_cnt	     ; done all	scan lines?
ROM:84BE D0 95			     BNE     loc_8455		     ; no, loop
ROM:84C0 60			     RTS
ROM:84C0	     ; End of function render_char_in_buffer
ROM:84C0
ROM:84C0	     ; ---------------------------------------------------------------------------
ROM:84C1 A2 A3 A4 A5+byte_84C1:	     .BYTE $A2,	$A3, $A4, $A5, $A6, $A7, $A8
ROM:84C1 A6 A7 A8						     ; DATA XREF: render_char_in_buffer+Cr
ROM:84C1							     ; offsets for character data per pixel shift
ROM:84C8	     ; ---------------------------------------------------------------------------
ROM:84C8
ROM:84C8	     loc_84C8:					     ; CODE XREF: ROM:6186p
ROM:84C8 A5 9D			     LDA     game_active
ROM:84CA F0 48			     BEQ     locret_8514
ROM:84CC A5 8E			     LDA     score_1e1_1
ROM:84CE 05 8F			     ORA     score_1e3_1e2
ROM:84D0 05 90			     ORA     score_1e5_1e4
ROM:84D2 05 91			     ORA     score_1e6
ROM:84D4 F0 3E			     BEQ     locret_8514
ROM:84D6 A9 01			     LDA     #1
ROM:84D8 20 59 63		     JSR     read_disk_and_chk_sig
ROM:84DB F0 37			     BEQ     locret_8514
ROM:84DD A0 01			     LDY     #1
ROM:84DF
ROM:84DF	     loc_84DF:					     ; CODE XREF: ROM:8512j
ROM:84DF BE A2 79		     LDX     $79A2,Y
ROM:84E2 A5 A6			     LDA     level
ROM:84E4 DD 03 1F		     CMP     $1F03,X
ROM:84E7 90 26			     BCC     loc_850F
ROM:84E9 D0 2A			     BNE     loc_8515
ROM:84EB A5 91			     LDA     score_1e6
ROM:84ED DD 04 1F		     CMP     $1F04,X
ROM:84F0 90 1D			     BCC     loc_850F
ROM:84F2 D0 21			     BNE     loc_8515
ROM:84F4 A5 90			     LDA     score_1e5_1e4
ROM:84F6 DD 05 1F		     CMP     $1F05,X
ROM:84F9 90 14			     BCC     loc_850F
ROM:84FB D0 18			     BNE     loc_8515
ROM:84FD A5 8F			     LDA     score_1e3_1e2
ROM:84FF DD 06 1F		     CMP     $1F06,X
ROM:8502 90 0B			     BCC     loc_850F
ROM:8504 D0 0F			     BNE     loc_8515
ROM:8506 A5 8E			     LDA     score_1e1_1
ROM:8508 DD 07 1F		     CMP     $1F07,X
ROM:850B 90 02			     BCC     loc_850F
ROM:850D D0 06			     BNE     loc_8515
ROM:850F
ROM:850F	     loc_850F:					     ; CODE XREF: ROM:84E7j
ROM:850F							     ; ROM:84F0j ...
ROM:850F C8			     INY
ROM:8510 C0 0B			     CPY     #$B
ROM:8512 90 CB			     BCC     loc_84DF
ROM:8514
ROM:8514	     locret_8514:				     ; CODE XREF: ROM:84CAj
ROM:8514							     ; ROM:84D4j ...
ROM:8514 60			     RTS
ROM:8515	     ; ---------------------------------------------------------------------------
ROM:8515
ROM:8515	     loc_8515:					     ; CODE XREF: ROM:84E9j
ROM:8515							     ; ROM:84F2j ...
ROM:8515 C0 0A			     CPY     #$A
ROM:8517 F0 1D			     BEQ     loc_8536
ROM:8519 84 56			     STY     $56
ROM:851B A0 09			     LDY     #9
ROM:851D
ROM:851D	     loc_851D:					     ; CODE XREF: ROM:8534j
ROM:851D BE A2 79		     LDX     $79A2,Y
ROM:8520 A9 08			     LDA     #8
ROM:8522 85 1D			     STA     scanline_cnt
ROM:8524
ROM:8524	     loc_8524:					     ; CODE XREF: ROM:852Dj
ROM:8524 BD 00 1F		     LDA     $1F00,X
ROM:8527 9D 08 1F		     STA     $1F08,X
ROM:852A E8			     INX
ROM:852B C6 1D			     DEC     scanline_cnt
ROM:852D D0 F5			     BNE     loc_8524
ROM:852F C4 56			     CPY     $56
ROM:8531 F0 03			     BEQ     loc_8536
ROM:8533 88			     DEY
ROM:8534 D0 E7			     BNE     loc_851D
ROM:8536
ROM:8536	     loc_8536:					     ; CODE XREF: ROM:8517j
ROM:8536							     ; ROM:8531j
ROM:8536 BE A2 79		     LDX     $79A2,Y
ROM:8539 A9 A0			     LDA     #$A0 ; ' '
ROM:853B 9D 00 1F		     STA     $1F00,X
ROM:853E 9D 01 1F		     STA     $1F01,X
ROM:8541 9D 02 1F		     STA     $1F02,X
ROM:8544 A5 A6			     LDA     $A6
ROM:8546 9D 03 1F		     STA     $1F03,X
ROM:8549 A5 91			     LDA     score_1e6
ROM:854B 9D 04 1F		     STA     $1F04,X
ROM:854E A5 90			     LDA     score_1e5_1e4
ROM:8550 9D 05 1F		     STA     $1F05,X
ROM:8553 A5 8F			     LDA     score_1e3_1e2
ROM:8555 9D 06 1F		     STA     $1F06,X
ROM:8558 A5 8E			     LDA     score_1e1_1
ROM:855A 9D 07 1F		     STA     $1F07,X
ROM:855D 84 69			     STY     $69
ROM:855F B9 A2 79		     LDA     $79A2,Y
ROM:8562 8D 83 85		     STA     $8583
ROM:8565 8D CA 85		     STA     $85CA
ROM:8568 20 6B 78		     JSR     cls_and_display_high_scores
ROM:856B A9 40			     LDA     #$40 ; '@'
ROM:856D 85 87			     STA     display_char_page
ROM:856F A5 69			     LDA     $69
ROM:8571 18			     CLC
ROM:8572 69 04			     ADC     #4
ROM:8574 85 86			     STA     row
ROM:8576 A9 07			     LDA     #7
ROM:8578 85 85			     STA     col
ROM:857A A2 00			     LDX     #0
ROM:857C 8E 4D 82		     STX     $824D
ROM:857F
ROM:857F	     loc_857F:					     ; CODE XREF: ROM:85A0j
ROM:857F							     ; ROM:85B3j ...
ROM:857F AE 4D 82		     LDX     $824D
ROM:8582
ROM:8582	     loc_8582:
ROM:8582 BD 00 1F		     LDA     $1F00,X
ROM:8585 20 2A 7B		     JSR     remap_character
ROM:8588 20 F3 85		     JSR     sub_85F3
ROM:858B 8D 10 C0		     STA     $C010
ROM:858E C9 8D			     CMP     #$8D ; ''
ROM:8590 F0 55			     BEQ     loc_85E7
ROM:8592 C9 88			     CMP     #$88 ; ''
ROM:8594 D0 0D			     BNE     loc_85A3
ROM:8596 AE 4D 82		     LDX     $824D
ROM:8599 F0 46			     BEQ     loc_85E1
ROM:859B CE 4D 82		     DEC     $824D
ROM:859E C6 85			     DEC     col
ROM:85A0 4C 7F 85		     JMP     loc_857F
ROM:85A3	     ; ---------------------------------------------------------------------------
ROM:85A3
ROM:85A3	     loc_85A3:					     ; CODE XREF: ROM:8594j
ROM:85A3 C9 95			     CMP     #$95 ; ''
ROM:85A5 D0 0F			     BNE     loc_85B6
ROM:85A7 AE 4D 82		     LDX     $824D
ROM:85AA E0 02			     CPX     #2
ROM:85AC F0 33			     BEQ     loc_85E1
ROM:85AE E6 85			     INC     col
ROM:85B0 EE 4D 82		     INC     $824D
ROM:85B3 4C 7F 85		     JMP     loc_857F
ROM:85B6	     ; ---------------------------------------------------------------------------
ROM:85B6
ROM:85B6	     loc_85B6:					     ; CODE XREF: ROM:85A5j
ROM:85B6 C9 AE			     CMP     #$AE ; '®'
ROM:85B8 F0 0C			     BEQ     loc_85C6
ROM:85BA C9 A0			     CMP     #$A0 ; ' '
ROM:85BC F0 08			     BEQ     loc_85C6
ROM:85BE C9 C1			     CMP     #$C1 ; 'Á'
ROM:85C0 90 1F			     BCC     loc_85E1
ROM:85C2 C9 DB			     CMP     #$DB ; 'Û'
ROM:85C4 B0 1B			     BCS     loc_85E1
ROM:85C6
ROM:85C6	     loc_85C6:					     ; CODE XREF: ROM:85B8j
ROM:85C6							     ; ROM:85BCj
ROM:85C6 AC 4D 82		     LDY     $824D
ROM:85C9
ROM:85C9	     loc_85C9:
ROM:85C9 99 00 1F		     STA     $1F00,Y
ROM:85CC 20 64 7B		     JSR     display_character
ROM:85CF EE 4D 82		     INC     $824D
ROM:85D2 AD 4D 82		     LDA     $824D
ROM:85D5 C9 03			     CMP     #3
ROM:85D7 90 A6			     BCC     loc_857F
ROM:85D9 CE 4D 82		     DEC     $824D
ROM:85DC C6 85			     DEC     col
ROM:85DE 4C 7F 85		     JMP     loc_857F
ROM:85E1	     ; ---------------------------------------------------------------------------
ROM:85E1
ROM:85E1	     loc_85E1:					     ; CODE XREF: ROM:8599j
ROM:85E1							     ; ROM:85ACj ...
ROM:85E1 20 CE 86		     JSR     sound1
ROM:85E4 4C 7F 85		     JMP     loc_857F
ROM:85E7	     ; ---------------------------------------------------------------------------
ROM:85E7
ROM:85E7	     loc_85E7:					     ; CODE XREF: ROM:8590j
ROM:85E7 A9 20			     LDA     #$20 ; ' '
ROM:85E9 85 87			     STA     display_char_page
ROM:85EB A9 02			     LDA     #2
ROM:85ED 20 59 63		     JSR     read_disk_and_chk_sig
ROM:85F0 4C 8E 61		     JMP     title_wait_for_key
ROM:85F3
ROM:85F3	     ; =============== S U B R O U T I N E =======================================
ROM:85F3
ROM:85F3
ROM:85F3	     sub_85F3:					     ; CODE XREF: ROM:8064p
ROM:85F3							     ; ROM:80FCp ...
ROM:85F3 8D 45 87		     STA     $8745
ROM:85F6
ROM:85F6	     loc_85F6:					     ; CODE XREF: sub_85F3+32j
ROM:85F6 A9 68			     LDA     #$68 ; 'h'
ROM:85F8 85 A1			     STA     timer
ROM:85FA AD 45 87		     LDA     $8745
ROM:85FD D0 02			     BNE     loc_8601
ROM:85FF A9 0A			     LDA     #$A
ROM:8601
ROM:8601	     loc_8601:					     ; CODE XREF: sub_85F3+Aj
ROM:8601 20 B0 82		     JSR     display_char_pg2
ROM:8604
ROM:8604	     loc_8604:					     ; CODE XREF: sub_85F3+1Bj
ROM:8604 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:8607 30 1F			     BMI     loc_8628		     ; key pressed, go
ROM:8609 20 6D 87		     JSR     sub_876D
ROM:860C C6 A1			     DEC     timer
ROM:860E D0 F4			     BNE     loc_8604
ROM:8610 A9 00			     LDA     #0
ROM:8612 20 B0 82		     JSR     display_char_pg2
ROM:8615 A9 68			     LDA     #$68 ; 'h'
ROM:8617 85 A1			     STA     timer
ROM:8619
ROM:8619	     loc_8619:					     ; CODE XREF: sub_85F3+30j
ROM:8619 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:861C 30 0A			     BMI     loc_8628		     ; key pressed, go
ROM:861E 20 6D 87		     JSR     sub_876D
ROM:8621 C6 A1			     DEC     timer
ROM:8623 D0 F4			     BNE     loc_8619
ROM:8625 4C F6 85		     JMP     loc_85F6
ROM:8628	     ; ---------------------------------------------------------------------------
ROM:8628
ROM:8628	     loc_8628:					     ; CODE XREF: sub_85F3+14j
ROM:8628							     ; sub_85F3+29j
ROM:8628 48			     PHA
ROM:8629 AD 45 87		     LDA     blink_char
ROM:862C 20 B0 82		     JSR     display_char_pg2
ROM:862F 68			     PLA
ROM:8630 60			     RTS
ROM:8630	     ; End of function sub_85F3
ROM:8630
ROM:8631
ROM:8631	     ; =============== S U B R O U T I N E =======================================
ROM:8631
ROM:8631
ROM:8631	     draw_end_of_screen_ladder:			     ; CODE XREF: ROM:60F2p
ROM:8631 A9 00			     LDA     #0
ROM:8633 8D 00 0C		     STA     eos_ladder_col
ROM:8636 A6 A3			     LDX     no_eos_ladder_tiles
ROM:8638 8E 9E 86		     STX     no_eos_ladder_entries
ROM:863B
ROM:863B	     loc_863B:					     ; CODE XREF: draw_end_of_screen_ladder+62j
ROM:863B AE 9E 86		     LDX     no_eos_ladder_entries
ROM:863E F0 56			     BEQ     loc_8696
ROM:8640 BD 00 0C		     LDA     eos_ladder_col,X
ROM:8643 30 4B			     BMI     loc_8690
ROM:8645 85 85			     STA     col
ROM:8647 BD 30 0C		     LDA     eos_ladder_row,X
ROM:864A 85 86			     STA     row
ROM:864C A8			     TAY
ROM:864D B9 05 1C		     LDA     lsb_row_addr,Y
ROM:8650 85 06			     STA     lsb_row_level_data_addr
ROM:8652 85 08			     STA     byte_8
ROM:8654 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:8657 85 07			     STA     msb_row_level_data_addr
ROM:8659 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:865C 85 09			     STA     byte_9
ROM:865E A4 85			     LDY     col
ROM:8660 B1 08			     LDA     (byte_8),Y		     ; get object from tilemap
ROM:8662 D0 27			     BNE     loc_868B		     ; not a space, skip
ROM:8664 A9 03			     LDA     #3			     ; ladder
ROM:8666 91 08			     STA     (byte_8),Y		     ; update tilemap
ROM:8668 B1 06			     LDA     (lsb_row_level_data_addr),Y ; get object from tilemap
ROM:866A D0 04			     BNE     loc_8670		     ; not a space, skip
ROM:866C A9 03			     LDA     #3			     ; ladder
ROM:866E 91 06			     STA     (lsb_row_level_data_addr),Y ; update tilemap
ROM:8670
ROM:8670	     loc_8670:					     ; CODE XREF: draw_end_of_screen_ladder+39j
ROM:8670 A9 03			     LDA     #3			     ; ladder
ROM:8672 20 B0 82		     JSR     display_char_pg2
ROM:8675 A6 85			     LDX     col
ROM:8677 A4 86			     LDY     row
ROM:8679 20 5D 88		     JSR     calc_colx5_scanline
ROM:867C A9 03			     LDA     #3			     ; ladder
ROM:867E 20 A7 83		     JSR     display_transparent_char
ROM:8681 AE 9E 86		     LDX     no_eos_ladder_entries
ROM:8684 A9 FF			     LDA     #$FF
ROM:8686 9D 00 0C		     STA     eos_ladder_col,X
ROM:8689 30 05			     BMI     loc_8690
ROM:868B
ROM:868B	     loc_868B:					     ; CODE XREF: draw_end_of_screen_ladder+31j
ROM:868B A9 01			     LDA     #1
ROM:868D 8D 00 0C		     STA     eos_ladder_col
ROM:8690
ROM:8690	     loc_8690:					     ; CODE XREF: draw_end_of_screen_ladder+12j
ROM:8690							     ; draw_end_of_screen_ladder+58j
ROM:8690 CE 9E 86		     DEC     no_eos_ladder_entries
ROM:8693 4C 3B 86		     JMP     loc_863B
ROM:8696	     ; ---------------------------------------------------------------------------
ROM:8696
ROM:8696	     loc_8696:					     ; CODE XREF: draw_end_of_screen_ladder+Dj
ROM:8696 AD 00 0C		     LDA     eos_ladder_col
ROM:8699 D0 02			     BNE     locret_869D
ROM:869B C6 93			     DEC     no_gold
ROM:869D
ROM:869D	     locret_869D:				     ; CODE XREF: draw_end_of_screen_ladder+68j
ROM:869D 60			     RTS
ROM:869D	     ; End of function draw_end_of_screen_ladder
ROM:869D
ROM:869D	     ; ---------------------------------------------------------------------------
ROM:869E 00	     no_eos_ladder_entries:.BYTE 0		     ; DATA XREF: draw_end_of_screen_ladder+7w
ROM:869E							     ; draw_end_of_screen_ladder:loc_863Br ...
ROM:869F
ROM:869F	     ; =============== S U B R O U T I N E =======================================
ROM:869F
ROM:869F
ROM:869F	     keybd_flush:				     ; CODE XREF: ROM:60AFp
ROM:869F							     ; ROM:title_wait_for_keyp	...
ROM:869F 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:86A2 AD 00 C0		     LDA     $C000		     ; read keyboard data
ROM:86A5 30 F8			     BMI     keybd_flush	     ; key pressed, loop
ROM:86A7 60			     RTS
ROM:86A7	     ; End of function keybd_flush
ROM:86A7
ROM:86A8
ROM:86A8	     ; =============== S U B R O U T I N E =======================================
ROM:86A8
ROM:86A8
ROM:86A8	     wait_for_key:				     ; CODE XREF: read_controls:freezep
ROM:86A8							     ; wait_for_key+3j
ROM:86A8 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:86AB 10 FB			     BPL     wait_for_key	     ; no key pressed, loop
ROM:86AD 8D 10 C0		     STA     $C010		     ; keyboard	strobe
ROM:86B0 60			     RTS
ROM:86B0	     ; End of function wait_for_key
ROM:86B0
ROM:86B1
ROM:86B1	     ; =============== S U B R O U T I N E =======================================
ROM:86B1
ROM:86B1
ROM:86B1	     delay_180X_scaled:				     ; CODE XREF: sub_8811+35p
ROM:86B1 BD BE 86		     LDA     speed_scale_tbl,X
ROM:86B4 AA			     TAX
ROM:86B4	     ; End of function delay_180X_scaled
ROM:86B4
ROM:86B5
ROM:86B5	     ; =============== S U B R O U T I N E =======================================
ROM:86B5
ROM:86B5
ROM:86B5	     delay_180X:				     ; CODE XREF: delay_180X+6j
ROM:86B5							     ; sub_8811+1Cp
ROM:86B5 A0 B4			     LDY     #180
ROM:86B7
ROM:86B7	     loc_86B7:					     ; CODE XREF: delay_180X+3j
ROM:86B7 88			     DEY
ROM:86B8 D0 FD			     BNE     loc_86B7
ROM:86BA CA			     DEX
ROM:86BB D0 F8			     BNE     delay_180X
ROM:86BD 60			     RTS
ROM:86BD	     ; End of function delay_180X
ROM:86BD
ROM:86BD	     ; ---------------------------------------------------------------------------
ROM:86BE 02 04 06 08+speed_scale_tbl:.BYTE 2, 4, 6, 8, $A, $C, $E, $10,	$12, $14, $16, $18, $1A, $1C
ROM:86BE 0A 0C 0E 10+						     ; DATA XREF: delay_180X_scaledr
ROM:86BE 12 14 16 18+		     .BYTE $1E,	$20
ROM:86CE
ROM:86CE	     ; =============== S U B R O U T I N E =======================================
ROM:86CE
ROM:86CE
ROM:86CE	     sound1:					     ; CODE XREF: ROM:loc_7C3Bp
ROM:86CE							     ; sub_7F98:loc_7F6Ep ...
ROM:86CE A0 C0			     LDY     #$C0 ; 'À'
ROM:86D0
ROM:86D0	     loc_86D0:					     ; CODE XREF: sound1+Fj
ROM:86D0 A2 80			     LDX     #$80 ; ''
ROM:86D2
ROM:86D2	     loc_86D2:					     ; CODE XREF: sound1+5j
ROM:86D2 CA			     DEX
ROM:86D3 D0 FD			     BNE     loc_86D2		     ; delay
ROM:86D5 A5 99			     LDA     $99
ROM:86D7 F0 03			     BEQ     loc_86DC
ROM:86D9 AD 30 C0		     LDA     $C030		     ; speaker
ROM:86DC
ROM:86DC	     loc_86DC:					     ; CODE XREF: sound1+9j
ROM:86DC 88			     DEY
ROM:86DD D0 F1			     BNE     loc_86D0
ROM:86DF 60			     RTS
ROM:86DF	     ; End of function sound1
ROM:86DF
ROM:86E0
ROM:86E0	     ; =============== S U B R O U T I N E =======================================
ROM:86E0
ROM:86E0
ROM:86E0	     display_message:				     ; CODE XREF: ROM:7878p
ROM:86E0							     ; ROM:loc_78EFp ...
ROM:86E0 68			     PLA
ROM:86E1 85 10			     STA     msg_addr
ROM:86E3 68			     PLA
ROM:86E4 85 11			     STA     msg_addr+1		     ; return address
ROM:86E6 D0 09			     BNE     loc_86F1
ROM:86E8
ROM:86E8	     loc_86E8:					     ; CODE XREF: display_message+13j
ROM:86E8							     ; display_message+17j
ROM:86E8 A0 00			     LDY     #0
ROM:86EA B1 10			     LDA     (msg_addr),Y	     ; next message character
ROM:86EC F0 0B			     BEQ     loc_86F9		     ; done? yes, exit
ROM:86EE 20 64 7B		     JSR     display_character
ROM:86F1
ROM:86F1	     loc_86F1:					     ; CODE XREF: display_message+6j
ROM:86F1 E6 10			     INC     msg_addr		     ; next address
ROM:86F3 D0 F3			     BNE     loc_86E8
ROM:86F5 E6 11			     INC     msg_addr+1		     ; fix MSB of next address
ROM:86F7 D0 EF			     BNE     loc_86E8
ROM:86F9
ROM:86F9	     loc_86F9:					     ; CODE XREF: display_message+Cj
ROM:86F9 A5 11			     LDA     msg_addr+1
ROM:86FB 48			     PHA
ROM:86FC A5 10			     LDA     msg_addr
ROM:86FE 48			     PHA			     ; adjust return address
ROM:86FF 60			     RTS
ROM:86FF	     ; End of function display_message
ROM:86FF
ROM:8700
ROM:8700	     ; =============== S U B R O U T I N E =======================================
ROM:8700
ROM:8700
ROM:8700	     blink_char_and_wait_for_key:		     ; CODE XREF: ROM:60BCp
ROM:8700							     ; sub_814B+10p ...
ROM:8700 8D 45 87		     STA     blink_char		     ; character to blink
ROM:8703
ROM:8703	     loc_8703:					     ; CODE XREF: blink_char_and_wait_for_key+39j
ROM:8703 A9 68			     LDA     #$68 ; 'h'
ROM:8705 85 A1			     STA     timer		     ; reset timer
ROM:8707 A9 00			     LDA     #0			     ; space
ROM:8709 AE 45 87		     LDX     blink_char		     ; character to blink
ROM:870C D0 02			     BNE     loc_8710		     ; not a space, skip
ROM:870E A9 0A			     LDA     #$A		     ; solid square
ROM:8710
ROM:8710	     loc_8710:					     ; CODE XREF: blink_char_and_wait_for_key+Cj
ROM:8710 20 AA 82		     JSR     display_char_pg1	     ; display space/square
ROM:8713
ROM:8713	     loc_8713:					     ; CODE XREF: blink_char_and_wait_for_key+1Fj
ROM:8713 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:8716 30 24			     BMI     blink_got_key	     ; key pressed, go
ROM:8718 20 6D 87		     JSR     sub_876D		     ; paddle/open/closed apple	pressed?
ROM:871B B0 1F			     BCS     blink_got_key	     ; yes, go
ROM:871D C6 A1			     DEC     timer		     ; timeout?
ROM:871F D0 F2			     BNE     loc_8713		     ; no, loop
ROM:8721 AD 45 87		     LDA     blink_char
ROM:8724 20 AA 82		     JSR     display_char_pg1	     ; display character to blink
ROM:8727 A9 68			     LDA     #$68 ; 'h'
ROM:8729 85 A1			     STA     timer		     ; reset timer
ROM:872B
ROM:872B	     loc_872B:					     ; CODE XREF: blink_char_and_wait_for_key+37j
ROM:872B AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:872E 30 0C			     BMI     blink_got_key	     ; key pressed, go
ROM:8730 20 6D 87		     JSR     sub_876D		     ; paddle/open/closed apple	pressed?
ROM:8733 B0 07			     BCS     blink_got_key	     ; yes, go
ROM:8735 C6 A1			     DEC     timer		     ; timeout?
ROM:8737 D0 F2			     BNE     loc_872B		     ; no, loop
ROM:8739 4C 03 87		     JMP     loc_8703		     ; loop waiting for	key
ROM:873C	     ; ---------------------------------------------------------------------------
ROM:873C
ROM:873C	     blink_got_key:				     ; CODE XREF: blink_char_and_wait_for_key+16j
ROM:873C							     ; blink_char_and_wait_for_key+1Bj	...
ROM:873C 48			     PHA			     ; save key
ROM:873D AD 45 87		     LDA     blink_char
ROM:8740 20 AA 82		     JSR     display_char_pg1	     ; display original	character
ROM:8743 68			     PLA			     ; restore key
ROM:8744 60			     RTS
ROM:8744	     ; End of function blink_char_and_wait_for_key
ROM:8744
ROM:8744	     ; ---------------------------------------------------------------------------
ROM:8745 06	     blink_char:     .BYTE 6			     ; DATA XREF: sub_85F3+36r
ROM:8745							     ; blink_char_and_wait_for_keyw ...
ROM:8746	     ; ---------------------------------------------------------------------------
ROM:8746
ROM:8746	     loc_8746:					     ; CODE XREF: read_controls:loc_6AE5p
ROM:8746							     ; sub_876D+6p
ROM:8746 A9 00			     LDA     #0
ROM:8748 85 65			     STA     $65
ROM:874A 85 66			     STA     $66
ROM:874C AD 70 C0		     LDA     $C070		     ; trigger paddles
ROM:874F
ROM:874F	     loc_874F:					     ; CODE XREF: ROM:8767j
ROM:874F A2 01			     LDX     #1
ROM:8751
ROM:8751	     loc_8751:					     ; CODE XREF: ROM:8759j
ROM:8751 BD 64 C0		     LDA     $C064,X		     ; read paddle 0
ROM:8754 10 13			     BPL     loc_8769		     ; not ready, skip
ROM:8756 F6 65			     INC     $65,X
ROM:8758
ROM:8758	     loc_8758:					     ; CODE XREF: ROM:876Aj
ROM:8758 CA			     DEX
ROM:8759 10 F6			     BPL     loc_8751
ROM:875B AD 64 C0		     LDA     $C064		     ; read paddle 0
ROM:875E 0D 65 C0		     ORA     $C065		     ; and paddle 1
ROM:8761 10 09			     BPL     locret_876C	     ; not ready, skip
ROM:8763 A5 65			     LDA     $65
ROM:8765 05 66			     ORA     $66
ROM:8767 10 E6			     BPL     loc_874F
ROM:8769
ROM:8769	     loc_8769:					     ; CODE XREF: ROM:8754j
ROM:8769 EA			     NOP
ROM:876A 10 EC			     BPL     loc_8758
ROM:876C
ROM:876C	     locret_876C:				     ; CODE XREF: ROM:8761j
ROM:876C 60			     RTS
ROM:876D
ROM:876D	     ; =============== S U B R O U T I N E =======================================
ROM:876D
ROM:876D
ROM:876D	     sub_876D:					     ; CODE XREF: sub_85F3+16p
ROM:876D							     ; sub_85F3+2Bp ...
ROM:876D A5 95			     LDA     paddles_detected
ROM:876F C9 CB			     CMP     #$CB ; 'Ë'
ROM:8771 F0 25			     BEQ     loc_8798
ROM:8773 20 46 87		     JSR     loc_8746
ROM:8776 A5 65			     LDA     $65
ROM:8778 C9 12			     CMP     #$12
ROM:877A 90 1A			     BCC     loc_8796
ROM:877C C9 3B			     CMP     #$3B ; ';'
ROM:877E B0 16			     BCS     loc_8796
ROM:8780 A5 66			     LDA     $66
ROM:8782 C9 12			     CMP     #$12
ROM:8784 90 10			     BCC     loc_8796
ROM:8786 C9 3B			     CMP     #$3B ; ';'
ROM:8788 B0 0C			     BCS     loc_8796
ROM:878A AD 62 C0		     LDA     $C062		     ; read closed apple
ROM:878D 30 07			     BMI     loc_8796		     ; pressed,	go
ROM:878F AD 61 C0		     LDA     $C061		     ; read open apple
ROM:8792 30 02			     BMI     loc_8796		     ; pressed,	go
ROM:8794 18			     CLC			     ; flag not	pressed
ROM:8795 60			     RTS
ROM:8796	     ; ---------------------------------------------------------------------------
ROM:8796
ROM:8796	     loc_8796:					     ; CODE XREF: sub_876D+Dj
ROM:8796							     ; sub_876D+11j ...
ROM:8796 38			     SEC			     ; flag pressed
ROM:8797 60			     RTS
ROM:8798	     ; ---------------------------------------------------------------------------
ROM:8798
ROM:8798	     loc_8798:					     ; CODE XREF: sub_876D+4j
ROM:8798 A2 02			     LDX     #2
ROM:879A
ROM:879A	     loc_879A:					     ; CODE XREF: sub_876D+2Ej
ROM:879A							     ; sub_876D+31j
ROM:879A 88			     DEY
ROM:879B D0 FD			     BNE     loc_879A
ROM:879D CA			     DEX
ROM:879E D0 FA			     BNE     loc_879A
ROM:87A0 18			     CLC
ROM:87A1 60			     RTS
ROM:87A1	     ; End of function sub_876D
ROM:87A1
ROM:87A2
ROM:87A2	     ; =============== S U B R O U T I N E =======================================
ROM:87A2
ROM:87A2
ROM:87A2	     read_paddles:				     ; CODE XREF: ROM:STARTp
ROM:87A2 AD 70 C0		     LDA     $C070		     ; trigger paddles
ROM:87A5 A2 10			     LDX     #$10
ROM:87A7
ROM:87A7	     loc_87A7:					     ; CODE XREF: read_paddles+Ej
ROM:87A7							     ; read_paddles+11j
ROM:87A7 AD 64 C0		     LDA     $C064		     ; read paddle 0
ROM:87AA 0D 65 C0		     ORA     $C065		     ; and paddle 1
ROM:87AD 10 0A			     BPL     locret_87B9	     ; paddle detected?	Yes, exit
ROM:87AF 88			     DEY
ROM:87B0 D0 F5			     BNE     loc_87A7
ROM:87B2 CA			     DEX			     ; timed-out?
ROM:87B3 D0 F2			     BNE     loc_87A7		     ; no, loop
ROM:87B5 A9 CB			     LDA     #$CB ; 'Ë'              ; flag no paddles detected
ROM:87B7 85 95			     STA     $95
ROM:87B9
ROM:87B9	     locret_87B9:				     ; CODE XREF: read_paddles+Bj
ROM:87B9 60			     RTS
ROM:87B9	     ; End of function read_paddles
ROM:87B9
ROM:87BA
ROM:87BA	     ; =============== S U B R O U T I N E =======================================
ROM:87BA
ROM:87BA
ROM:87BA	     play_falling_sound:			     ; CODE XREF: handle_player+CFp
ROM:87BA							     ; sub_8811+Ap ...
ROM:87BA 85 0A			     STA     word_A
ROM:87BC 86 0B			     STX     word_A+1
ROM:87BE
ROM:87BE	     loc_87BE:					     ; CODE XREF: play_falling_sound+17j
ROM:87BE A5 99			     LDA     byte_99
ROM:87C0 F0 03			     BEQ     loc_87C5
ROM:87C2 AD 30 C0		     LDA     $C030		     ; speaker out
ROM:87C5
ROM:87C5	     loc_87C5:					     ; CODE XREF: play_falling_sound+6j
ROM:87C5							     ; play_falling_sound+13j
ROM:87C5 88			     DEY
ROM:87C6 D0 04			     BNE     loc_87CC
ROM:87C8 C6 0B			     DEC     word_A+1
ROM:87CA F0 08			     BEQ     locret_87D4
ROM:87CC
ROM:87CC	     loc_87CC:					     ; CODE XREF: play_falling_sound+Cj
ROM:87CC CA			     DEX
ROM:87CD D0 F6			     BNE     loc_87C5
ROM:87CF A6 0A			     LDX     word_A
ROM:87D1 4C BE 87		     JMP     loc_87BE
ROM:87D4	     ; ---------------------------------------------------------------------------
ROM:87D4
ROM:87D4	     locret_87D4:				     ; CODE XREF: play_falling_sound+10j
ROM:87D4 60			     RTS
ROM:87D4	     ; End of function play_falling_sound
ROM:87D4
ROM:87D5
ROM:87D5	     ; =============== S U B R O U T I N E =======================================
ROM:87D5
ROM:87D5
ROM:87D5	     sub_87D5:					     ; CODE XREF: sub_622A+8p
ROM:87D5							     ; dig_left+43p ...
ROM:87D5 E6 54			     INC     $54
ROM:87D7 A4 54			     LDY     $54
ROM:87D9 99 80 0E		     STA     $E80,Y
ROM:87DC 8A			     TXA
ROM:87DD 99 00 0E		     STA     $E00,Y
ROM:87E0 60			     RTS
ROM:87E0	     ; End of function sub_87D5
ROM:87E0
ROM:87E1
ROM:87E1	     ; =============== S U B R O U T I N E =======================================
ROM:87E1
ROM:87E1
ROM:87E1	     sub_87E1:					     ; CODE XREF: ROM:6144p
ROM:87E1							     ; ROM:6BE3p ...
ROM:87E1 68			     PLA
ROM:87E2 85 10			     STA     msg_addr
ROM:87E4 68			     PLA
ROM:87E5 85 11			     STA     msg_addr+1		     ; return address
ROM:87E7 D0 19			     BNE     loc_8802		     ; always
ROM:87E9
ROM:87E9	     loc_87E9:					     ; CODE XREF: sub_87E1+23j
ROM:87E9							     ; sub_87E1+27j
ROM:87E9 A0 00			     LDY     #0
ROM:87EB B1 10			     LDA     (msg_addr),Y	     ; get message byte
ROM:87ED F0 1B			     BEQ     loc_880A		     ; done? yes, go
ROM:87EF E6 54			     INC     $54
ROM:87F1 A6 54			     LDX     $54
ROM:87F3 9D 00 0E		     STA     $E00,X
ROM:87F6 C8			     INY			     ; next message byte
ROM:87F7 B1 10			     LDA     (msg_addr),Y	     ; get byte
ROM:87F9 9D 80 0E		     STA     $E80,X
ROM:87FC E6 10			     INC     msg_addr
ROM:87FE D0 02			     BNE     loc_8802
ROM:8800 E6 11			     INC     msg_addr+1
ROM:8802
ROM:8802	     loc_8802:					     ; CODE XREF: sub_87E1+6j
ROM:8802							     ; sub_87E1+1Dj
ROM:8802 E6 10			     INC     msg_addr
ROM:8804 D0 E3			     BNE     loc_87E9
ROM:8806 E6 11			     INC     msg_addr+1
ROM:8808 D0 DF			     BNE     loc_87E9
ROM:880A
ROM:880A	     loc_880A:					     ; CODE XREF: sub_87E1+Cj
ROM:880A A5 11			     LDA     msg_addr+1
ROM:880C 48			     PHA
ROM:880D A5 10			     LDA     msg_addr
ROM:880F 48			     PHA			     ; restore return address
ROM:8810 60			     RTS
ROM:8810	     ; End of function sub_87E1
ROM:8810
ROM:8811
ROM:8811	     ; =============== S U B R O U T I N E =======================================
ROM:8811
ROM:8811
ROM:8811	     sub_8811:					     ; CODE XREF: ROM:60EBp
ROM:8811							     ; ROM:610Ep ...
ROM:8811 A4 54			     LDY     byte_54
ROM:8813 F0 1D			     BEQ     loc_8832
ROM:8815 B9 80 0E		     LDA     $E80,Y
ROM:8818 BE 00 0E		     LDX     $E00,Y
ROM:881B 20 BA 87		     JSR     play_falling_sound
ROM:881E A4 54			     LDY     byte_54
ROM:8820 C6 54			     DEC     byte_54
ROM:8822 A5 8C			     LDA     game_speed
ROM:8824 38			     SEC
ROM:8825 F9 00 0E		     SBC     $E00,Y
ROM:8828 F0 06			     BEQ     loc_8830
ROM:882A 90 04			     BCC     loc_8830
ROM:882C AA			     TAX
ROM:882D 20 B5 86		     JSR     delay_180X
ROM:8830
ROM:8830	     loc_8830:					     ; CODE XREF: sub_8811+17j
ROM:8830							     ; sub_8811+19j
ROM:8830 38			     SEC
ROM:8831 60			     RTS
ROM:8832	     ; ---------------------------------------------------------------------------
ROM:8832
ROM:8832	     loc_8832:					     ; CODE XREF: sub_8811+2j
ROM:8832 A5 9B			     LDA     byte_9B
ROM:8834 D0 0E			     BNE     throttle_game_speed
ROM:8836 A5 A4			     LDA     byte_A4
ROM:8838 4A			     LSR     A
ROM:8839 E6 A4			     INC     byte_A4
ROM:883B A6 8C			     LDX     game_speed
ROM:883D E8			     INX
ROM:883E E8			     INX
ROM:883F 20 BA 87		     JSR     play_falling_sound
ROM:8842 18			     CLC
ROM:8843 60			     RTS
ROM:8844	     ; ---------------------------------------------------------------------------
ROM:8844
ROM:8844	     throttle_game_speed:			     ; CODE XREF: sub_8811+23j
ROM:8844 A6 8C			     LDX     game_speed
ROM:8846 20 B1 86		     JSR     delay_180X_scaled
ROM:8849 18			     CLC
ROM:884A 60			     RTS
ROM:884A	     ; End of function sub_8811
ROM:884A
ROM:884B
ROM:884B	     ; =============== S U B R O U T I N E =======================================
ROM:884B
ROM:884B
ROM:884B	     set_row_addr_1_2:				     ; CODE XREF: dig_left+13p
ROM:884B							     ; dig_left+23p ...
ROM:884B B9 05 1C		     LDA     lsb_row_addr,Y
ROM:884E 85 06			     STA     lsb_row_level_data_addr
ROM:8850 85 08			     STA     byte_8
ROM:8852 B9 15 1C		     LDA     msb_row_addr_1,Y
ROM:8855 85 07			     STA     msb_row_level_data_addr
ROM:8857 B9 25 1C		     LDA     msb_row_addr_2,Y
ROM:885A 85 09			     STA     byte_9
ROM:885C 60			     RTS
ROM:885C	     ; End of function set_row_addr_1_2
ROM:885C
ROM:885D
ROM:885D	     ; =============== S U B R O U T I N E =======================================
ROM:885D
ROM:885D
ROM:885D	     calc_colx5_scanline:			     ; CODE XREF: dig_left+68p
ROM:885D							     ; dig_left+7Ep ...
ROM:885D B9 51 1C		     LDA     row_to_scanline_tbl,Y
ROM:8860 48			     PHA
ROM:8861 BD 35 1C		     LDA     col_x_5_tbl,X
ROM:8864 AA			     TAX			     ; X=col*5
ROM:8865 68			     PLA
ROM:8866 A8			     TAY			     ; Y=scanline
ROM:8867 60			     RTS
ROM:8867	     ; End of function calc_colx5_scanline
ROM:8867
ROM:8868
ROM:8868	     ; =============== S U B R O U T I N E =======================================
ROM:8868
ROM:8868
ROM:8868	     calc_col_addr_shift:			     ; CODE XREF: display_char_pg2+Fp
ROM:8868 BD 62 1C		     LDA     col_to_addr_tbl,X
ROM:886B 48			     PHA
ROM:886C BD 7E 1C		     LDA     col_pixel_shift_tbl,X
ROM:886F AA			     TAX
ROM:8870 68			     PLA
ROM:8871 60			     RTS
ROM:8871	     ; End of function calc_col_addr_shift
ROM:8871
ROM:8872
ROM:8872	     ; =============== S U B R O U T I N E =======================================
ROM:8872
ROM:8872
ROM:8872	     calc_addr_shift_for_x:			     ; CODE XREF: wipe_char+4p
ROM:8872							     ; display_transparent_char+4p
ROM:8872 BD 9A 1C		     LDA     movement_offset_to_addr_tbl,X ; get video address (offset)	for count of 2-pixel increments
ROM:8875 48			     PHA
ROM:8876 BD 26 1D		     LDA     movement_offset_to_shift_tbl,X ; get shift	for count of 2-pixel increments
ROM:8879 AA			     TAX
ROM:887A 68			     PLA
ROM:887B 60			     RTS
ROM:887B	     ; End of function calc_addr_shift_for_x
ROM:887B
ROM:887C
ROM:887C	     ; =============== S U B R O U T I N E =======================================
ROM:887C
ROM:887C
ROM:887C	     calc_scanline:				     ; CODE XREF: calc_char_and_addr+Dp
ROM:887C							     ; calc_guard_xychar+Dp
ROM:887C 8A			     TXA
ROM:887D 48			     PHA			     ; save X (y_offset_within_tile)
ROM:887E 20 5D 88		     JSR     calc_colx5_scanline
ROM:8881 68			     PLA
ROM:8882 AA			     TAX			     ; restore X (y_offset_within_tile)
ROM:8883 98			     TYA			     ; A=scanline
ROM:8884 18			     CLC
ROM:8885 7D 8A 88		     ADC     byte_888A,X	     ; add -5/-3/0/2/4 to scanline
ROM:8888 A8			     TAY			     ; to Y
ROM:8889 60			     RTS
ROM:8889	     ; End of function calc_scanline
ROM:8889
ROM:8889	     ; ---------------------------------------------------------------------------
ROM:888A FB FD 00 02+byte_888A:	     .BYTE $FB,	$FD, 0,	2, 4	     ; DATA XREF: calc_scanline+9r
ROM:888F
ROM:888F	     ; =============== S U B R O U T I N E =======================================
ROM:888F
ROM:888F
ROM:888F	     calc_x_in_2_pixel_incs:			     ; CODE XREF: calc_char_and_addr+4p
ROM:888F							     ; calc_guard_xychar+4p
ROM:888F 98			     TYA
ROM:8890 48			     PHA			     ; save Y (x_offset_within_tile)
ROM:8891 20 5D 88		     JSR     calc_colx5_scanline
ROM:8894 68			     PLA
ROM:8895 A8			     TAY			     ; restore Y (x_offset_within_tile)
ROM:8896 8A			     TXA			     ; A=col*5
ROM:8897 18			     CLC
ROM:8898 79 9D 88		     ADC     byte_889D,Y	     ; col*5 +/- 0/1/2
ROM:889B AA			     TAX			     ; X = x as	a count	of 2-pixel increments
ROM:889C 60			     RTS
ROM:889C	     ; End of function calc_x_in_2_pixel_incs
ROM:889C
ROM:889C	     ; ---------------------------------------------------------------------------
ROM:889D FE FF 00 01+byte_889D:	     .BYTE $FE,	$FF, 0,	1, 2	     ; DATA XREF: calc_x_in_2_pixel_incs+9r
ROM:88A2
ROM:88A2	     ; =============== S U B R O U T I N E =======================================
ROM:88A2
ROM:88A2
ROM:88A2	     wipe_or_draw_level:			     ; CODE XREF: init_and_draw_level:draw_levelp
ROM:88A2 A9 58			     LDA     #88		     ; 176/2 - y radius
ROM:88A4 85 73			     STA     $73
ROM:88A6 A9 8C			     LDA     #140		     ; 280/2 - x radius
ROM:88A8 85 74			     STA     $74
ROM:88AA A5 A5			     LDA     $A5		     ; wiping or drawing?
ROM:88AC F0 0F			     BEQ     loc_88BD		     ; drawing,	skip
ROM:88AE A2 AA			     LDX     #170		     ; number of circles
ROM:88B0 86 6D			     STX     $6D
ROM:88B2 A2 00			     LDX     #0
ROM:88B4 86 72			     STX     $72
ROM:88B6
ROM:88B6	     loc_88B6:					     ; CODE XREF: wipe_or_draw_level+19j
ROM:88B6 20 D7 88		     JSR     render_wipe_circle
ROM:88B9 C6 6D			     DEC     $6D
ROM:88BB D0 F9			     BNE     loc_88B6
ROM:88BD
ROM:88BD	     loc_88BD:					     ; CODE XREF: wipe_or_draw_level+Aj
ROM:88BD A9 01			     LDA     #1
ROM:88BF 85 6D			     STA     $6D
ROM:88C1 85 A5			     STA     $A5
ROM:88C3 85 72			     STA     $72
ROM:88C5 20 70 7A		     JSR     display_no_lives
ROM:88C8 20 8C 7A		     JSR     display_level
ROM:88CB
ROM:88CB	     loc_88CB:					     ; CODE XREF: wipe_or_draw_level+32j
ROM:88CB 20 D7 88		     JSR     render_wipe_circle
ROM:88CE E6 6D			     INC     $6D
ROM:88D0 A5 6D			     LDA     $6D
ROM:88D2 C9 AA			     CMP     #170		     ; done?
ROM:88D4 D0 F5			     BNE     loc_88CB		     ; no, loop
ROM:88D6 60			     RTS
ROM:88D6	     ; End of function wipe_or_draw_level
ROM:88D6
ROM:88D7
ROM:88D7	     ; =============== S U B R O U T I N E =======================================
ROM:88D7
ROM:88D7
ROM:88D7	     render_wipe_circle:			     ; CODE XREF: wipe_or_draw_level:loc_88B6p
ROM:88D7							     ; wipe_or_draw_level:loc_88CBp
ROM:88D7 A5 6D			     LDA     $6D		     ; circle number
ROM:88D9 85 69			     STA     $69
ROM:88DB A9 00			     LDA     #0
ROM:88DD 85 6A			     STA     $6A
ROM:88DF 85 67			     STA     $67
ROM:88E1 85 68			     STA     $68
ROM:88E3 A5 69			     LDA     $69		     ; circle #
ROM:88E5 0A			     ASL     A			     ; *2
ROM:88E6 85 6B			     STA     $6B		     ; circle *2 (lsb)
ROM:88E8 A5 6A			     LDA     $6A
ROM:88EA 2A			     ROL     A
ROM:88EB 85 6C			     STA     $6C		     ; circle *2 (msb)
ROM:88ED A9 03			     LDA     #3
ROM:88EF 38			     SEC
ROM:88F0 E5 6B			     SBC     $6B
ROM:88F2 85 6B			     STA     $6B
ROM:88F4 A9 00			     LDA     #0
ROM:88F6 E5 6C			     SBC     $6C
ROM:88F8 85 6C			     STA     $6C
ROM:88FA A5 73			     LDA     $73
ROM:88FC 38			     SEC
ROM:88FD E5 6D			     SBC     $6D
ROM:88FF 85 75			     STA     $75
ROM:8901 A9 00			     LDA     #0
ROM:8903 E9 00			     SBC     #0
ROM:8905 85 79			     STA     $79
ROM:8907 A5 73			     LDA     $73
ROM:8909 85 76			     STA     $76
ROM:890B 85 77			     STA     $77
ROM:890D A9 00			     LDA     #0
ROM:890F 85 7A			     STA     $7A
ROM:8911 85 7B			     STA     $7B
ROM:8913 A5 73			     LDA     $73
ROM:8915 18			     CLC
ROM:8916 65 6D			     ADC     $6D
ROM:8918 85 78			     STA     $78
ROM:891A A9 00			     LDA     #0
ROM:891C 69 00			     ADC     #0
ROM:891E 85 7C			     STA     $7C
ROM:8920 A5 74			     LDA     $74
ROM:8922 38			     SEC
ROM:8923 E5 6D			     SBC     $6D
ROM:8925 AA			     TAX
ROM:8926 A9 00			     LDA     #0
ROM:8928 E9 00			     SBC     #0
ROM:892A 20 45 8A		     JSR     sub_8A45
ROM:892D 84 7D			     STY     $7D
ROM:892F 85 81			     STA     $81
ROM:8931 A6 74			     LDX     $74
ROM:8933 A9 00			     LDA     #0
ROM:8935 20 45 8A		     JSR     sub_8A45
ROM:8938 84 7E			     STY     $7E
ROM:893A 84 7F			     STY     $7F
ROM:893C 85 82			     STA     $82
ROM:893E 85 83			     STA     $83
ROM:8940 A5 74			     LDA     $74
ROM:8942 18			     CLC
ROM:8943 65 6D			     ADC     $6D
ROM:8945 AA			     TAX
ROM:8946 A9 00			     LDA     #0
ROM:8948 69 00			     ADC     #0
ROM:894A 20 45 8A		     JSR     sub_8A45
ROM:894D 84 80			     STY     $80
ROM:894F 85 84			     STA     $84
ROM:8951
ROM:8951	     loc_8951:					     ; CODE XREF: render_wipe_circle:loc_8A42j
ROM:8951 A5 68			     LDA     $68
ROM:8953 C5 6A			     CMP     $6A
ROM:8955 90 18			     BCC     loc_896F
ROM:8957 F0 10			     BEQ     loc_8969
ROM:8959
ROM:8959	     loc_8959:					     ; CODE XREF: render_wipe_circle+96j
ROM:8959 A5 67			     LDA     $67
ROM:895B C5 69			     CMP     $69
ROM:895D D0 09			     BNE     locret_8968
ROM:895F A5 68			     LDA     $68
ROM:8961 C5 6A			     CMP     $6A
ROM:8963 D0 03			     BNE     locret_8968
ROM:8965 4C 69 8A		     JMP     sub_8A69
ROM:8968	     ; ---------------------------------------------------------------------------
ROM:8968
ROM:8968	     locret_8968:				     ; CODE XREF: render_wipe_circle+86j
ROM:8968							     ; render_wipe_circle+8Cj
ROM:8968 60			     RTS
ROM:8969	     ; ---------------------------------------------------------------------------
ROM:8969
ROM:8969	     loc_8969:					     ; CODE XREF: render_wipe_circle+80j
ROM:8969 A5 67			     LDA     $67
ROM:896B C5 69			     CMP     $69
ROM:896D B0 EA			     BCS     loc_8959
ROM:896F
ROM:896F	     loc_896F:					     ; CODE XREF: render_wipe_circle+7Ej
ROM:896F 20 69 8A		     JSR     sub_8A69
ROM:8972 A5 6C			     LDA     $6C
ROM:8974 10 31			     BPL     loc_89A7
ROM:8976 A5 67			     LDA     $67
ROM:8978 0A			     ASL     A
ROM:8979 85 6F			     STA     $6F
ROM:897B A5 68			     LDA     $68
ROM:897D 2A			     ROL     A
ROM:897E 85 70			     STA     $70
ROM:8980 A5 6F			     LDA     $6F
ROM:8982 0A			     ASL     A
ROM:8983 85 6F			     STA     $6F
ROM:8985 A5 70			     LDA     $70
ROM:8987 2A			     ROL     A
ROM:8988 85 70			     STA     $70
ROM:898A A5 6B			     LDA     $6B
ROM:898C 18			     CLC
ROM:898D 65 6F			     ADC     $6F
ROM:898F 85 6F			     STA     $6F
ROM:8991 A5 6C			     LDA     $6C
ROM:8993 65 70			     ADC     $70
ROM:8995 85 70			     STA     $70
ROM:8997 A9 06			     LDA     #6
ROM:8999 18			     CLC
ROM:899A 65 6F			     ADC     $6F
ROM:899C 85 6B			     STA     $6B
ROM:899E A9 00			     LDA     #0
ROM:89A0 65 70			     ADC     $70
ROM:89A2 85 6C			     STA     $6C
ROM:89A4 4C 14 8A		     JMP     loc_8A14
ROM:89A7	     ; ---------------------------------------------------------------------------
ROM:89A7
ROM:89A7	     loc_89A7:					     ; CODE XREF: render_wipe_circle+9Dj
ROM:89A7 A5 67			     LDA     $67
ROM:89A9 38			     SEC
ROM:89AA E5 69			     SBC     $69
ROM:89AC 85 6F			     STA     $6F
ROM:89AE A5 68			     LDA     $68
ROM:89B0 E5 6A			     SBC     $6A
ROM:89B2 85 70			     STA     $70
ROM:89B4 A5 6F			     LDA     $6F
ROM:89B6 0A			     ASL     A
ROM:89B7 85 6F			     STA     $6F
ROM:89B9 A5 70			     LDA     $70
ROM:89BB 2A			     ROL     A
ROM:89BC 85 70			     STA     $70
ROM:89BE A5 6F			     LDA     $6F
ROM:89C0 0A			     ASL     A
ROM:89C1 85 6F			     STA     $6F
ROM:89C3 A5 70			     LDA     $70
ROM:89C5 2A			     ROL     A
ROM:89C6 85 70			     STA     $70
ROM:89C8 A5 6F			     LDA     $6F
ROM:89CA 18			     CLC
ROM:89CB 69 10			     ADC     #$10
ROM:89CD 85 6F			     STA     $6F
ROM:89CF A5 70			     LDA     $70
ROM:89D1 69 00			     ADC     #0
ROM:89D3 85 70			     STA     $70
ROM:89D5 A5 6F			     LDA     $6F
ROM:89D7 18			     CLC
ROM:89D8 65 6B			     ADC     $6B
ROM:89DA 85 6B			     STA     $6B
ROM:89DC A5 70			     LDA     $70
ROM:89DE 65 6C			     ADC     $6C
ROM:89E0 85 6C			     STA     $6C
ROM:89E2 A5 69			     LDA     $69
ROM:89E4 08			     PHP
ROM:89E5 C6 69			     DEC     $69
ROM:89E7 28			     PLP
ROM:89E8 D0 02			     BNE     loc_89EC
ROM:89EA C6 6A			     DEC     $6A
ROM:89EC
ROM:89EC	     loc_89EC:					     ; CODE XREF: render_wipe_circle+111j
ROM:89EC E6 75			     INC     $75
ROM:89EE D0 02			     BNE     loc_89F2
ROM:89F0 E6 79			     INC     $79
ROM:89F2
ROM:89F2	     loc_89F2:					     ; CODE XREF: render_wipe_circle+117j
ROM:89F2 C6 84			     DEC     $84
ROM:89F4 10 06			     BPL     loc_89FC
ROM:89F6 A9 06			     LDA     #6
ROM:89F8 85 84			     STA     $84
ROM:89FA C6 80			     DEC     $80
ROM:89FC
ROM:89FC	     loc_89FC:					     ; CODE XREF: render_wipe_circle+11Dj
ROM:89FC E6 81			     INC     $81
ROM:89FE A5 81			     LDA     $81
ROM:8A00 C9 07			     CMP     #7
ROM:8A02 D0 06			     BNE     loc_8A0A
ROM:8A04 A9 00			     LDA     #0
ROM:8A06 85 81			     STA     $81
ROM:8A08 E6 7D			     INC     $7D
ROM:8A0A
ROM:8A0A	     loc_8A0A:					     ; CODE XREF: render_wipe_circle+12Bj
ROM:8A0A C6 78			     DEC     $78
ROM:8A0C A5 78			     LDA     $78
ROM:8A0E C9 FF			     CMP     #$FF
ROM:8A10 D0 02			     BNE     loc_8A14
ROM:8A12 C6 7C			     DEC     $7C
ROM:8A14
ROM:8A14	     loc_8A14:					     ; CODE XREF: render_wipe_circle+CDj
ROM:8A14							     ; render_wipe_circle+139j
ROM:8A14 E6 67			     INC     $67
ROM:8A16 D0 02			     BNE     loc_8A1A
ROM:8A18 E6 68			     INC     $68
ROM:8A1A
ROM:8A1A	     loc_8A1A:					     ; CODE XREF: render_wipe_circle+13Fj
ROM:8A1A E6 83			     INC     $83
ROM:8A1C A5 83			     LDA     $83
ROM:8A1E C9 07			     CMP     #7
ROM:8A20 D0 06			     BNE     loc_8A28
ROM:8A22 A9 00			     LDA     #0
ROM:8A24 85 83			     STA     $83
ROM:8A26 E6 7F			     INC     $7F
ROM:8A28
ROM:8A28	     loc_8A28:					     ; CODE XREF: render_wipe_circle+149j
ROM:8A28 C6 76			     DEC     $76
ROM:8A2A A5 76			     LDA     $76
ROM:8A2C C9 FF			     CMP     #$FF
ROM:8A2E D0 02			     BNE     loc_8A32
ROM:8A30 C6 7A			     DEC     $7A
ROM:8A32
ROM:8A32	     loc_8A32:					     ; CODE XREF: render_wipe_circle+157j
ROM:8A32 E6 77			     INC     $77
ROM:8A34 D0 02			     BNE     loc_8A38
ROM:8A36 E6 7B			     INC     $7B
ROM:8A38
ROM:8A38	     loc_8A38:					     ; CODE XREF: render_wipe_circle+15Dj
ROM:8A38 C6 82			     DEC     $82
ROM:8A3A 10 06			     BPL     loc_8A42
ROM:8A3C A9 06			     LDA     #6
ROM:8A3E 85 82			     STA     $82
ROM:8A40 C6 7E			     DEC     $7E
ROM:8A42
ROM:8A42	     loc_8A42:					     ; CODE XREF: render_wipe_circle+163j
ROM:8A42 4C 51 89		     JMP     loc_8951
ROM:8A42	     ; End of function render_wipe_circle
ROM:8A42
ROM:8A45
ROM:8A45	     ; =============== S U B R O U T I N E =======================================
ROM:8A45
ROM:8A45
ROM:8A45	     sub_8A45:					     ; CODE XREF: render_wipe_circle+53p
ROM:8A45							     ; render_wipe_circle+5Ep ...
ROM:8A45 86 6F			     STX     $6F
ROM:8A47 A0 08			     LDY     #8
ROM:8A49 38			     SEC
ROM:8A4A E9 07			     SBC     #7
ROM:8A4C
ROM:8A4C	     loc_8A4C:					     ; CODE XREF: sub_8A45+18j
ROM:8A4C 08			     PHP
ROM:8A4D 26 70			     ROL     $70
ROM:8A4F 06 6F			     ASL     $6F
ROM:8A51 2A			     ROL     A
ROM:8A52 28			     PLP
ROM:8A53 90 05			     BCC     loc_8A5A
ROM:8A55 E9 07			     SBC     #7
ROM:8A57 4C 5C 8A		     JMP     loc_8A5C
ROM:8A5A	     ; ---------------------------------------------------------------------------
ROM:8A5A
ROM:8A5A	     loc_8A5A:					     ; CODE XREF: sub_8A45+Ej
ROM:8A5A 69 07			     ADC     #7
ROM:8A5C
ROM:8A5C	     loc_8A5C:					     ; CODE XREF: sub_8A45+12j
ROM:8A5C 88			     DEY
ROM:8A5D D0 ED			     BNE     loc_8A4C
ROM:8A5F B0 03			     BCS     loc_8A64
ROM:8A61 69 07			     ADC     #7
ROM:8A63 18			     CLC
ROM:8A64
ROM:8A64	     loc_8A64:					     ; CODE XREF: sub_8A45+1Aj
ROM:8A64 26 70			     ROL     $70
ROM:8A66 A4 70			     LDY     $70
ROM:8A68 60			     RTS
ROM:8A68	     ; End of function sub_8A45
ROM:8A68
ROM:8A69
ROM:8A69	     ; =============== S U B R O U T I N E =======================================
ROM:8A69
ROM:8A69
ROM:8A69	     sub_8A69:					     ; CODE XREF: render_wipe_circle+8Ej
ROM:8A69							     ; render_wipe_circle:loc_896Fp
ROM:8A69 A4 7C			     LDY     $7C
ROM:8A6B D0 1F			     BNE     loc_8A8C
ROM:8A6D A4 78			     LDY     $78
ROM:8A6F C0 B0			     CPY     #$B0 ; '°'
ROM:8A71 B0 19			     BCS     loc_8A8C
ROM:8A73 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:8A76 A4 7F			     LDY     $7F
ROM:8A78 C0 28			     CPY     #$28 ; '('
ROM:8A7A B0 05			     BCS     loc_8A81
ROM:8A7C A6 83			     LDX     $83
ROM:8A7E 20 F6 8A		     JSR     sub_8AF6
ROM:8A81
ROM:8A81	     loc_8A81:					     ; CODE XREF: sub_8A69+11j
ROM:8A81 A4 7E			     LDY     $7E
ROM:8A83 C0 28			     CPY     #$28 ; '('
ROM:8A85 B0 05			     BCS     loc_8A8C
ROM:8A87 A6 82			     LDX     $82
ROM:8A89 20 F6 8A		     JSR     sub_8AF6
ROM:8A8C
ROM:8A8C	     loc_8A8C:					     ; CODE XREF: sub_8A69+2j
ROM:8A8C							     ; sub_8A69+8j ...
ROM:8A8C A4 79			     LDY     $79
ROM:8A8E D0 1F			     BNE     loc_8AAF
ROM:8A90 A4 75			     LDY     $75
ROM:8A92 C0 B0			     CPY     #$B0 ; '°'
ROM:8A94 B0 19			     BCS     loc_8AAF
ROM:8A96 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:8A99 A4 7F			     LDY     $7F
ROM:8A9B C0 28			     CPY     #$28 ; '('
ROM:8A9D B0 05			     BCS     loc_8AA4
ROM:8A9F A6 83			     LDX     $83
ROM:8AA1 20 F6 8A		     JSR     sub_8AF6
ROM:8AA4
ROM:8AA4	     loc_8AA4:					     ; CODE XREF: sub_8A69+34j
ROM:8AA4 A4 7E			     LDY     $7E
ROM:8AA6 C0 28			     CPY     #$28 ; '('
ROM:8AA8 B0 05			     BCS     loc_8AAF
ROM:8AAA A6 82			     LDX     $82
ROM:8AAC 20 F6 8A		     JSR     sub_8AF6
ROM:8AAF
ROM:8AAF	     loc_8AAF:					     ; CODE XREF: sub_8A69+25j
ROM:8AAF							     ; sub_8A69+2Bj ...
ROM:8AAF A4 7B			     LDY     $7B
ROM:8AB1 D0 1F			     BNE     loc_8AD2
ROM:8AB3 A4 77			     LDY     $77
ROM:8AB5 C0 B0			     CPY     #$B0 ; '°'
ROM:8AB7 B0 19			     BCS     loc_8AD2
ROM:8AB9 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:8ABC A4 80			     LDY     $80
ROM:8ABE C0 28			     CPY     #$28 ; '('
ROM:8AC0 B0 05			     BCS     loc_8AC7
ROM:8AC2 A6 84			     LDX     $84
ROM:8AC4 20 F6 8A		     JSR     sub_8AF6
ROM:8AC7
ROM:8AC7	     loc_8AC7:					     ; CODE XREF: sub_8A69+57j
ROM:8AC7 A4 7D			     LDY     $7D
ROM:8AC9 C0 28			     CPY     #$28 ; '('
ROM:8ACB B0 05			     BCS     loc_8AD2
ROM:8ACD A6 81			     LDX     $81
ROM:8ACF 20 F6 8A		     JSR     sub_8AF6
ROM:8AD2
ROM:8AD2	     loc_8AD2:					     ; CODE XREF: sub_8A69+48j
ROM:8AD2							     ; sub_8A69+4Ej ...
ROM:8AD2 A4 7A			     LDY     $7A
ROM:8AD4 D0 1F			     BNE     locret_8AF5
ROM:8AD6 A4 76			     LDY     $76
ROM:8AD8 C0 B0			     CPY     #$B0 ; '°'
ROM:8ADA B0 19			     BCS     locret_8AF5
ROM:8ADC 20 3E 7A		     JSR     get_line_addr_pgs_1_2
ROM:8ADF A4 80			     LDY     $80
ROM:8AE1 C0 28			     CPY     #$28 ; '('
ROM:8AE3 B0 05			     BCS     loc_8AEA
ROM:8AE5 A6 84			     LDX     $84
ROM:8AE7 20 F6 8A		     JSR     sub_8AF6
ROM:8AEA
ROM:8AEA	     loc_8AEA:					     ; CODE XREF: sub_8A69+7Aj
ROM:8AEA A4 7D			     LDY     $7D
ROM:8AEC C0 28			     CPY     #$28 ; '('
ROM:8AEE B0 05			     BCS     locret_8AF5
ROM:8AF0 A6 81			     LDX     $81
ROM:8AF2 4C F6 8A		     JMP     sub_8AF6
ROM:8AF5	     ; ---------------------------------------------------------------------------
ROM:8AF5
ROM:8AF5	     locret_8AF5:				     ; CODE XREF: sub_8A69+6Bj
ROM:8AF5							     ; sub_8A69+71j ...
ROM:8AF5 60			     RTS
ROM:8AF5	     ; End of function sub_8A69
ROM:8AF5
ROM:8AF6
ROM:8AF6	     ; =============== S U B R O U T I N E =======================================
ROM:8AF6
ROM:8AF6
ROM:8AF6	     sub_8AF6:					     ; CODE XREF: sub_8A69+15p
ROM:8AF6							     ; sub_8A69+20p ...
ROM:8AF6 A5 72			     LDA     $72
ROM:8AF8 D0 08			     BNE     loc_8B02
ROM:8AFA B1 0C			     LDA     ($C),Y
ROM:8AFC 3D 0C 8B		     AND     $8B0C,X
ROM:8AFF 91 0C			     STA     ($C),Y
ROM:8B01 60			     RTS
ROM:8B02	     ; ---------------------------------------------------------------------------
ROM:8B02
ROM:8B02	     loc_8B02:					     ; CODE XREF: sub_8AF6+2j
ROM:8B02 B1 0E			     LDA     ($E),Y
ROM:8B04 3D 13 8B		     AND     $8B13,X
ROM:8B07 11 0C			     ORA     ($C),Y
ROM:8B09 91 0C			     STA     ($C),Y
ROM:8B0B 60			     RTS
ROM:8B0B	     ; End of function sub_8AF6
ROM:8B0B
ROM:8B0B	     ; ---------------------------------------------------------------------------
ROM:8B0C F0 F0 F0 F0+		     .BYTE $F0,	$F0, $F0, $F0, $8F, $8F, $8F, $8F, $8F,	$8F, $8F, $F0
ROM:8B0C 8F 8F 8F 8F+		     .BYTE $F0,	$F0
ROM:8B1A
ROM:8B1A	     ; =============== S U B R O U T I N E =======================================
ROM:8B1A
ROM:8B1A
ROM:8B1A	     game_over_animation:			     ; CODE XREF: ROM:6189p
ROM:8B1A A9 01			     LDA     #1
ROM:8B1C 8D 4B 8D		     STA     $8D4B
ROM:8B1F A9 20			     LDA     #$20 ; ' '              ; hires page 1
ROM:8B21 85 1F			     STA     hires_page_msb_1
ROM:8B23
ROM:8B23	     loc_8B23:					     ; CODE XREF: game_over_animation+4Aj
ROM:8B23 20 CF 8B		     JSR     sub_8BCF
ROM:8B26 20 BE 8B		     JSR     sub_8BBE
ROM:8B29 20 AD 8B		     JSR     sub_8BAD
ROM:8B2C 20 9C 8B		     JSR     sub_8B9C
ROM:8B2F 20 8B 8B		     JSR     sub_8B8B
ROM:8B32 20 7A 8B		     JSR     sub_8B7A
ROM:8B35 20 8B 8B		     JSR     sub_8B8B
ROM:8B38 20 9C 8B		     JSR     sub_8B9C
ROM:8B3B 20 AD 8B		     JSR     sub_8BAD
ROM:8B3E 20 BE 8B		     JSR     sub_8BBE
ROM:8B41 20 CF 8B		     JSR     sub_8BCF
ROM:8B44 20 24 8C		     JSR     sub_8C24
ROM:8B47 20 13 8C		     JSR     sub_8C13
ROM:8B4A 20 02 8C		     JSR     sub_8C02
ROM:8B4D 20 F1 8B		     JSR     sub_8BF1
ROM:8B50 20 E0 8B		     JSR     sub_8BE0
ROM:8B53 20 F1 8B		     JSR     sub_8BF1
ROM:8B56 20 02 8C		     JSR     sub_8C02
ROM:8B59 20 13 8C		     JSR     sub_8C13
ROM:8B5C 20 24 8C		     JSR     sub_8C24
ROM:8B5F AD 4B 8D		     LDA     $8D4B
ROM:8B62 C9 64			     CMP     #$64 ; 'd'
ROM:8B64 90 BD			     BCC     loc_8B23
ROM:8B66 20 CF 8B		     JSR     sub_8BCF
ROM:8B69 20 BE 8B		     JSR     sub_8BBE
ROM:8B6C 20 AD 8B		     JSR     sub_8BAD
ROM:8B6F 20 9C 8B		     JSR     sub_8B9C
ROM:8B72 20 8B 8B		     JSR     sub_8B8B
ROM:8B75 20 7A 8B		     JSR     sub_8B7A
ROM:8B78 18			     CLC
ROM:8B79 60			     RTS
ROM:8B79	     ; End of function game_over_animation
ROM:8B79
ROM:8B7A
ROM:8B7A	     ; =============== S U B R O U T I N E =======================================
ROM:8B7A
ROM:8B7A
ROM:8B7A	     sub_8B7A:					     ; CODE XREF: game_over_animation+18p
ROM:8B7A							     ; game_over_animation+5Bp
ROM:8B7A 20 E5 8C		     JSR     loc_8CE5
ROM:8B7A	     ; End of function sub_8B7A
ROM:8B7A
ROM:8B7A	     ; ---------------------------------------------------------------------------
ROM:8B7D 00 01 02 03+		     .BYTE 0, 1, 2, 3, 4, 5, 6,	7, 8, 9, $A, 2,	1, 0
ROM:8B8B
ROM:8B8B	     ; =============== S U B R O U T I N E =======================================
ROM:8B8B
ROM:8B8B
ROM:8B8B	     sub_8B8B:					     ; CODE XREF: game_over_animation+15p
ROM:8B8B							     ; game_over_animation+1Bp	...
ROM:8B8B 20 E5 8C		     JSR     loc_8CE5
ROM:8B8B	     ; End of function sub_8B8B
ROM:8B8B
ROM:8B8B	     ; ---------------------------------------------------------------------------
ROM:8B8E 00 00 01 02+		     .BYTE 0, 0, 1, 2, 3, 4, 5,	7, 9, $A, 2, 1,	0, 0
ROM:8B9C
ROM:8B9C	     ; =============== S U B R O U T I N E =======================================
ROM:8B9C
ROM:8B9C
ROM:8B9C	     sub_8B9C:					     ; CODE XREF: game_over_animation+12p
ROM:8B9C							     ; game_over_animation+1Ep	...
ROM:8B9C 20 E5 8C		     JSR     loc_8CE5
ROM:8B9C	     ; End of function sub_8B9C
ROM:8B9C
ROM:8B9C	     ; ---------------------------------------------------------------------------
ROM:8B9F 00 00 00 01+		     .BYTE 0, 0, 0, 1, 2, 3, 4,	9, $A, 2, 1, 0,	0, 0
ROM:8BAD
ROM:8BAD	     ; =============== S U B R O U T I N E =======================================
ROM:8BAD
ROM:8BAD
ROM:8BAD	     sub_8BAD:					     ; CODE XREF: game_over_animation+Fp
ROM:8BAD							     ; game_over_animation+21p	...
ROM:8BAD 20 E5 8C		     JSR     loc_8CE5
ROM:8BAD	     ; End of function sub_8BAD
ROM:8BAD
ROM:8BAD	     ; ---------------------------------------------------------------------------
ROM:8BB0 00 00 00 00+		     .BYTE 0, 0, 0, 0, 1, 2, 3,	$A, 2, 1, 0, 0,	0, 0
ROM:8BBE
ROM:8BBE	     ; =============== S U B R O U T I N E =======================================
ROM:8BBE
ROM:8BBE
ROM:8BBE	     sub_8BBE:					     ; CODE XREF: game_over_animation+Cp
ROM:8BBE							     ; game_over_animation+24p	...
ROM:8BBE 20 E5 8C		     JSR     loc_8CE5
ROM:8BBE	     ; End of function sub_8BBE
ROM:8BBE
ROM:8BBE	     ; ---------------------------------------------------------------------------
ROM:8BC1 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 1, 3,	$A, 1, 0, 0, 0,	0, 0
ROM:8BCF
ROM:8BCF	     ; =============== S U B R O U T I N E =======================================
ROM:8BCF
ROM:8BCF
ROM:8BCF	     sub_8BCF:					     ; CODE XREF: game_over_animation:loc_8B23p
ROM:8BCF							     ; game_over_animation+27p	...
ROM:8BCF 20 E5 8C		     JSR     loc_8CE5
ROM:8BCF	     ; End of function sub_8BCF
ROM:8BCF
ROM:8BCF	     ; ---------------------------------------------------------------------------
ROM:8BD2 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 1,	1, 0, 0, 0, 0, 0, 0
ROM:8BE0
ROM:8BE0	     ; =============== S U B R O U T I N E =======================================
ROM:8BE0
ROM:8BE0
ROM:8BE0	     sub_8BE0:					     ; CODE XREF: game_over_animation+36p
ROM:8BE0 20 E5 8C		     JSR     loc_8CE5
ROM:8BE0	     ; End of function sub_8BE0
ROM:8BE0
ROM:8BE0	     ; ---------------------------------------------------------------------------
ROM:8BE3 00 01 02 0A+		     .BYTE 0, 1, 2, $A,	9, 8, 7, 6, 5, 4, 3, 2,	1, 0
ROM:8BF1
ROM:8BF1	     ; =============== S U B R O U T I N E =======================================
ROM:8BF1
ROM:8BF1
ROM:8BF1	     sub_8BF1:					     ; CODE XREF: game_over_animation+33p
ROM:8BF1							     ; game_over_animation+39p
ROM:8BF1 20 E5 8C		     JSR     loc_8CE5
ROM:8BF1	     ; End of function sub_8BF1
ROM:8BF1
ROM:8BF1	     ; ---------------------------------------------------------------------------
ROM:8BF4 00 00 01 02+		     .BYTE 0, 0, 1, 2, $A, 9, 7, 5, 4, 3, 2, 1,	0, 0
ROM:8C02
ROM:8C02	     ; =============== S U B R O U T I N E =======================================
ROM:8C02
ROM:8C02
ROM:8C02	     sub_8C02:					     ; CODE XREF: game_over_animation+30p
ROM:8C02							     ; game_over_animation+3Cp
ROM:8C02 20 E5 8C		     JSR     loc_8CE5
ROM:8C02	     ; End of function sub_8C02
ROM:8C02
ROM:8C02	     ; ---------------------------------------------------------------------------
ROM:8C05 00 00 00 01+		     .BYTE 0, 0, 0, 1, 2, $A, 9, 4, 3, 2, 1, 0,	0, 0
ROM:8C13
ROM:8C13	     ; =============== S U B R O U T I N E =======================================
ROM:8C13
ROM:8C13
ROM:8C13	     sub_8C13:					     ; CODE XREF: game_over_animation+2Dp
ROM:8C13							     ; game_over_animation+3Fp
ROM:8C13 20 E5 8C		     JSR     loc_8CE5
ROM:8C13	     ; End of function sub_8C13
ROM:8C13
ROM:8C13	     ; ---------------------------------------------------------------------------
ROM:8C16 00 00 00 00+		     .BYTE 0, 0, 0, 0, 1, 2, $A, 3, 2, 1, 0, 0,	0, 0
ROM:8C24
ROM:8C24	     ; =============== S U B R O U T I N E =======================================
ROM:8C24
ROM:8C24
ROM:8C24	     sub_8C24:					     ; CODE XREF: game_over_animation+2Ap
ROM:8C24							     ; game_over_animation+42p
ROM:8C24 20 E5 8C		     JSR     loc_8CE5
ROM:8C24	     ; End of function sub_8C24
ROM:8C24
ROM:8C24	     ; ---------------------------------------------------------------------------
ROM:8C27 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 1, $A, 3, 1, 0, 0, 0,	0, 0
ROM:8C35 80			     .BYTE $80 ; 
ROM:8C36 80			     .BYTE $80 ; 
ROM:8C37 80			     .BYTE $80 ; 
ROM:8C38 80			     .BYTE $80 ; 
ROM:8C39 80			     .BYTE $80 ; 
ROM:8C3A 80			     .BYTE $80 ; 
ROM:8C3B 80			     .BYTE $80 ; 
ROM:8C3C 80			     .BYTE $80 ; 
ROM:8C3D 80			     .BYTE $80 ; 
ROM:8C3E 80			     .BYTE $80 ; 
ROM:8C3F 80			     .BYTE $80 ; 
ROM:8C40 80			     .BYTE $80 ; 
ROM:8C41 80			     .BYTE $80 ; 
ROM:8C42 80			     .BYTE $80 ; 
ROM:8C43 C0			     .BYTE $C0 ; À
ROM:8C44 AA			     .BYTE $AA ; ª
ROM:8C45 D5			     .BYTE $D5 ; Õ
ROM:8C46 AA			     .BYTE $AA ; ª
ROM:8C47 D5			     .BYTE $D5 ; Õ
ROM:8C48 AA			     .BYTE $AA ; ª
ROM:8C49 D5			     .BYTE $D5 ; Õ
ROM:8C4A AA			     .BYTE $AA ; ª
ROM:8C4B D5			     .BYTE $D5 ; Õ
ROM:8C4C AA			     .BYTE $AA ; ª
ROM:8C4D D5			     .BYTE $D5 ; Õ
ROM:8C4E AA			     .BYTE $AA ; ª
ROM:8C4F D5			     .BYTE $D5 ; Õ
ROM:8C50 80			     .BYTE $80 ; 
ROM:8C51 90			     .BYTE $90 ; 
ROM:8C52 80			     .BYTE $80 ; 
ROM:8C53 80			     .BYTE $80 ; 
ROM:8C54 80			     .BYTE $80 ; 
ROM:8C55 80			     .BYTE $80 ; 
ROM:8C56 80			     .BYTE $80 ; 
ROM:8C57 80			     .BYTE $80 ; 
ROM:8C58 80			     .BYTE $80 ; 
ROM:8C59 80			     .BYTE $80 ; 
ROM:8C5A 80			     .BYTE $80 ; 
ROM:8C5B 80			     .BYTE $80 ; 
ROM:8C5C 80			     .BYTE $80 ; 
ROM:8C5D 80			     .BYTE $80 ; 
ROM:8C5E 82			     .BYTE $82 ; 
ROM:8C5F 90			     .BYTE $90 ; 
ROM:8C60 AA			     .BYTE $AA ; ª
ROM:8C61 D1			     .BYTE $D1 ; Ñ
ROM:8C62 A2			     .BYTE $A2 ; ¢
ROM:8C63 D5			     .BYTE $D5 ; Õ
ROM:8C64 A8			     .BYTE $A8 ; ¨
ROM:8C65 85			     .BYTE $85 ; 
ROM:8C66 A8			     .BYTE $A8 ; ¨
ROM:8C67 C5			     .BYTE $C5 ; Å
ROM:8C68 A2			     .BYTE $A2 ; ¢
ROM:8C69 D4			     .BYTE $D4 ; Ô
ROM:8C6A A2			     .BYTE $A2 ; ¢
ROM:8C6B 95			     .BYTE $95 ; 
ROM:8C6C 82			     .BYTE $82 ; 
ROM:8C6D 90			     .BYTE $90 ; 
ROM:8C6E 82			     .BYTE $82 ; 
ROM:8C6F 91			     .BYTE $91 ; 
ROM:8C70 A2			     .BYTE $A2 ; ¢
ROM:8C71 C5			     .BYTE $C5 ; Å
ROM:8C72 A8			     .BYTE $A8 ; ¨
ROM:8C73 80			     .BYTE $80 ; 
ROM:8C74 88			     .BYTE $88 ; 
ROM:8C75 C5			     .BYTE $C5 ; Å
ROM:8C76 A2			     .BYTE $A2 ; ¢
ROM:8C77 94			     .BYTE $94 ; 
ROM:8C78 A0			     .BYTE $A0 ;  
ROM:8C79 90			     .BYTE $90 ; 
ROM:8C7A 82			     .BYTE $82 ; 
ROM:8C7B 90			     .BYTE $90 ; 
ROM:8C7C 82			     .BYTE $82 ; 
ROM:8C7D 90			     .BYTE $90 ; 
ROM:8C7E A2			     .BYTE $A2 ; ¢
ROM:8C7F C4			     .BYTE $C4 ; Ä
ROM:8C80 A8			     .BYTE $A8 ; ¨
ROM:8C81 80			     .BYTE $80 ; 
ROM:8C82 88			     .BYTE $88 ; 
ROM:8C83 C5			     .BYTE $C5 ; Å
ROM:8C84 A2			     .BYTE $A2 ; ¢
ROM:8C85 94			     .BYTE $94 ; 
ROM:8C86 A0			     .BYTE $A0 ;  
ROM:8C87 90			     .BYTE $90 ; 
ROM:8C88 82			     .BYTE $82 ; 
ROM:8C89 90			     .BYTE $90 ; 
ROM:8C8A 82			     .BYTE $82 ; 
ROM:8C8B 90			     .BYTE $90 ; 
ROM:8C8C A2			     .BYTE $A2 ; ¢
ROM:8C8D C4			     .BYTE $C4 ; Ä
ROM:8C8E A8			     .BYTE $A8 ; ¨
ROM:8C8F 81			     .BYTE $81 ; 
ROM:8C90 88			     .BYTE $88 ; 
ROM:8C91 C4			     .BYTE $C4 ; Ä
ROM:8C92 A2			     .BYTE $A2 ; ¢
ROM:8C93 D4			     .BYTE $D4 ; Ô
ROM:8C94 A0			     .BYTE $A0 ;  
ROM:8C95 95			     .BYTE $95 ; 
ROM:8C96 82			     .BYTE $82 ; 
ROM:8C97 90			     .BYTE $90 ; 
ROM:8C98 A2			     .BYTE $A2 ; ¢
ROM:8C99 D1			     .BYTE $D1 ; Ñ
ROM:8C9A A2			     .BYTE $A2 ; ¢
ROM:8C9B C4			     .BYTE $C4 ; Ä
ROM:8C9C 88			     .BYTE $88 ; 
ROM:8C9D 80			     .BYTE $80 ; 
ROM:8C9E 88			     .BYTE $88 ; 
ROM:8C9F C4			     .BYTE $C4 ; Ä
ROM:8CA0 A2			     .BYTE $A2 ; ¢
ROM:8CA1 84			     .BYTE $84 ; 
ROM:8CA2 A0			     .BYTE $A0 ;  
ROM:8CA3 85			     .BYTE $85 ; 
ROM:8CA4 82			     .BYTE $82 ; 
ROM:8CA5 90			     .BYTE $90 ; 
ROM:8CA6 82			     .BYTE $82 ; 
ROM:8CA7 91			     .BYTE $91 ; 
ROM:8CA8 A2			     .BYTE $A2 ; ¢
ROM:8CA9 C4			     .BYTE $C4 ; Ä
ROM:8CAA 88			     .BYTE $88 ; 
ROM:8CAB 80			     .BYTE $80 ; 
ROM:8CAC 88			     .BYTE $88 ; 
ROM:8CAD C4			     .BYTE $C4 ; Ä
ROM:8CAE AA			     .BYTE $AA ; ª
ROM:8CAF 84			     .BYTE $84 ; 
ROM:8CB0 A0			     .BYTE $A0 ;  
ROM:8CB1 85			     .BYTE $85 ; 
ROM:8CB2 82			     .BYTE $82 ; 
ROM:8CB3 90			     .BYTE $90 ; 
ROM:8CB4 82			     .BYTE $82 ; 
ROM:8CB5 91			     .BYTE $91 ; 
ROM:8CB6 A2			     .BYTE $A2 ; ¢
ROM:8CB7 C4			     .BYTE $C4 ; Ä
ROM:8CB8 88			     .BYTE $88 ; 
ROM:8CB9 80			     .BYTE $80 ; 
ROM:8CBA 88			     .BYTE $88 ; 
ROM:8CBB C4			     .BYTE $C4 ; Ä
ROM:8CBC 8A			     .BYTE $8A ; 
ROM:8CBD 84			     .BYTE $84 ; 
ROM:8CBE A0			     .BYTE $A0 ;  
ROM:8CBF 91			     .BYTE $91 ; 
ROM:8CC0 82			     .BYTE $82 ; 
ROM:8CC1 90			     .BYTE $90 ; 
ROM:8CC2 AA			     .BYTE $AA ; ª
ROM:8CC3 91			     .BYTE $91 ; 
ROM:8CC4 A2			     .BYTE $A2 ; ¢
ROM:8CC5 C4			     .BYTE $C4 ; Ä
ROM:8CC6 A8			     .BYTE $A8 ; ¨
ROM:8CC7 85			     .BYTE $85 ; 
ROM:8CC8 A8			     .BYTE $A8 ; ¨
ROM:8CC9 85			     .BYTE $85 ; 
ROM:8CCA 82			     .BYTE $82 ; 
ROM:8CCB D4			     .BYTE $D4 ; Ô
ROM:8CCC A2			     .BYTE $A2 ; ¢
ROM:8CCD 91			     .BYTE $91 ; 
ROM:8CCE 82			     .BYTE $82 ; 
ROM:8CCF 28 8C	     word_8CCF:	     .WORD $8C28		     ; DATA XREF: ROM:8CFAr
ROM:8CCF							     ; ROM:8D00r
ROM:8CD1 36 8C			     .WORD $8C36
ROM:8CD3 44 8C			     .WORD $8C44
ROM:8CD5 52 8C			     .WORD $8C52
ROM:8CD7 60 8C			     .WORD $8C60
ROM:8CD9 6E 8C			     .WORD $8C6E
ROM:8CDB 7C 8C			     .WORD $8C7C
ROM:8CDD 8A 8C			     .WORD $8C8A
ROM:8CDF 98 8C			     .WORD $8C98
ROM:8CE1 A6 8C			     .WORD $8CA6
ROM:8CE3 B4 8C			     .WORD $8CB4
ROM:8CE5	     ; ---------------------------------------------------------------------------
ROM:8CE5
ROM:8CE5	     loc_8CE5:					     ; CODE XREF: sub_8B7Ap
ROM:8CE5							     ; sub_8B8Bp ...
ROM:8CE5 68			     PLA
ROM:8CE6 85 0A			     STA     $A
ROM:8CE8 68			     PLA
ROM:8CE9 85 0B			     STA     $B			     ; data table address
ROM:8CEB A0 50			     LDY     #$50 ; 'P'
ROM:8CED 84 86			     STY     row
ROM:8CEF D0 21			     BNE     loc_8D12
ROM:8CF1
ROM:8CF1	     loc_8CF1:					     ; CODE XREF: ROM:8D1Bj
ROM:8CF1 20 31 7A		     JSR     calc_line_addr_in_0C
ROM:8CF4 A0 00			     LDY     #0
ROM:8CF6 B1 0A			     LDA     ($A),Y		     ; get entry from table
ROM:8CF8 0A			     ASL     A			     ; *2
ROM:8CF9 AA			     TAX
ROM:8CFA BD CF 8C		     LDA     word_8CCF,X
ROM:8CFD 8D 09 8D		     STA     $8D09
ROM:8D00 BD D0 8C		     LDA     word_8CCF+1,X
ROM:8D03 8D 0A 8D		     STA     $8D0A		     ; get table entry
ROM:8D06 A0 0D			     LDY     #$D
ROM:8D08
ROM:8D08	     loc_8D08:					     ; CODE XREF: ROM:8D10j
ROM:8D08 B9 08 8D		     LDA     $8D08,Y
ROM:8D0B 91 0C			     STA     ($C),Y
ROM:8D0D C8			     INY
ROM:8D0E C0 1B			     CPY     #$1B
ROM:8D10 90 F6			     BCC     loc_8D08
ROM:8D12
ROM:8D12	     loc_8D12:					     ; CODE XREF: ROM:8CEFj
ROM:8D12 20 4C 8D		     JSR     sub_8D4C
ROM:8D15 E6 86			     INC     row
ROM:8D17 A4 86			     LDY     row
ROM:8D19 C0 5F			     CPY     #$5F ; '_'
ROM:8D1B 90 D4			     BCC     loc_8CF1
ROM:8D1D AE 4B 8D		     LDX     $8D4B
ROM:8D20 A0 FF			     LDY     #$FF
ROM:8D22
ROM:8D22	     loc_8D22:					     ; CODE XREF: ROM:8D23j
ROM:8D22							     ; ROM:8D26j
ROM:8D22 88			     DEY
ROM:8D23 D0 FD			     BNE     loc_8D22
ROM:8D25 CA			     DEX
ROM:8D26 D0 FA			     BNE     loc_8D22
ROM:8D28 EE 4B 8D		     INC     $8D4B
ROM:8D2B A5 95			     LDA     paddles_detected
ROM:8D2D C9 CB			     CMP     #$CB ; 'Ë'
ROM:8D2F F0 0A			     BEQ     loc_8D3B
ROM:8D31 AD 62 C0		     LDA     $C062
ROM:8D34 30 0B			     BMI     loc_8D41
ROM:8D36 AD 61 C0		     LDA     $C061
ROM:8D39 30 06			     BMI     loc_8D41
ROM:8D3B
ROM:8D3B	     loc_8D3B:					     ; CODE XREF: ROM:8D2Fj
ROM:8D3B AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:8D3E 30 01			     BMI     loc_8D41		     ; key pressed? yes, go
ROM:8D40 60			     RTS
ROM:8D41	     ; ---------------------------------------------------------------------------
ROM:8D41
ROM:8D41	     loc_8D41:					     ; CODE XREF: ROM:8D34j
ROM:8D41							     ; ROM:8D39j ...
ROM:8D41 68			     PLA
ROM:8D42 68			     PLA			     ; discard return address
ROM:8D43 38			     SEC
ROM:8D44 AD 00 C0		     LDA     $C000		     ; read keyboard
ROM:8D47 8D 10 C0		     STA     $C010		     ; strobe keyboard
ROM:8D4A 60			     RTS
ROM:8D4A	     ; ---------------------------------------------------------------------------
ROM:8D4B 9D			     .BYTE $9D
ROM:8D4C
ROM:8D4C	     ; =============== S U B R O U T I N E =======================================
ROM:8D4C
ROM:8D4C
ROM:8D4C	     sub_8D4C:					     ; CODE XREF: ROM:loc_8D12p
ROM:8D4C E6 0A			     INC     $A
ROM:8D4E D0 02			     BNE     locret_8D52
ROM:8D50 E6 0B			     INC     $B
ROM:8D52
ROM:8D52	     locret_8D52:				     ; CODE XREF: sub_8D4C+2j
ROM:8D52 60			     RTS
ROM:8D52	     ; End of function sub_8D4C
ROM:8D52
ROM:8D52	     ; ---------------------------------------------------------------------------
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8D53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0
ROM:8E00	     ; ---------------------------------------------------------------------------
ROM:8E00
ROM:8E00	     loc_8E00:					     ; CODE XREF: ROM:loc_BE0Dj
ROM:8E00 A9 44			     LDA     #$44 ; 'D'
ROM:8E02 8D 78 04		     STA     $478
ROM:8E05 A9 00			     LDA     #0
ROM:8E07 20 A0 B9		     JSR     sub_B9A0
ROM:8E0A EA			     NOP
ROM:8E0B EA			     NOP
ROM:8E0C EA			     NOP
ROM:8E0D EA			     NOP
ROM:8E0E EA			     NOP
ROM:8E0F EA			     NOP
ROM:8E10 A9 20			     LDA     #$20 ; ' '
ROM:8E12 85 4F			     STA     $4F
ROM:8E14
ROM:8E14	     loc_8E14:					     ; CODE XREF: ROM:8E27j
ROM:8E14 88			     DEY
ROM:8E15 D0 09			     BNE     loc_8E20
ROM:8E17 C6 4F			     DEC     $4F
ROM:8E19 D0 05			     BNE     loc_8E20
ROM:8E1B 4C AF BE		     JMP     loc_BEAF
ROM:8E1B	     ; ---------------------------------------------------------------------------
ROM:8E1E EA			     .BYTE $EA ; ê
ROM:8E1F EA			     .BYTE $EA ; ê
ROM:8E20	     ; ---------------------------------------------------------------------------
ROM:8E20
ROM:8E20	     loc_8E20:					     ; CODE XREF: ROM:8E15j
ROM:8E20							     ; ROM:8E19j ...
ROM:8E20 BD 8C C0		     LDA     $C08C,X
ROM:8E23 10 FB			     BPL     loc_8E20
ROM:8E25
ROM:8E25	     loc_8E25:					     ; CODE XREF: ROM:8E31j
ROM:8E25 C9 D4			     CMP     #$D4 ; 'Ô'
ROM:8E27 D0 EB			     BNE     loc_8E14
ROM:8E29 EA			     NOP
ROM:8E2A
ROM:8E2A	     loc_8E2A:					     ; CODE XREF: ROM:8E2Dj
ROM:8E2A BD 8C C0		     LDA     $C08C,X
ROM:8E2D 10 FB			     BPL     loc_8E2A
ROM:8E2F
ROM:8E2F	     loc_8E2F:					     ; CODE XREF: ROM:8E3Bj
ROM:8E2F C9 D5			     CMP     #$D5 ; 'Õ'
ROM:8E31 D0 F2			     BNE     loc_8E25
ROM:8E33 EA			     NOP
ROM:8E34
ROM:8E34	     loc_8E34:					     ; CODE XREF: ROM:8E37j
ROM:8E34 BD 8C C0		     LDA     $C08C,X
ROM:8E37 10 FB			     BPL     loc_8E34
ROM:8E39 C9 D6			     CMP     #$D6 ; 'Ö'
ROM:8E3B D0 F2			     BNE     loc_8E2F
ROM:8E3D BD 88 C0		     LDA     $C088,X
ROM:8E40 20 98 80		     JSR     loc_8098
ROM:8E43 4C B2 7B		     JMP     loc_7BB2
ROM:8E43	     ; ---------------------------------------------------------------------------
ROM:8E46 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
ROM:8E50	     ; ---------------------------------------------------------------------------
ROM:8E50
ROM:8E50	     loc_8E50:					     ; DATA XREF: zeropg:off_36o
ROM:8E50 4C B5 B7		     JMP     loc_B7B5
ROM:8E50	     ; ---------------------------------------------------------------------------
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:8E53 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0
ROM:9B00 16 4C 66 02+attract_move_tbl:.BYTE $16, $4C, $66, 2, $55, 1, $66, 2, $36, $18,	$55, 1,	$44, 1
ROM:9B00 55 01 66 02+		     .BYTE $66,	$14, $36, $D, $30, $17,	$60, 8,	$66, 3,	$16, $16, $66
ROM:9B00 36 18 55 01+		     .BYTE 4, $36, $23,	$32, 1,	$62, 1,	$55, 1,	$66, $20, $16, 7, $66
ROM:9B00 44 01 66 14+		     .BYTE 2, $36, $25,	$30, $14, $60, $E, $10,	$11, $16, $25, $10, 8
ROM:9B00 36 0D 30 17+		     .BYTE $16,	$23, $10, 6, $60, 2, $30, $F, $36, $17,	$66, 2,	$16, 7
ROM:9B00 60 08 66 03+		     .BYTE $55,	1, $66,	$1E, $16, $38, $44, 1, $16, 5, $44, 1, $16, 7
ROM:9B00 16 16 66 04+		     .BYTE $44,	1, $36,	7, $55,	1, $36,	4, $55,	1, $16,	3, $55,	1, $16
ROM:9B00 36 23 32 01+		     .BYTE 3, $36, $B, $55, 1, $16, 3, $36, $E,	$44, 1,	$66, 1,	$60, $C
ROM:9B00 62 01 55 01+		     .BYTE $30,	$29, $60, 2, $44, 1, $16, $2B, $10, 4, $60, 5, $30, 1
ROM:9B00 66 20 16 07+		     .BYTE $36,	$67, $32, 1, $44, 1, $66, $2B, $36, $C,	$30, $15, $36
ROM:9B00 66 02 36 25+		     .BYTE $12,	$55, 1,	$16, 3,	$55, 1,	$36, 5,	$55, 1,	$16, 3,	$36, 8
ROM:9B00 30 14 60 0E+		     .BYTE $66,	2, $16,	$4A, $10, 4, $60, 7, $30, 9, $36, $15, $66, $A
ROM:9B00 10 11 16 25+		     .BYTE $16,	$D, $44, 1, $66, 2, $16, 4, $44, 1, $16, 2, $44, 6, $16
ROM:9B00 10 08 16 23+		     .BYTE 4, $44, 1, $16, 2, $62, $15,	$36, $31, $66, 1, $62, 4, $12
ROM:9B00 10 06 60 02+		     .BYTE 6, $44, 1, $66, $37,	$36, 1,	$30, $1D, $60, $33, $36, $32
ROM:9B00 30 0F 36 17+		     .BYTE $66,	3, $16,	1, $10,	$1B, $60, 5, $36, $28, $44, 1, $66, $1F
ROM:9B00 66 02 16 07+		     .BYTE $36,	$14, $44, 1, $55, 1, $66, $2D, $36, 1, $30, $12, $60
ROM:9B00 55 01 66 1E+		     .BYTE $25,	$66, 1,	$55, 1,	$16, $D, $66, 2, $36, 9, $30, $A, $36
ROM:9B00 16 38 44 01+		     .BYTE 4, $44, 1, $36, 3, $44, 1, $36, 3, $16, $22,	$44, 1,	$16, 7
ROM:9B00 16 05 44 01+		     .BYTE $44,	4, $16,	3, $44,	1, $16,	$27, $12, $E, $16, $1E,	$55, 1
ROM:9B00 16 07 44 01+		     .BYTE $66,	$19, $36, 1, $30, 3, $60, 7, $10, $1F, $60, 7, $30, 9
ROM:9B00 36 07 55 01+		     .BYTE $36,	$33, $66, 4, $10, 9, $16, 8, $12, 1, $62, $C, $32, 1
ROM:9B00 36 04 55 01+		     .BYTE $36,	$32, $44, 1, $16, $B, $44, 1, $16, 9, $44, 1, $10, $2C
ROM:9B00 16 03 55 01+		     .BYTE $60,	4, $30,	3, $36,	$A, $44, 1, $16, 5, $44, 1, $36, 3, $44
ROM:9B00 16 03 36 0B+		     .BYTE 1, $36, 3, $44, 1, $66, 3, $36, 3, $55, 1, $36, 8, $55, 1
ROM:9B00 55 01 16 03+		     .BYTE $66,	$4C, $16, 9, $10, $15, $44, 1, $10, $2F, $16, 9, $12
ROM:9B00 36 0E 44 01+		     .BYTE 3, $16, $12,	$66, 2,	$36, 6,	$66, $2D, $55, 1, $16, 3, $10
ROM:9B00 66 01 60 0C+		     .BYTE $1C,	$55, 1,	$16, 3,	$44, 1,	$36, 3,	$32, $15, $36, $B, $30
ROM:9B00 30 29 60 02+		     .BYTE $B, $60, $C,	$44, 1,	$62, $D, $12, 2, $16, $D, $44, 1, $66
ROM:9B00 44 01 16 2B+		     .BYTE $20,	$36, 4,	$30, $17, $36, $1E, $44, 1, $36, $2F, $30, 8
ROM:9B00 10 04 60 05+		     .BYTE $60,	3, $10,	$22, $16, $1B, $66, $26, $55, 7, $16, 3, $55
ROM:9B00 30 01 36 67+		     .BYTE 1, $66, $1D,	$16, 2,	$10, $85, $60, 2, $30, 3, $36, 3, $32
ROM:9B00 32 01 44 01+		     .BYTE $F, $36, 3, $30, $C,	$36, $20, $66, 1, $16, $A, $60,	6, $66
ROM:9B00 66 2B 36 0C+		     .BYTE 2, $36, 8, $30, 5, $60, 2, $66, 2, $16, 8, $10, 1, $60, 6
ROM:9B00 30 15 36 12+		     .BYTE $66,	1, $36,	8, $30,	4, $60,	3, $66,	1, $16,	8, $10,	2, $60
ROM:9B00 55 01 16 03+		     .BYTE 3, $30, 1, $36, 8, $30, 3, $60, 3, $16, 9, $10, 2, $60, 3
ROM:9B00 55 01 36 05+		     .BYTE $30,	3, $36,	7, $30,	3, $60,	2, $10,	2, $16,	8, $10,	1, $60
ROM:9B00 55 01 16 03+		     .BYTE 2, $30, 2, $36, $A, $30, 2, $60, 2, $10, 3, $16, 4, $10, 3
ROM:9B00 36 08 66 02+		     .BYTE $60,	5, $30,	2, $36,	7, $66,	$16, $36, 2, $66, $33, $55, 1
ROM:9B00 16 4A 10 04+		     .BYTE $36,	5, $55,	1, $36,	4, $55,	1, $36,	3, $55,	1, $36,	3, $55
ROM:9B00 60 07 30 09+		     .BYTE 1, $66, $A9,	$62, $C, $66, 7, $60, $F, $55, 1, $66, $18, $16
ROM:9B00 36 15 66 0A+		     .BYTE $2A,	$55, 1,	$16, 3,	$66, 1,	$60, 7,	$66, 3,	$36, 3,	$30, $1B
ROM:9B00 16 0D 44 01+		     .BYTE $36,	8, $44,	1, $66,	$18, $36, $F, $66, 8, $44, 1, $66, $38
ROM:9B00 66 02 16 04+		     .BYTE $30,	$E, $66, $11, $60, 4, $66, $49,	$37, 3,	0, 0, 0, 0, 0
ROM:9B00 44 01 16 02+		     .BYTE $30,	3, 0, 0, 0, 0, 0, $33, 7, 0, 0,	0, 0, 0, $30, 3, 0, 0
ROM:9B00 44 06 16 04+		     .BYTE 0, 0, 0, $37, 3, 0, 0, 0, 0,	0, $30,	3, 0, 0, 0, 0, 0, $33
ROM:9B00 44 01 16 02+		     .BYTE 7, 0, 0, 0, 0, 0, $30, 3, 0,	0, 0, 0, 0, $37, 3, 0, 0, 0, 0
ROM:9B00 62 15 36 31+		     .BYTE 0, $30, 3, 0, 0, 0, 0, 0, $33, 7, 0,	0, 0, 0, 0, $30, 3, 0
ROM:9B00 66 01 62 04+		     .BYTE 0, 0, 0, 0, $37, 3, 0, 0, 0,	0, 0, $30, 3, 0, 0, 0, 9, 0, $33
ROM:9B00 12 06 44 01+		     .BYTE 7, 0, 0, 0, 0, 0, $30, 3, 0,	$30, $11, $11, $11, $11, $11
ROM:9B00 66 37 36 01+		     .BYTE $11,	$11, $11, 3, 0,	$30, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0
ROM:9B00 30 1D 60 33+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:9B00 36 32 66 03+		     .BYTE 0
ROM:9E00 D1			     .BYTE $D1 ; Ñ
ROM:9E01 D5			     .BYTE $D5 ; Õ
ROM:9E02 A0			     .BYTE $A0 ;  
ROM:9E03 A4			     .BYTE $A4 ; ¤
ROM:9E04 B1			     .BYTE $B1 ; ±
ROM:9E05 C3			     .BYTE $C3 ; Ã
ROM:9E06 B3			     .BYTE $B3 ; ³
ROM:9E07 B5			     .BYTE $B5 ; µ
ROM:9E08 8D			     .BYTE $8D ; 
ROM:9E09 F9			     .BYTE $F9 ; ù
ROM:9E0A F4			     .BYTE $F4 ; ô
ROM:9E0B E1			     .BYTE $E1 ; á
ROM:9E0C E2			     .BYTE $E2 ; â
ROM:9E0D EC			     .BYTE $EC ; ì
ROM:9E0E E5			     .BYTE $E5 ; å
ROM:9E0F A0			     .BYTE $A0 ;  
ROM:9E10 C5			     .BYTE $C5 ; Å
ROM:9E11 D1			     .BYTE $D1 ; Ñ
ROM:9E12 D5			     .BYTE $D5 ; Õ
ROM:9E13 A0			     .BYTE $A0 ;  
ROM:9E14 A4			     .BYTE $A4 ; ¤
ROM:9E15 B1			     .BYTE $B1 ; ±
ROM:9E16 C3			     .BYTE $C3 ; Ã
ROM:9E17 B5			     .BYTE $B5 ; µ
ROM:9E18 B1			     .BYTE $B1 ; ±
ROM:9E19 8D			     .BYTE $8D ; 
ROM:9E1A E2			     .BYTE $E2 ; â
ROM:9E1B F9			     .BYTE $F9 ; ù
ROM:9E1C F4			     .BYTE $F4 ; ô
ROM:9E1D E1			     .BYTE $E1 ; á
ROM:9E1E E2			     .BYTE $E2 ; â
ROM:9E1F EC			     .BYTE $EC ; ì
ROM:9E20 E5			     .BYTE $E5 ; å
ROM:9E21 A0			     .BYTE $A0 ;  
ROM:9E22 C5			     .BYTE $C5 ; Å
ROM:9E23 D1			     .BYTE $D1 ; Ñ
ROM:9E24 D5			     .BYTE $D5 ; Õ
ROM:9E25 A0			     .BYTE $A0 ;  
ROM:9E26 A4			     .BYTE $A4 ; ¤
ROM:9E27 B1			     .BYTE $B1 ; ±
ROM:9E28 C3			     .BYTE $C3 ; Ã
ROM:9E29 B6			     .BYTE $B6 ; ¶
ROM:9E2A B2			     .BYTE $B2 ; ²
ROM:9E2B 8D			     .BYTE $8D ; 
ROM:9E2C E2			     .BYTE $E2 ; â
ROM:9E2D E9			     .BYTE $E9 ; é
ROM:9E2E F4			     .BYTE $F4 ; ô
ROM:9E2F E1			     .BYTE $E1 ; á
ROM:9E30 E2			     .BYTE $E2 ; â
ROM:9E31 EC			     .BYTE $EC ; ì
ROM:9E32 E5			     .BYTE $E5 ; å
ROM:9E33 A0			     .BYTE $A0 ;  
ROM:9E34 C5			     .BYTE $C5 ; Å
ROM:9E35 D1			     .BYTE $D1 ; Ñ
ROM:9E36 D5			     .BYTE $D5 ; Õ
ROM:9E37 A0			     .BYTE $A0 ;  
ROM:9E38 A4			     .BYTE $A4 ; ¤
ROM:9E39 B1			     .BYTE $B1 ; ±
ROM:9E3A C3			     .BYTE $C3 ; Ã
ROM:9E3B B7			     .BYTE $B7 ; ·
ROM:9E3C C5			     .BYTE $C5 ; Å
ROM:9E3D 8D			     .BYTE $8D ; 
ROM:9E3E F8			     .BYTE $F8 ; ø
ROM:9E3F E2			     .BYTE $E2 ; â
ROM:9E40 F9			     .BYTE $F9 ; ù
ROM:9E41 F4			     .BYTE $F4 ; ô
ROM:9E42 E1			     .BYTE $E1 ; á
ROM:9E43 E2			     .BYTE $E2 ; â
ROM:9E44 EC			     .BYTE $EC ; ì
ROM:9E45 E5			     .BYTE $E5 ; å
ROM:9E46 A0			     .BYTE $A0 ;  
ROM:9E47 C5			     .BYTE $C5 ; Å
ROM:9E48 D1			     .BYTE $D1 ; Ñ
ROM:9E49 D5			     .BYTE $D5 ; Õ
ROM:9E4A A0			     .BYTE $A0 ;  
ROM:9E4B A4			     .BYTE $A4 ; ¤
ROM:9E4C B1			     .BYTE $B1 ; ±
ROM:9E4D C3			     .BYTE $C3 ; Ã
ROM:9E4E B9			     .BYTE $B9 ; ¹
ROM:9E4F C1			     .BYTE $C1 ; Á
ROM:9E50 8D			     .BYTE $8D ; 
ROM:9E51 F8			     .BYTE $F8 ; ø
ROM:9E52 E2			     .BYTE $E2 ; â
ROM:9E53 E9			     .BYTE $E9 ; é
ROM:9E54 F4			     .BYTE $F4 ; ô
ROM:9E55 E1			     .BYTE $E1 ; á
ROM:9E56 E2			     .BYTE $E2 ; â
ROM:9E57 EC			     .BYTE $EC ; ì
ROM:9E58 E5			     .BYTE $E5 ; å
ROM:9E59 A0			     .BYTE $A0 ;  
ROM:9E5A C5			     .BYTE $C5 ; Å
ROM:9E5B D1			     .BYTE $D1 ; Ñ
ROM:9E5C D5			     .BYTE $D5 ; Õ
ROM:9E5D A0			     .BYTE $A0 ;  
ROM:9E5E A4			     .BYTE $A4 ; ¤
ROM:9E5F B1			     .BYTE $B1 ; ±
ROM:9E60 C4			     .BYTE $C4 ; Ä
ROM:9E61 B2			     .BYTE $B2 ; ²
ROM:9E62 B6			     .BYTE $B6 ; ¶
ROM:9E63 8D			     .BYTE $8D ; 
ROM:9E64 E2			     .BYTE $E2 ; â
ROM:9E65 EF			     .BYTE $EF ; ï
ROM:9E66 EF			     .BYTE $EF ; ï
ROM:9E67 F4			     .BYTE $F4 ; ô
ROM:9E68 A0			     .BYTE $A0 ;  
ROM:9E69 C5			     .BYTE $C5 ; Å
ROM:9E6A D1			     .BYTE $D1 ; Ñ
ROM:9E6B D5			     .BYTE $D5 ; Õ
ROM:9E6C A0			     .BYTE $A0 ;  
ROM:9E6D A4			     .BYTE $A4 ; ¤
ROM:9E6E B1			     .BYTE $B1 ; ±
ROM:9E6F C4			     .BYTE $C4 ; Ä
ROM:9E70 C2			     .BYTE $C2 ; Â
ROM:9E71 B2			     .BYTE $B2 ; ²
ROM:9E72 8D			     .BYTE $8D ; 
ROM:9E73 F3			     .BYTE $F3 ; ó
ROM:9E74 E3			     .BYTE $E3 ; ã
ROM:9E75 EF			     .BYTE $EF ; ï
ROM:9E76 F2			     .BYTE $F2 ; ò
ROM:9E77 E5			     .BYTE $E5 ; å
ROM:9E78 E2			     .BYTE $E2 ; â
ROM:9E79 F5			     .BYTE $F5 ; õ
ROM:9E7A E6			     .BYTE $E6 ; æ
ROM:9E7B A0			     .BYTE $A0 ;  
ROM:9E7C C5			     .BYTE $C5 ; Å
ROM:9E7D D1			     .BYTE $D1 ; Ñ
ROM:9E7E D5			     .BYTE $D5 ; Õ
ROM:9E7F A0			     .BYTE $A0 ;  
ROM:9E80 A4			     .BYTE $A4 ; ¤
ROM:9E81 B1			     .BYTE $B1 ; ±
ROM:9E82 C6			     .BYTE $C6 ; Æ
ROM:9E83 B0			     .BYTE $B0 ; °
ROM:9E84 B0			     .BYTE $B0 ; °
ROM:9E85 8D			     .BYTE $8D ; 
ROM:9E86 E3			     .BYTE $E3 ; ã
ROM:9E87 E8			     .BYTE $E8 ; è
ROM:9E88 E1			     .BYTE $E1 ; á
ROM:9E89 F2			     .BYTE $F2 ; ò
ROM:9E8A E4			     .BYTE $E4 ; ä
ROM:9E8B E1			     .BYTE $E1 ; á
ROM:9E8C F4			     .BYTE $F4 ; ô
ROM:9E8D E1			     .BYTE $E1 ; á
ROM:9E8E A0			     .BYTE $A0 ;  
ROM:9E8F C5			     .BYTE $C5 ; Å
ROM:9E90 D1			     .BYTE $D1 ; Ñ
ROM:9E91 D5			     .BYTE $D5 ; Õ
ROM:9E92 A0			     .BYTE $A0 ;  
ROM:9E93 A4			     .BYTE $A4 ; ¤
ROM:9E94 C1			     .BYTE $C1 ; Á
ROM:9E95 C4			     .BYTE $C4 ; Ä
ROM:9E96 B0			     .BYTE $B0 ; °
ROM:9E97 B0			     .BYTE $B0 ; °
ROM:9E98 8D			     .BYTE $8D ; 
ROM:9E99 8D			     .BYTE $8D ; 
ROM:9E9A F2			     .BYTE $F2 ; ò
ROM:9E9B F7			     .BYTE $F7 ; ÷
ROM:9E9C F4			     .BYTE $F4 ; ô
ROM:9E9D F3			     .BYTE $F3 ; ó
ROM:9E9E F0			     .BYTE $F0 ; ð
ROM:9E9F E1			     .BYTE $E1 ; á
ROM:9EA0 F2			     .BYTE $F2 ; ò
ROM:9EA1 ED			     .BYTE $ED ; í
ROM:9EA2 A0			     .BYTE $A0 ;  
ROM:9EA3 C5			     .BYTE $C5 ; Å
ROM:9EA4 D1			     .BYTE $D1 ; Ñ
ROM:9EA5 D5			     .BYTE $D5 ; Õ
ROM:9EA6 A0			     .BYTE $A0 ;  
ROM:9EA7 A4			     .BYTE $A4 ; ¤
ROM:9EA8 C2			     .BYTE $C2 ; Â
ROM:9EA9 B7			     .BYTE $B7 ; ·
ROM:9EAA C5			     .BYTE $C5 ; Å
ROM:9EAB B8			     .BYTE $B8 ; ¸
ROM:9EAC 8D			     .BYTE $8D ; 
ROM:9EAD F2			     .BYTE $F2 ; ò
ROM:9EAE F7			     .BYTE $F7 ; ÷
ROM:9EAF F4			     .BYTE $F4 ; ô
ROM:9EB0 F3			     .BYTE $F3 ; ó
ROM:9EB1 F6			     .BYTE $F6 ; ö
ROM:9EB2 EF			     .BYTE $EF ; ï
ROM:9EB3 EC			     .BYTE $EC ; ì
ROM:9EB4 ED			     .BYTE $ED ; í
ROM:9EB5 A0			     .BYTE $A0 ;  
ROM:9EB6 C5			     .BYTE $C5 ; Å
ROM:9EB7 D1			     .BYTE $D1 ; Ñ
ROM:9EB8 D5			     .BYTE $D5 ; Õ
ROM:9EB9 A0			     .BYTE $A0 ;  
ROM:9EBA A4			     .BYTE $A4 ; ¤
ROM:9EBB C2			     .BYTE $C2 ; Â
ROM:9EBC B7			     .BYTE $B7 ; ·
ROM:9EBD C5			     .BYTE $C5 ; Å
ROM:9EBE C2			     .BYTE $C2 ; Â
ROM:9EBF 8D			     .BYTE $8D ; 
ROM:9EC0 F2			     .BYTE $F2 ; ò
ROM:9EC1 F7			     .BYTE $F7 ; ÷
ROM:9EC2 F4			     .BYTE $F4 ; ô
ROM:9EC3 F3			     .BYTE $F3 ; ó
ROM:9EC4 F4			     .BYTE $F4 ; ô
ROM:9EC5 F2			     .BYTE $F2 ; ò
ROM:9EC6 E3			     .BYTE $E3 ; ã
ROM:9EC7 EB			     .BYTE $EB ; ë
ROM:9EC8 A0			     .BYTE $A0 ;  
ROM:9EC9 C5			     .BYTE $C5 ; Å
ROM:9ECA D1			     .BYTE $D1 ; Ñ
ROM:9ECB D5			     .BYTE $D5 ; Õ
ROM:9ECC A0			     .BYTE $A0 ;  
ROM:9ECD A4			     .BYTE $A4 ; ¤
ROM:9ECE C2			     .BYTE $C2 ; Â
ROM:9ECF B7			     .BYTE $B7 ; ·
ROM:9ED0 C5			     .BYTE $C5 ; Å
ROM:9ED1 C3			     .BYTE $C3 ; Ã
ROM:9ED2 8D			     .BYTE $8D ; 
ROM:9ED3 F2			     .BYTE $F2 ; ò
ROM:9ED4 F7			     .BYTE $F7 ; ÷
ROM:9ED5 F4			     .BYTE $F4 ; ô
ROM:9ED6 F3			     .BYTE $F3 ; ó
ROM:9ED7 F3			     .BYTE $F3 ; ó
ROM:9ED8 E5			     .BYTE $E5 ; å
ROM:9ED9 E3			     .BYTE $E3 ; ã
ROM:9EDA F4			     .BYTE $F4 ; ô
ROM:9EDB A0			     .BYTE $A0 ;  
ROM:9EDC C5			     .BYTE $C5 ; Å
ROM:9EDD D1			     .BYTE $D1 ; Ñ
ROM:9EDE D5			     .BYTE $D5 ; Õ
ROM:9EDF A0			     .BYTE $A0 ;  
ROM:9EE0 A4			     .BYTE $A4 ; ¤
ROM:9EE1 C2			     .BYTE $C2 ; Â
ROM:9EE2 B7			     .BYTE $B7 ; ·
ROM:9EE3 C5			     .BYTE $C5 ; Å
ROM:9EE4 C4			     .BYTE $C4 ; Ä
ROM:9EE5 8D			     .BYTE $8D ; 
ROM:9EE6 F2			     .BYTE $F2 ; ò
ROM:9EE7 F7			     .BYTE $F7 ; ÷
ROM:9EE8 F4			     .BYTE $F4 ; ô
ROM:9EE9 F3			     .BYTE $F3 ; ó
ROM:9EEA E2			     .BYTE $E2 ; â
ROM:9EEB F5			     .BYTE $F5 ; õ
ROM:9EEC E6			     .BYTE $E6 ; æ
ROM:9EED E6			     .BYTE $E6 ; æ
ROM:9EEE A0			     .BYTE $A0 ;  
ROM:9EEF C5			     .BYTE $C5 ; Å
ROM:9EF0 D1			     .BYTE $D1 ; Ñ
ROM:9EF1 D5			     .BYTE $D5 ; Õ
ROM:9EF2 A0			     .BYTE $A0 ;  
ROM:9EF3 A4			     .BYTE $A4 ; ¤
ROM:9EF4 C2			     .BYTE $C2 ; Â
ROM:9EF5 B7			     .BYTE $B7 ; ·
ROM:9EF6 C6			     .BYTE $C6 ; Æ
ROM:9EF7 B0			     .BYTE $B0 ; °
ROM:9EF8 8D			     .BYTE $8D ; 
ROM:9EF9 F2			     .BYTE $F2 ; ò
ROM:9EFA F7			     .BYTE $F7 ; ÷
ROM:9EFB F4			     .BYTE $F4 ; ô
ROM:9EFC F3			     .BYTE $F3 ; ó
ROM:9EFD E3			     .BYTE $E3 ; ã
ROM:9EFE ED			     .BYTE $ED ; í
ROM:9EFF EE			     .BYTE $EE ; î
ROM:9F00 06			     .BYTE   6
ROM:9F01 00			     .BYTE   0
ROM:9F02 00			     .BYTE   0
ROM:9F03 07			     .BYTE   7
ROM:9F04 00			     .BYTE   0
ROM:9F05 00			     .BYTE   0
ROM:9F06 07			     .BYTE   7
ROM:9F07 00			     .BYTE   0
ROM:9F08 00			     .BYTE   0
ROM:9F09 06			     .BYTE   6
ROM:9F0A 00			     .BYTE   0
ROM:9F0B 00			     .BYTE   0
ROM:9F0C 03			     .BYTE   3
ROM:9F0D 06			     .BYTE   6
ROM:9F0E 13			     .BYTE $13
ROM:9F0F 11			     .BYTE $11
ROM:9F10 11			     .BYTE $11
ROM:9F11 11			     .BYTE $11
ROM:9F12 11			     .BYTE $11
ROM:9F13 11			     .BYTE $11
ROM:9F14 11			     .BYTE $11
ROM:9F15 11			     .BYTE $11
ROM:9F16 11			     .BYTE $11
ROM:9F17 03			     .BYTE   3
ROM:9F18 00			     .BYTE   0
ROM:9F19 00			     .BYTE   0
ROM:9F1A 03			     .BYTE   3
ROM:9F1B 06			     .BYTE   6
ROM:9F1C 03			     .BYTE   3
ROM:9F1D 00			     .BYTE   0
ROM:9F1E 00			     .BYTE   0
ROM:9F1F 00			     .BYTE   0
ROM:9F20 00			     .BYTE   0
ROM:9F21 00			     .BYTE   0
ROM:9F22 00			     .BYTE   0
ROM:9F23 07			     .BYTE   7
ROM:9F24 00			     .BYTE   0
ROM:9F25 43			     .BYTE $43 ; C
ROM:9F26 44			     .BYTE $44 ; D
ROM:9F27 44			     .BYTE $44 ; D
ROM:9F28 03			     .BYTE   3
ROM:9F29 76			     .BYTE $76 ; v
ROM:9F2A 11			     .BYTE $11
ROM:9F2B 11			     .BYTE $11
ROM:9F2C 11			     .BYTE $11
ROM:9F2D 11			     .BYTE $11
ROM:9F2E 31			     .BYTE $31 ; 1
ROM:9F2F 11			     .BYTE $11
ROM:9F30 11			     .BYTE $11
ROM:9F31 11			     .BYTE $11
ROM:9F32 11			     .BYTE $11
ROM:9F33 01			     .BYTE   1
ROM:9F34 00			     .BYTE   0
ROM:9F35 00			     .BYTE   0
ROM:9F36 13			     .BYTE $13
ROM:9F37 11			     .BYTE $11
ROM:9F38 11			     .BYTE $11
ROM:9F39 11			     .BYTE $11
ROM:9F3A 11			     .BYTE $11
ROM:9F3B 11			     .BYTE $11
ROM:9F3C 33			     .BYTE $33 ; 3
ROM:9F3D 00			     .BYTE   0
ROM:9F3E 00			     .BYTE   0
ROM:9F3F 00			     .BYTE   0
ROM:9F40 00			     .BYTE   0
ROM:9F41 00			     .BYTE   0
ROM:9F42 00			     .BYTE   0
ROM:9F43 00			     .BYTE   0
ROM:9F44 03			     .BYTE   3
ROM:9F45 00			     .BYTE   0
ROM:9F46 11			     .BYTE $11
ROM:9F47 11			     .BYTE $11
ROM:9F48 11			     .BYTE $11
ROM:9F49 31			     .BYTE $31 ; 1
ROM:9F4A 43			     .BYTE $43 ; C
ROM:9F4B 44			     .BYTE $44 ; D
ROM:9F4C 44			     .BYTE $44 ; D
ROM:9F4D 44			     .BYTE $44 ; D
ROM:9F4E 03			     .BYTE   3
ROM:9F4F 00			     .BYTE   0
ROM:9F50 00			     .BYTE   0
ROM:9F51 00			     .BYTE   0
ROM:9F52 03			     .BYTE   3
ROM:9F53 00			     .BYTE   0
ROM:9F54 71			     .BYTE $71 ; q
ROM:9F55 70			     .BYTE $70 ; p
ROM:9F56 11			     .BYTE $11
ROM:9F57 33			     .BYTE $33 ; 3
ROM:9F58 00			     .BYTE   0
ROM:9F59 00			     .BYTE   0
ROM:9F5A 00			     .BYTE   0
ROM:9F5B 08			     .BYTE   8
ROM:9F5C 03			     .BYTE   3
ROM:9F5D 70			     .BYTE $70 ; p
ROM:9F5E 00			     .BYTE   0
ROM:9F5F 08			     .BYTE   8
ROM:9F60 03			     .BYTE   3
ROM:9F61 70			     .BYTE $70 ; p
ROM:9F62 11			     .BYTE $11
ROM:9F63 11			     .BYTE $11
ROM:9F64 31			     .BYTE $31 ; 1
ROM:9F65 03			     .BYTE   3
ROM:9F66 00			     .BYTE   0
ROM:9F67 00			     .BYTE   0
ROM:9F68 13			     .BYTE $13
ROM:9F69 11			     .BYTE $11
ROM:9F6A 21			     .BYTE $21 ; !
ROM:9F6B 22			     .BYTE $22 ; "
ROM:9F6C 11			     .BYTE $11
ROM:9F6D 11			     .BYTE $11
ROM:9F6E 13			     .BYTE $13
ROM:9F6F 11			     .BYTE $11
ROM:9F70 00			     .BYTE   0
ROM:9F71 00			     .BYTE   0
ROM:9F72 30			     .BYTE $30 ; 0
ROM:9F73 00			     .BYTE   0
ROM:9F74 00			     .BYTE   0
ROM:9F75 00			     .BYTE   0
ROM:9F76 03			     .BYTE   3
ROM:9F77 00			     .BYTE   0
ROM:9F78 00			     .BYTE   0
ROM:9F79 00			     .BYTE   0
ROM:9F7A 00			     .BYTE   0
ROM:9F7B 00			     .BYTE   0
ROM:9F7C 03			     .BYTE   3
ROM:9F7D 00			     .BYTE   0
ROM:9F7E 00			     .BYTE   0
ROM:9F7F 00			     .BYTE   0
ROM:9F80 30			     .BYTE $30 ; 0
ROM:9F81 00			     .BYTE   0
ROM:9F82 00			     .BYTE   0
ROM:9F83 00			     .BYTE   0
ROM:9F84 03			     .BYTE   3
ROM:9F85 00			     .BYTE   0
ROM:9F86 00			     .BYTE   0
ROM:9F87 00			     .BYTE   0
ROM:9F88 00			     .BYTE   0
ROM:9F89 00			     .BYTE   0
ROM:9F8A 03			     .BYTE   3
ROM:9F8B 00			     .BYTE   0
ROM:9F8C 00			     .BYTE   0
ROM:9F8D 00			     .BYTE   0
ROM:9F8E 38			     .BYTE $38 ; 8
ROM:9F8F 00			     .BYTE   0
ROM:9F90 70			     .BYTE $70 ; p
ROM:9F91 00			     .BYTE   0
ROM:9F92 43			     .BYTE $43 ; C
ROM:9F93 44			     .BYTE $44 ; D
ROM:9F94 44			     .BYTE $44 ; D
ROM:9F95 44			     .BYTE $44 ; D
ROM:9F96 44			     .BYTE $44 ; D
ROM:9F97 44			     .BYTE $44 ; D
ROM:9F98 03			     .BYTE   3
ROM:9F99 70			     .BYTE $70 ; p
ROM:9F9A 13			     .BYTE $13
ROM:9F9B 11			     .BYTE $11
ROM:9F9C 11			     .BYTE $11
ROM:9F9D 11			     .BYTE $11
ROM:9F9E 11			     .BYTE $11
ROM:9F9F 11			     .BYTE $11
ROM:9FA0 03			     .BYTE   3
ROM:9FA1 70			     .BYTE $70 ; p
ROM:9FA2 00			     .BYTE   0
ROM:9FA3 00			     .BYTE   0
ROM:9FA4 70			     .BYTE $70 ; p
ROM:9FA5 00			     .BYTE   0
ROM:9FA6 13			     .BYTE $13
ROM:9FA7 11			     .BYTE $11
ROM:9FA8 03			     .BYTE   3
ROM:9FA9 00			     .BYTE   0
ROM:9FAA 00			     .BYTE   0
ROM:9FAB 00			     .BYTE   0
ROM:9FAC 00			     .BYTE   0
ROM:9FAD 00			     .BYTE   0
ROM:9FAE 03			     .BYTE   3
ROM:9FAF 11			     .BYTE $11
ROM:9FB0 11			     .BYTE $11
ROM:9FB1 11			     .BYTE $11
ROM:9FB2 11			     .BYTE $11
ROM:9FB3 01			     .BYTE   1
ROM:9FB4 03			     .BYTE   3
ROM:9FB5 00			     .BYTE   0
ROM:9FB6 03			     .BYTE   3
ROM:9FB7 00			     .BYTE   0
ROM:9FB8 00			     .BYTE   0
ROM:9FB9 00			     .BYTE   0
ROM:9FBA 00			     .BYTE   0
ROM:9FBB 00			     .BYTE   0
ROM:9FBC 03			     .BYTE   3
ROM:9FBD 00			     .BYTE   0
ROM:9FBE 00			     .BYTE   0
ROM:9FBF 00			     .BYTE   0
ROM:9FC0 00			     .BYTE   0
ROM:9FC1 00			     .BYTE   0
ROM:9FC2 03			     .BYTE   3
ROM:9FC3 00			     .BYTE   0
ROM:9FC4 03			     .BYTE   3
ROM:9FC5 00			     .BYTE   0
ROM:9FC6 00			     .BYTE   0
ROM:9FC7 70			     .BYTE $70 ; p
ROM:9FC8 00			     .BYTE   0
ROM:9FC9 00			     .BYTE   0
ROM:9FCA 03			     .BYTE   3
ROM:9FCB 00			     .BYTE   0
ROM:9FCC 90			     .BYTE $90 ; 
ROM:9FCD 70			     .BYTE $70 ; p
ROM:9FCE 00			     .BYTE   0
ROM:9FCF 00			     .BYTE   0
ROM:9FD0 03			     .BYTE   3
ROM:9FD1 00			     .BYTE   0
ROM:9FD2 11			     .BYTE $11
ROM:9FD3 11			     .BYTE $11
ROM:9FD4 11			     .BYTE $11
ROM:9FD5 11			     .BYTE $11
ROM:9FD6 11			     .BYTE $11
ROM:9FD7 11			     .BYTE $11
ROM:9FD8 11			     .BYTE $11
ROM:9FD9 11			     .BYTE $11
ROM:9FDA 11			     .BYTE $11
ROM:9FDB 11			     .BYTE $11
ROM:9FDC 11			     .BYTE $11
ROM:9FDD 11			     .BYTE $11
ROM:9FDE 11			     .BYTE $11
ROM:9FDF 11			     .BYTE $11
ROM:9FE0 00			     .BYTE   0
ROM:9FE1 00			     .BYTE   0
ROM:9FE2 00			     .BYTE   0
ROM:9FE3 00			     .BYTE   0
ROM:9FE4 00			     .BYTE   0
ROM:9FE5 00			     .BYTE   0
ROM:9FE6 00			     .BYTE   0
ROM:9FE7 00			     .BYTE   0
ROM:9FE8 00			     .BYTE   0
ROM:9FE9 00			     .BYTE   0
ROM:9FEA 00			     .BYTE   0
ROM:9FEB 00			     .BYTE   0
ROM:9FEC 00			     .BYTE   0
ROM:9FED 00			     .BYTE   0
ROM:9FEE 00			     .BYTE   0
ROM:9FEF 00			     .BYTE   0
ROM:9FF0 00			     .BYTE   0
ROM:9FF1 00			     .BYTE   0
ROM:9FF2 00			     .BYTE   0
ROM:9FF3 00			     .BYTE   0
ROM:9FF4 00			     .BYTE   0
ROM:9FF5 00			     .BYTE   0
ROM:9FF6 00			     .BYTE   0
ROM:9FF7 00			     .BYTE   0
ROM:9FF8 00			     .BYTE   0
ROM:9FF9 00			     .BYTE   0
ROM:9FFA 00			     .BYTE   0
ROM:9FFB 00			     .BYTE   0
ROM:9FFC 00			     .BYTE   0
ROM:9FFD 00			     .BYTE   0
ROM:9FFE 00			     .BYTE   0
ROM:9FFF 00			     .BYTE   0
ROM:A000 11			     .BYTE $11
ROM:A001 11			     .BYTE $11
ROM:A002 61			     .BYTE $61 ; a
ROM:A003 11			     .BYTE $11
ROM:A004 11			     .BYTE $11
ROM:A005 11			     .BYTE $11
ROM:A006 11			     .BYTE $11
ROM:A007 11			     .BYTE $11
ROM:A008 11			     .BYTE $11
ROM:A009 11			     .BYTE $11
ROM:A00A 11			     .BYTE $11
ROM:A00B 01			     .BYTE   1
ROM:A00C 11			     .BYTE $11
ROM:A00D 11			     .BYTE $11
ROM:A00E 06			     .BYTE   6
ROM:A00F 00			     .BYTE   0
ROM:A010 61			     .BYTE $61 ; a
ROM:A011 01			     .BYTE   1
ROM:A012 44			     .BYTE $44 ; D
ROM:A013 44			     .BYTE $44 ; D
ROM:A014 44			     .BYTE $44 ; D
ROM:A015 04			     .BYTE   4
ROM:A016 00			     .BYTE   0
ROM:A017 00			     .BYTE   0
ROM:A018 00			     .BYTE   0
ROM:A019 00			     .BYTE   0
ROM:A01A 00			     .BYTE   0
ROM:A01B 10			     .BYTE $10
ROM:A01C 16			     .BYTE $16
ROM:A01D 61			     .BYTE $61 ; a
ROM:A01E 60			     .BYTE $60 ; `
ROM:A01F 01			     .BYTE   1
ROM:A020 71			     .BYTE $71 ; q
ROM:A021 00			     .BYTE   0
ROM:A022 10			     .BYTE $10
ROM:A023 13			     .BYTE $13
ROM:A024 00			     .BYTE   0
ROM:A025 00			     .BYTE   0
ROM:A026 00			     .BYTE   0
ROM:A027 00			     .BYTE   0
ROM:A028 80			     .BYTE $80 ; 
ROM:A029 10			     .BYTE $10
ROM:A02A 06			     .BYTE   6
ROM:A02B 11			     .BYTE $11
ROM:A02C 11			     .BYTE $11
ROM:A02D 01			     .BYTE   1
ROM:A02E 11			     .BYTE $11
ROM:A02F 11			     .BYTE $11
ROM:A030 11			     .BYTE $11
ROM:A031 13			     .BYTE $13
ROM:A032 11			     .BYTE $11
ROM:A033 11			     .BYTE $11
ROM:A034 07			     .BYTE   7
ROM:A035 31			     .BYTE $31 ; 1
ROM:A036 11			     .BYTE $11
ROM:A037 11			     .BYTE $11
ROM:A038 61			     .BYTE $61 ; a
ROM:A039 00			     .BYTE   0
ROM:A03A 00			     .BYTE   0
ROM:A03B 47			     .BYTE $47 ; G
ROM:A03C 44			     .BYTE $44 ; D
ROM:A03D 11			     .BYTE $11
ROM:A03E 11			     .BYTE $11
ROM:A03F 13			     .BYTE $13
ROM:A040 11			     .BYTE $11
ROM:A041 11			     .BYTE $11
ROM:A042 11			     .BYTE $11
ROM:A043 31			     .BYTE $31 ; 1
ROM:A044 01			     .BYTE   1
ROM:A045 11			     .BYTE $11
ROM:A046 11			     .BYTE $11
ROM:A047 11			     .BYTE $11
ROM:A048 11			     .BYTE $11
ROM:A049 01			     .BYTE   1
ROM:A04A 00			     .BYTE   0
ROM:A04B 01			     .BYTE   1
ROM:A04C 10			     .BYTE $10
ROM:A04D 13			     .BYTE $13
ROM:A04E 11			     .BYTE $11
ROM:A04F 10			     .BYTE $10
ROM:A050 11			     .BYTE $11
ROM:A051 31			     .BYTE $31 ; 1
ROM:A052 01			     .BYTE   1
ROM:A053 11			     .BYTE $11
ROM:A054 00			     .BYTE   0
ROM:A055 00			     .BYTE   0
ROM:A056 00			     .BYTE   0
ROM:A057 80			     .BYTE $80 ; 
ROM:A058 00			     .BYTE   0
ROM:A059 00			     .BYTE   0
ROM:A05A 10			     .BYTE $10
ROM:A05B 13			     .BYTE $13
ROM:A05C 11			     .BYTE $11
ROM:A05D 10			     .BYTE $10
ROM:A05E 01			     .BYTE   1
ROM:A05F 31			     .BYTE $31 ; 1
ROM:A060 71			     .BYTE $71 ; q
ROM:A061 10			     .BYTE $10
ROM:A062 13			     .BYTE $13
ROM:A063 11			     .BYTE $11
ROM:A064 11			     .BYTE $11
ROM:A065 11			     .BYTE $11
ROM:A066 13			     .BYTE $13
ROM:A067 73			     .BYTE $73 ; s
ROM:A068 10			     .BYTE $10
ROM:A069 13			     .BYTE $13
ROM:A06A 11			     .BYTE $11
ROM:A06B 10			     .BYTE $10
ROM:A06C 01			     .BYTE   1
ROM:A06D 31			     .BYTE $31 ; 1
ROM:A06E 11			     .BYTE $11
ROM:A06F 11			     .BYTE $11
ROM:A070 03			     .BYTE   3
ROM:A071 00			     .BYTE   0
ROM:A072 00			     .BYTE   0
ROM:A073 00			     .BYTE   0
ROM:A074 13			     .BYTE $13
ROM:A075 11			     .BYTE $11
ROM:A076 11			     .BYTE $11
ROM:A077 13			     .BYTE $13
ROM:A078 11			     .BYTE $11
ROM:A079 07			     .BYTE   7
ROM:A07A 01			     .BYTE   1
ROM:A07B 31			     .BYTE $31 ; 1
ROM:A07C 11			     .BYTE $11
ROM:A07D 10			     .BYTE $10
ROM:A07E 03			     .BYTE   3
ROM:A07F 00			     .BYTE   0
ROM:A080 00			     .BYTE   0
ROM:A081 00			     .BYTE   0
ROM:A082 00			     .BYTE   0
ROM:A083 11			     .BYTE $11
ROM:A084 11			     .BYTE $11
ROM:A085 13			     .BYTE $13
ROM:A086 11			     .BYTE $11
ROM:A087 11			     .BYTE $11
ROM:A088 01			     .BYTE   1
ROM:A089 31			     .BYTE $31 ; 1
ROM:A08A 11			     .BYTE $11
ROM:A08B 17			     .BYTE $17
ROM:A08C 03			     .BYTE   3
ROM:A08D 00			     .BYTE   0
ROM:A08E 00			     .BYTE   0
ROM:A08F 00			     .BYTE   0
ROM:A090 01			     .BYTE   1
ROM:A091 00			     .BYTE   0
ROM:A092 00			     .BYTE   0
ROM:A093 03			     .BYTE   3
ROM:A094 00			     .BYTE   0
ROM:A095 00			     .BYTE   0
ROM:A096 00			     .BYTE   0
ROM:A097 30			     .BYTE $30 ; 0
ROM:A098 00			     .BYTE   0
ROM:A099 10			     .BYTE $10
ROM:A09A 13			     .BYTE $13
ROM:A09B 11			     .BYTE $11
ROM:A09C 13			     .BYTE $13
ROM:A09D 11			     .BYTE $11
ROM:A09E 31			     .BYTE $31 ; 1
ROM:A09F 21			     .BYTE $21 ; !
ROM:A0A0 21			     .BYTE $21
ROM:A0A1 21			     .BYTE $21 ; !
ROM:A0A2 21			     .BYTE $21 ; !
ROM:A0A3 21			     .BYTE $21 ; !
ROM:A0A4 21			     .BYTE $21 ; !
ROM:A0A5 31			     .BYTE $31 ; 1
ROM:A0A6 21			     .BYTE $21 ; !
ROM:A0A7 21			     .BYTE $21 ; !
ROM:A0A8 13			     .BYTE $13
ROM:A0A9 11			     .BYTE $11
ROM:A0AA 13			     .BYTE $13
ROM:A0AB 11			     .BYTE $11
ROM:A0AC 31			     .BYTE $31 ; 1
ROM:A0AD 11			     .BYTE $11
ROM:A0AE 11			     .BYTE $11
ROM:A0AF 11			     .BYTE $11
ROM:A0B0 00			     .BYTE   0
ROM:A0B1 11			     .BYTE $11
ROM:A0B2 11			     .BYTE $11
ROM:A0B3 31			     .BYTE $31 ; 1
ROM:A0B4 21			     .BYTE $21 ; !
ROM:A0B5 21			     .BYTE $21 ; !
ROM:A0B6 03			     .BYTE   3
ROM:A0B7 00			     .BYTE   0
ROM:A0B8 03			     .BYTE   3
ROM:A0B9 00			     .BYTE   0
ROM:A0BA 30			     .BYTE $30 ; 0
ROM:A0BB 11			     .BYTE $11
ROM:A0BC 11			     .BYTE $11
ROM:A0BD 11			     .BYTE $11
ROM:A0BE 01			     .BYTE   1
ROM:A0BF 10			     .BYTE $10
ROM:A0C0 11			     .BYTE $11
ROM:A0C1 31			     .BYTE $31 ; 1
ROM:A0C2 00			     .BYTE   0
ROM:A0C3 00			     .BYTE   0
ROM:A0C4 13			     .BYTE $13
ROM:A0C5 11			     .BYTE $11
ROM:A0C6 11			     .BYTE $11
ROM:A0C7 11			     .BYTE $11
ROM:A0C8 31			     .BYTE $31 ; 1
ROM:A0C9 11			     .BYTE $11
ROM:A0CA 11			     .BYTE $11
ROM:A0CB 11			     .BYTE $11
ROM:A0CC 11			     .BYTE $11
ROM:A0CD 07			     .BYTE   7
ROM:A0CE 11			     .BYTE $11
ROM:A0CF 11			     .BYTE $11
ROM:A0D0 11			     .BYTE $11
ROM:A0D1 31			     .BYTE $31 ; 1
ROM:A0D2 93			     .BYTE $93 ; 
ROM:A0D3 00			     .BYTE   0
ROM:A0D4 00			     .BYTE   0
ROM:A0D5 00			     .BYTE   0
ROM:A0D6 30			     .BYTE $30 ; 0
ROM:A0D7 70			     .BYTE $70 ; p
ROM:A0D8 10			     .BYTE $10
ROM:A0D9 11			     .BYTE $11
ROM:A0DA 11			     .BYTE $11
ROM:A0DB 01			     .BYTE   1
ROM:A0DC 80			     .BYTE $80 ; 
ROM:A0DD 00			     .BYTE   0
ROM:A0DE 00			     .BYTE   0
ROM:A0DF 30			     .BYTE $30 ; 0
ROM:A0E0 00			     .BYTE   0
ROM:A0E1 00			     .BYTE   0
ROM:A0E2 00			     .BYTE   0
ROM:A0E3 00			     .BYTE   0
ROM:A0E4 00			     .BYTE   0
ROM:A0E5 00			     .BYTE   0
ROM:A0E6 00			     .BYTE   0
ROM:A0E7 00			     .BYTE   0
ROM:A0E8 00			     .BYTE   0
ROM:A0E9 00			     .BYTE   0
ROM:A0EA 00			     .BYTE   0
ROM:A0EB 00			     .BYTE   0
ROM:A0EC 00			     .BYTE   0
ROM:A0ED 00			     .BYTE   0
ROM:A0EE 00			     .BYTE   0
ROM:A0EF 00			     .BYTE   0
ROM:A0F0 00			     .BYTE   0
ROM:A0F1 00			     .BYTE   0
ROM:A0F2 00			     .BYTE   0
ROM:A0F3 00			     .BYTE   0
ROM:A0F4 00			     .BYTE   0
ROM:A0F5 00			     .BYTE   0
ROM:A0F6 00			     .BYTE   0
ROM:A0F7 00			     .BYTE   0
ROM:A0F8 00			     .BYTE   0
ROM:A0F9 00			     .BYTE   0
ROM:A0FA 00			     .BYTE   0
ROM:A0FB 00			     .BYTE   0
ROM:A0FC 00			     .BYTE   0
ROM:A0FD 00			     .BYTE   0
ROM:A0FE 00			     .BYTE   0
ROM:A0FF 00			     .BYTE   0
ROM:A100 00			     .BYTE   0
ROM:A101 00			     .BYTE   0
ROM:A102 00			     .BYTE   0
ROM:A103 30			     .BYTE $30 ; 0
ROM:A104 00			     .BYTE   0
ROM:A105 00			     .BYTE   0
ROM:A106 00			     .BYTE   0
ROM:A107 00			     .BYTE   0
ROM:A108 00			     .BYTE   0
ROM:A109 00			     .BYTE   0
ROM:A10A 00			     .BYTE   0
ROM:A10B 00			     .BYTE   0
ROM:A10C 00			     .BYTE   0
ROM:A10D 00			     .BYTE   0
ROM:A10E 80			     .BYTE $80 ; 
ROM:A10F 07			     .BYTE   7
ROM:A110 00			     .BYTE   0
ROM:A111 30			     .BYTE $30 ; 0
ROM:A112 00			     .BYTE   0
ROM:A113 00			     .BYTE   0
ROM:A114 00			     .BYTE   0
ROM:A115 00			     .BYTE   0
ROM:A116 00			     .BYTE   0
ROM:A117 00			     .BYTE   0
ROM:A118 00			     .BYTE   0
ROM:A119 00			     .BYTE   0
ROM:A11A 70			     .BYTE $70 ; p
ROM:A11B 08			     .BYTE   8
ROM:A11C 13			     .BYTE $13
ROM:A11D 81			     .BYTE $81 ; 
ROM:A11E 07			     .BYTE   7
ROM:A11F 30			     .BYTE $30 ; 0
ROM:A120 00			     .BYTE   0
ROM:A121 00			     .BYTE   0
ROM:A122 00			     .BYTE   0
ROM:A123 00			     .BYTE   0
ROM:A124 00			     .BYTE   0
ROM:A125 00			     .BYTE   0
ROM:A126 00			     .BYTE   0
ROM:A127 70			     .BYTE $70 ; p
ROM:A128 18			     .BYTE $18
ROM:A129 31			     .BYTE $31 ; 1
ROM:A12A 03			     .BYTE   3
ROM:A12B 10			     .BYTE $10
ROM:A12C 01			     .BYTE   1
ROM:A12D 30			     .BYTE $30 ; 0
ROM:A12E 11			     .BYTE $11
ROM:A12F 11			     .BYTE $11
ROM:A130 36			     .BYTE $36 ; 6
ROM:A131 11			     .BYTE $11
ROM:A132 11			     .BYTE $11
ROM:A133 31			     .BYTE $31 ; 1
ROM:A134 00			     .BYTE   0
ROM:A135 10			     .BYTE $10
ROM:A136 01			     .BYTE   1
ROM:A137 30			     .BYTE $30 ; 0
ROM:A138 03			     .BYTE   3
ROM:A139 00			     .BYTE   0
ROM:A13A 00			     .BYTE   0
ROM:A13B 00			     .BYTE   0
ROM:A13C 00			     .BYTE   0
ROM:A13D 00			     .BYTE   0
ROM:A13E 33			     .BYTE $33 ; 3
ROM:A13F 07			     .BYTE   7
ROM:A140 00			     .BYTE   0
ROM:A141 30			     .BYTE $30 ; 0
ROM:A142 00			     .BYTE   0
ROM:A143 00			     .BYTE   0
ROM:A144 00			     .BYTE   0
ROM:A145 30			     .BYTE $30 ; 0
ROM:A146 03			     .BYTE   3
ROM:A147 00			     .BYTE   0
ROM:A148 00			     .BYTE   0
ROM:A149 00			     .BYTE   0
ROM:A14A 00			     .BYTE   0
ROM:A14B 00			     .BYTE   0
ROM:A14C 37			     .BYTE $37 ; 7
ROM:A14D 03			     .BYTE   3
ROM:A14E 00			     .BYTE   0
ROM:A14F 30			     .BYTE $30 ; 0
ROM:A150 00			     .BYTE   0
ROM:A151 00			     .BYTE   0
ROM:A152 00			     .BYTE   0
ROM:A153 30			     .BYTE $30 ; 0
ROM:A154 03			     .BYTE   3
ROM:A155 00			     .BYTE   0
ROM:A156 00			     .BYTE   0
ROM:A157 00			     .BYTE   0
ROM:A158 00			     .BYTE   0
ROM:A159 00			     .BYTE   0
ROM:A15A 33			     .BYTE $33 ; 3
ROM:A15B 07			     .BYTE   7
ROM:A15C 00			     .BYTE   0
ROM:A15D 00			     .BYTE   0
ROM:A15E 00			     .BYTE   0
ROM:A15F 00			     .BYTE   0
ROM:A160 00			     .BYTE   0
ROM:A161 30			     .BYTE $30 ; 0
ROM:A162 03			     .BYTE   3
ROM:A163 00			     .BYTE   0
ROM:A164 00			     .BYTE   0
ROM:A165 00			     .BYTE   0
ROM:A166 00			     .BYTE   0
ROM:A167 00			     .BYTE   0
ROM:A168 37			     .BYTE $37 ; 7
ROM:A169 03			     .BYTE   3
ROM:A16A 00			     .BYTE   0
ROM:A16B 00			     .BYTE   0
ROM:A16C 00			     .BYTE   0
ROM:A16D 00			     .BYTE   0
ROM:A16E 00			     .BYTE   0
ROM:A16F 30			     .BYTE $30 ; 0
ROM:A170 03			     .BYTE   3
ROM:A171 00			     .BYTE   0
ROM:A172 00			     .BYTE   0
ROM:A173 00			     .BYTE   0
ROM:A174 00			     .BYTE   0
ROM:A175 00			     .BYTE   0
ROM:A176 33			     .BYTE $33 ; 3
ROM:A177 07			     .BYTE   7
ROM:A178 00			     .BYTE   0
ROM:A179 00			     .BYTE   0
ROM:A17A 00			     .BYTE   0
ROM:A17B 00			     .BYTE   0
ROM:A17C 00			     .BYTE   0
ROM:A17D 30			     .BYTE $30 ; 0
ROM:A17E 03			     .BYTE   3
ROM:A17F 00			     .BYTE   0
ROM:A180 00			     .BYTE   0
ROM:A181 00			     .BYTE   0
ROM:A182 00			     .BYTE   0
ROM:A183 00			     .BYTE   0
ROM:A184 37			     .BYTE $37 ; 7
ROM:A185 03			     .BYTE   3
ROM:A186 00			     .BYTE   0
ROM:A187 00			     .BYTE   0
ROM:A188 00			     .BYTE   0
ROM:A189 00			     .BYTE   0
ROM:A18A 00			     .BYTE   0
ROM:A18B 30			     .BYTE $30 ; 0
ROM:A18C 03			     .BYTE   3
ROM:A18D 00			     .BYTE   0
ROM:A18E 00			     .BYTE   0
ROM:A18F 00			     .BYTE   0
ROM:A190 00			     .BYTE   0
ROM:A191 00			     .BYTE   0
ROM:A192 33			     .BYTE $33 ; 3
ROM:A193 07			     .BYTE   7
ROM:A194 00			     .BYTE   0
ROM:A195 00			     .BYTE   0
ROM:A196 00			     .BYTE   0
ROM:A197 00			     .BYTE   0
ROM:A198 00			     .BYTE   0
ROM:A199 30			     .BYTE $30 ; 0
ROM:A19A 03			     .BYTE   3
ROM:A19B 00			     .BYTE   0
ROM:A19C 00			     .BYTE   0
ROM:A19D 00			     .BYTE   0
ROM:A19E 00			     .BYTE   0
ROM:A19F 00			     .BYTE   0
ROM:A1A0 37			     .BYTE $37 ; 7
ROM:A1A1 03			     .BYTE   3
ROM:A1A2 00			     .BYTE   0
ROM:A1A3 00			     .BYTE   0
ROM:A1A4 00			     .BYTE   0
ROM:A1A5 00			     .BYTE   0
ROM:A1A6 00			     .BYTE   0
ROM:A1A7 30			     .BYTE $30 ; 0
ROM:A1A8 03			     .BYTE   3
ROM:A1A9 00			     .BYTE   0
ROM:A1AA 00			     .BYTE   0
ROM:A1AB 00			     .BYTE   0
ROM:A1AC 00			     .BYTE   0
ROM:A1AD 00			     .BYTE   0
ROM:A1AE 33			     .BYTE $33 ; 3
ROM:A1AF 07			     .BYTE   7
ROM:A1B0 00			     .BYTE   0
ROM:A1B1 00			     .BYTE   0
ROM:A1B2 00			     .BYTE   0
ROM:A1B3 00			     .BYTE   0
ROM:A1B4 00			     .BYTE   0
ROM:A1B5 30			     .BYTE $30 ; 0
ROM:A1B6 03			     .BYTE   3
ROM:A1B7 00			     .BYTE   0
ROM:A1B8 00			     .BYTE   0
ROM:A1B9 00			     .BYTE   0
ROM:A1BA 00			     .BYTE   0
ROM:A1BB 00			     .BYTE   0
ROM:A1BC 37			     .BYTE $37 ; 7
ROM:A1BD 03			     .BYTE   3
ROM:A1BE 00			     .BYTE   0
ROM:A1BF 00			     .BYTE   0
ROM:A1C0 00			     .BYTE   0
ROM:A1C1 00			     .BYTE   0
ROM:A1C2 00			     .BYTE   0
ROM:A1C3 30			     .BYTE $30 ; 0
ROM:A1C4 03			     .BYTE   3
ROM:A1C5 00			     .BYTE   0
ROM:A1C6 00			     .BYTE   0
ROM:A1C7 00			     .BYTE   0
ROM:A1C8 09			     .BYTE   9
ROM:A1C9 00			     .BYTE   0
ROM:A1CA 33			     .BYTE $33 ; 3
ROM:A1CB 07			     .BYTE   7
ROM:A1CC 00			     .BYTE   0
ROM:A1CD 00			     .BYTE   0
ROM:A1CE 00			     .BYTE   0
ROM:A1CF 00			     .BYTE   0
ROM:A1D0 00			     .BYTE   0
ROM:A1D1 30			     .BYTE $30 ; 0
ROM:A1D2 03			     .BYTE   3
ROM:A1D3 00			     .BYTE   0
ROM:A1D4 30			     .BYTE $30 ; 0
ROM:A1D5 11			     .BYTE $11
ROM:A1D6 11			     .BYTE $11
ROM:A1D7 11			     .BYTE $11
ROM:A1D8 11			     .BYTE $11
ROM:A1D9 11			     .BYTE $11
ROM:A1DA 11			     .BYTE $11
ROM:A1DB 11			     .BYTE $11
ROM:A1DC 11			     .BYTE $11
ROM:A1DD 03			     .BYTE   3
ROM:A1DE 00			     .BYTE   0
ROM:A1DF 30			     .BYTE $30 ; 0
ROM:A1E0 00			     .BYTE   0
ROM:A1E1 00			     .BYTE   0
ROM:A1E2 00			     .BYTE   0
ROM:A1E3 00			     .BYTE   0
ROM:A1E4 00			     .BYTE   0
ROM:A1E5 00			     .BYTE   0
ROM:A1E6 00			     .BYTE   0
ROM:A1E7 00			     .BYTE   0
ROM:A1E8 00			     .BYTE   0
ROM:A1E9 00			     .BYTE   0
ROM:A1EA 00			     .BYTE   0
ROM:A1EB 00			     .BYTE   0
ROM:A1EC 00			     .BYTE   0
ROM:A1ED 00			     .BYTE   0
ROM:A1EE 00			     .BYTE   0
ROM:A1EF 00			     .BYTE   0
ROM:A1F0 00			     .BYTE   0
ROM:A1F1 00			     .BYTE   0
ROM:A1F2 00			     .BYTE   0
ROM:A1F3 00			     .BYTE   0
ROM:A1F4 00			     .BYTE   0
ROM:A1F5 00			     .BYTE   0
ROM:A1F6 00			     .BYTE   0
ROM:A1F7 00			     .BYTE   0
ROM:A1F8 00			     .BYTE   0
ROM:A1F9 00			     .BYTE   0
ROM:A1FA 00			     .BYTE   0
ROM:A1FB 00			     .BYTE   0
ROM:A1FC 00			     .BYTE   0
ROM:A1FD 00			     .BYTE   0
ROM:A1FE 00			     .BYTE   0
ROM:A1FF 00			     .BYTE   0
ROM:A200 00 02 04 12+a200_lsbs_tbl:  .BYTE 0, 2, 4, $12, 6, $22, $14, $32, 8, $42, $24,	$52, $16, $62
ROM:A200 06 22 14 32+		     .BYTE $34,	$72, $A, $82, $44, $92,	$26, $A2, $54, $B2, $18, $C2
ROM:A200 08 42 24 52+		     .BYTE $64,	$D2, $36, $E2, $74, $F2, $C, 2,	$84, $12, $46, $22, $94
ROM:A200 16 62 34 72+		     .BYTE $32,	$28, $42, $A4, $52, $56, $62, $B4, $72,	$1A, $82, $C4
ROM:A200 0A 82 44 92+		     .BYTE $92,	$66, $A2, $D4, $B2, $38, $C2, $E4, $D2,	$76, $E2, $F4
ROM:A200 26 A2 54 B2+		     .BYTE $F2,	$E, 2, 4, $12, $86, $22, $14, $32, $48,	$42, $24, $52
ROM:A200 18 C2 64 D2+		     .BYTE $96,	$62, $34, $72, $2A, $82, $44, $92, $A6,	$A2, $54, $B2
ROM:A200 36 E2 74 F2+		     .BYTE $58,	$C2, $64, $D2, $B6, $E2, $74, $F2, $1C,	2, $84,	$12, $C6
ROM:A200 0C 02 84 12+		     .BYTE $22,	$94, $32, $68, $42, $A4, $52, $D6, $62,	$B4, $72, $3A
ROM:A200 46 22 94 32+		     .BYTE $82,	$C4, $92, $E6, $A2, $D4, $B2, $78, $C2,	$E4, $D2, $F6
ROM:A200 28 42 A4 52+		     .BYTE $E2,	$F4, $F2
ROM:A280 A9 A9 A9 A9+a280_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A280 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A280 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A280 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A280 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC
ROM:A300 00 04 06 14+a300_lsbs_tbl:  .BYTE 0, 4, 6, $14, 8, $24, $16, $34, $A, $44, $26, $54, $18, $64
ROM:A300 08 24 16 34+		     .BYTE $36,	$74, $C, $84, $46, $94,	$28, $A4, $56, $B4, $1A, $C4
ROM:A300 0A 44 26 54+		     .BYTE $66,	$D4, $38, $E4, $76, $F4, $E, 4,	$86, $14, $48, $24, $96
ROM:A300 18 64 36 74+		     .BYTE $34,	$2A, $44, $A6, $54, $58, $64, $B6, $74,	$1C, $84, $C6
ROM:A300 0C 84 46 94+		     .BYTE $94,	$68, $A4, $D6, $B4, $3A, $C4, $E6, $D4,	$78, $E4, $F6
ROM:A300 28 A4 56 B4+		     .BYTE $F4,	$10, 4,	6, $14,	$88, $24, $16, $34, $4A, $44, $26, $54
ROM:A300 1A C4 66 D4+		     .BYTE $98,	$64, $36, $74, $2C, $84, $46, $94, $A8,	$A4, $56, $B4
ROM:A300 38 E4 76 F4+		     .BYTE $5A,	$C4, $66, $D4, $B8, $E4, $76, $F4, $1E,	4, $86,	$14, $C8
ROM:A300 0E 04 86 14+		     .BYTE $24,	$96, $34, $6A, $44, $A6, $54, $D8, $64,	$B6, $74, $3C
ROM:A300 48 24 96 34+		     .BYTE $84,	$C6, $94, $E8, $A4, $D6, $B4, $7A, $C4,	$E6, $D4, $F8
ROM:A300 2A 44 A6 54+		     .BYTE $E4,	$F6, $F4
ROM:A380 A9 A9 A9 A9+a380_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A380 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A380 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A380 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A380 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC
ROM:A400 00 06 08 16+a400_lsbs_tbl:  .BYTE 0, 6, 8, $16, $A, $26, $18, $36, $C,	$46, $28, $56, $1A, $66
ROM:A400 0A 26 18 36+		     .BYTE $38,	$76, $E, $86, $48, $96,	$2A, $A6, $58, $B6, $1C, $C6
ROM:A400 0C 46 28 56+		     .BYTE $68,	$D6, $3A, $E6, $78, $F6, $10, 6, $88, $16, $4A,	$26, $98
ROM:A400 1A 66 38 76+		     .BYTE $36,	$2C, $46, $A8, $56, $5A, $66, $B8, $76,	$1E, $86, $C8
ROM:A400 0E 86 48 96+		     .BYTE $96,	$6A, $A6, $D8, $B6, $3C, $C6, $E8, $D6,	$7A, $E6, $F8
ROM:A400 2A A6 58 B6+		     .BYTE $F6,	$20, 6,	8, $16,	$8A, $26, $18, $36, $4C, $46, $28, $56
ROM:A400 1C C6 68 D6+		     .BYTE $9A,	$66, $38, $76, $2E, $86, $48, $96, $AA,	$A6, $58, $B6
ROM:A400 3A E6 78 F6+		     .BYTE $5C,	$C6, $68, $D6, $BA, $E6, $78, $F6, $30,	6, $88,	$16, $CA
ROM:A400 10 06 88 16+		     .BYTE $26,	$98, $36, $6C, $46, $A8, $56, $DA, $66,	$B8, $76, $3E
ROM:A400 4A 26 98 36+		     .BYTE $86,	$C8, $96, $EA, $A6, $D8, $B6, $7C, $C6,	$E8, $D6, $FA
ROM:A400 2C 46 A8 56+		     .BYTE $E6,	$F8, $F6
ROM:A480 A9 A9 A9 A9+a470_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A480 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A480 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A480 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A480 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC
ROM:A500 00 08 0A 18+a500_lsbs_tbl:  .BYTE 0, 8, $A, $18, $C, $28, $1A,	$38, $E, $48, $2A, $58,	$1C, $68
ROM:A500 0C 28 1A 38+		     .BYTE $3A,	$78, $10, $88, $4A, $98, $2C, $A8, $5A,	$B8, $1E, $C8
ROM:A500 0E 48 2A 58+		     .BYTE $6A,	$D8, $3C, $E8, $7A, $F8, $20, 8, $8A, $18, $4C,	$28, $9A
ROM:A500 1C 68 3A 78+		     .BYTE $38,	$2E, $48, $AA, $58, $5C, $68, $BA, $78,	$30, $88, $CA
ROM:A500 10 88 4A 98+		     .BYTE $98,	$6C, $A8, $DA, $B8, $3E, $C8, $EA, $D8,	$7C, $E8, $FA
ROM:A500 2C A8 5A B8+		     .BYTE $F8,	$40, 8,	$A, $18, $8C, $28, $1A,	$38, $4E, $48, $2A, $58
ROM:A500 1E C8 6A D8+		     .BYTE $9C,	$68, $3A, $78, $50, $88, $4A, $98, $AC,	$A8, $5A, $B8
ROM:A500 3C E8 7A F8+		     .BYTE $5E,	$C8, $6A, $D8, $BC, $E8, $7A, $F8, $60,	8, $8A,	$18, $CC
ROM:A500 20 08 8A 18+		     .BYTE $28,	$9A, $38, $6E, $48, $AA, $58, $DC, $68,	$BA, $78, $70
ROM:A500 4C 28 9A 38+		     .BYTE $88,	$CA, $98, $EC, $A8, $DA, $B8, $7E, $C8,	$EA, $D8, $FC
ROM:A500 2E 48 AA 58+		     .BYTE $E8,	$FA, $F8
ROM:A580 A9 A9 A9 A9+a580_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A580 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A580 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A580 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A580 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC
ROM:A600 00 0A 0C 1A+a600_lsbs_tbl:  .BYTE 0, $A, $C, $1A, $E, $2A, $1C, $3A, $10, $4A,	$2C, $5A, $1E
ROM:A600 0E 2A 1C 3A+		     .BYTE $6A,	$3C, $7A, $20, $8A, $4C, $9A, $2E, $AA,	$5C, $BA, $30
ROM:A600 10 4A 2C 5A+		     .BYTE $CA,	$6C, $DA, $3E, $EA, $7C, $FA, $40, $A, $8C, $1A, $4E
ROM:A600 1E 6A 3C 7A+		     .BYTE $2A,	$9C, $3A, $50, $4A, $AC, $5A, $5E, $6A,	$BC, $7A, $60
ROM:A600 20 8A 4C 9A+		     .BYTE $8A,	$CC, $9A, $6E, $AA, $DC, $BA, $70, $CA,	$EC, $DA, $7E
ROM:A600 2E AA 5C BA+		     .BYTE $EA,	$FC, $FA, $80, $A, $C, $1A, $8E, $2A, $1C, $3A,	$90, $4A
ROM:A600 30 CA 6C DA+		     .BYTE $2C,	$5A, $9E, $6A, $3C, $7A, $A0, $8A, $4C,	$9A, $AE, $AA
ROM:A600 3E EA 7C FA+		     .BYTE $5C,	$BA, $B0, $CA, $6C, $DA, $BE, $EA, $7C,	$FA, $C0, $A
ROM:A600 40 0A 8C 1A+		     .BYTE $8C,	$1A, $CE, $2A, $9C, $3A, $D0, $4A, $AC,	$5A, $DE, $6A
ROM:A600 4E 2A 9C 3A+		     .BYTE $BC,	$7A, $E0, $8A, $CC, $9A, $EE, $AA, $DC,	$BA, $F0, $CA
ROM:A600 50 4A AC 5A+		     .BYTE $EC,	$DA, $FE, $EA, $FC, $FA
ROM:A680 A9 A9 A9 A9+a680_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A680 A9 A9 A9 A9+		     .BYTE $A9,	$AB, $AA, $AB, $A9, $AB, $AA, $AB, $A9,	$AB, $AA, $AB
ROM:A680 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A680 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC, $A9,	$AC, $AA, $AC
ROM:A680 A9 AA A9 AA+		     .BYTE $A9,	$AC, $AA, $AC, $A9, $AC, $AA, $AC
ROM:A700 00 0C 0E 1C+a700_lsbs_tbl:  .BYTE 0, $C, $E, $1C, $10,	$2C, $1E, $3C, $20, $4C, $2E, $5C, $30
ROM:A700 10 2C 1E 3C+		     .BYTE $6C,	$3E, $7C, $40, $8C, $4E, $9C, $50, $AC,	$5E, $BC, $60
ROM:A700 20 4C 2E 5C+		     .BYTE $CC,	$6E, $DC, $70, $EC, $7E, $FC, $80, $C, $8E, $1C, $90
ROM:A700 30 6C 3E 7C+		     .BYTE $2C,	$9E, $3C, $A0, $4C, $AE, $5C, $B0, $6C,	$BE, $7C, $C0
ROM:A700 40 8C 4E 9C+		     .BYTE $8C,	$CE, $9C, $D0, $AC, $DE, $BC, $E0, $CC,	$EE, $DC, $F0
ROM:A700 50 AC 5E BC+		     .BYTE $EC,	$FE, $FC, 0, $C, $E, $1C, $10, $2C, $1E, $3C, $20, $4C
ROM:A700 60 CC 6E DC+		     .BYTE $2E,	$5C, $30, $6C, $3E, $7C, $40, $8C, $4E,	$9C, $50, $AC
ROM:A700 70 EC 7E FC+		     .BYTE $5E,	$BC, $60, $CC, $6E, $DC, $70, $EC, $7E,	$FC, $80, $C
ROM:A700 80 0C 8E 1C+		     .BYTE $8E,	$1C, $90, $2C, $9E, $3C, $A0, $4C, $AE,	$5C, $B0, $6C
ROM:A700 90 2C 9E 3C+		     .BYTE $BE,	$7C, $C0, $8C, $CE, $9C, $D0, $AC, $DE,	$BC, $E0, $CC
ROM:A700 A0 4C AE 5C+		     .BYTE $EE,	$DC, $F0, $EC, $FE, $FC
ROM:A780 A9 A9 A9 A9+a780_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A780 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A780 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$AA, $A9, $AA
ROM:A780 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A780 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $A9, $AA, $A9, $AA, $A9,	$AA, $A9, $AA
ROM:A780 A9 A9 A9 A9+		     .BYTE $A9,	$AA, $A9, $AA, $AA, $AB, $AA, $AB, $AA,	$AB, $AA, $AB
ROM:A780 A9 A9 A9 A9+		     .BYTE $AA,	$AB, $AA, $AB, $AA, $AB, $AA, $AB, $AA,	$AB, $AA, $AB
ROM:A780 A9 A9 A9 A9+		     .BYTE $AA,	$AB, $AA, $AB, $AA, $AB, $AA, $AB, $AA,	$AB, $AA, $AB
ROM:A780 A9 AA A9 AA+		     .BYTE $AA,	$AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA,	$AC, $AA, $AC
ROM:A780 A9 AA A9 AA+		     .BYTE $AA,	$AC, $AA, $AC, $AA, $AC, $AA, $AC, $AA,	$AC, $AA, $AC
ROM:A780 A9 AA A9 AA+		     .BYTE $AA,	$AC, $AA, $AC, $AA, $AC, $AA, $AC
ROM:A800 00 0E 10 1E+a800_lsbs_tbl:  .BYTE 0, $E, $10, $1E, $20, $2E, $30, $3E,	$40, $4E, $50, $5E, $60
ROM:A800 20 2E 30 3E+		     .BYTE $6E,	$70, $7E, $80, $8E, $90, $9E, $A0, $AE,	$B0, $BE, $C0
ROM:A800 40 4E 50 5E+		     .BYTE $CE,	$D0, $DE, $E0, $EE, $F0, $FE, 0, $E, $10, $1E, $20, $2E
ROM:A800 60 6E 70 7E+		     .BYTE $30,	$3E, $40, $4E, $50, $5E, $60, $6E, $70,	$7E, $80, $8E
ROM:A800 80 8E 90 9E+		     .BYTE $90,	$9E, $A0, $AE, $B0, $BE, $C0, $CE, $D0,	$DE, $E0, $EE
ROM:A800 A0 AE B0 BE+		     .BYTE $F0,	$FE, 0,	$E, $10, $1E, $20, $2E,	$30, $3E, $40, $4E, $50
ROM:A800 C0 CE D0 DE+		     .BYTE $5E,	$60, $6E, $70, $7E, $80, $8E, $90, $9E,	$A0, $AE, $B0
ROM:A800 E0 EE F0 FE+		     .BYTE $BE,	$C0, $CE, $D0, $DE, $E0, $EE, $F0, $FE,	0, $E, $10, $1E
ROM:A800 00 0E 10 1E+		     .BYTE $20,	$2E, $30, $3E, $40, $4E, $50, $5E, $60,	$6E, $70, $7E
ROM:A800 20 2E 30 3E+		     .BYTE $80,	$8E, $90, $9E, $A0, $AE, $B0, $BE, $C0,	$CE, $D0, $DE
ROM:A800 40 4E 50 5E+		     .BYTE $E0,	$EE, $F0, $FE
ROM:A880 A9 A9 A9 A9+a880_msbs_tbl:  .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A880 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $A9,	$A9, $A9, $A9
ROM:A880 A9 A9 A9 A9+		     .BYTE $A9,	$A9, $A9, $A9, $A9, $A9, $A9, $A9, $AA,	$AA, $AA, $AA
ROM:A880 A9 A9 A9 A9+		     .BYTE $AA,	$AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA,	$AA, $AA, $AA
ROM:A880 A9 A9 A9 A9+		     .BYTE $AA,	$AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA,	$AA, $AA, $AA
ROM:A880 A9 A9 A9 A9+		     .BYTE $AA,	$AA, $AA, $AA, $AB, $AB, $AB, $AB, $AB,	$AB, $AB, $AB
ROM:A880 A9 A9 A9 A9+		     .BYTE $AB,	$AB, $AB, $AB, $AB, $AB, $AB, $AB, $AB,	$AB, $AB, $AB
ROM:A880 A9 A9 A9 A9+		     .BYTE $AB,	$AB, $AB, $AB, $AB, $AB, $AB, $AB, $AB,	$AB, $AB, $AB
ROM:A880 AA AA AA AA+		     .BYTE $AC,	$AC, $AC, $AC, $AC, $AC, $AC, $AC, $AC,	$AC, $AC, $AC
ROM:A880 AA AA AA AA+		     .BYTE $AC,	$AC, $AC, $AC, $AC, $AC, $AC, $AC, $AC,	$AC, $AC, $AC
ROM:A880 AA AA AA AA+		     .BYTE $AC,	$AC, $AC, $AC, $AC, $AC, $AC, $AC
ROM:A900 80 80 81 80+char_gfx_data:  .BYTE $80,	$80, $81, $80, $82, $80, $84, $80, $88,	$80, $90, $80
ROM:A900 82 80 84 80+		     .BYTE $A0,	$80, $C0, $80, $80, $81, $83, $80, $86,	$80, $8C, $80
ROM:A900 88 80 90 80+		     .BYTE $98,	$80, $B0, $80, $E0, $80, $C0, $81, $80,	$82, $85, $80
ROM:A900 A0 80 C0 80+		     .BYTE $8A,	$80, $94, $80, $A8, $80, $D0, $80, $A0,	$81, $C0, $82
ROM:A900 80 81 83 80+		     .BYTE $80,	$83, $87, $80, $8E, $80, $9C, $80, $B8,	$80, $F0, $80
ROM:A900 86 80 8C 80+		     .BYTE $E0,	$81, $C0, $83, $80, $84, $89, $80, $92,	$80, $A4, $80
ROM:A900 98 80 B0 80+		     .BYTE $C8,	$80, $90, $81, $A0, $82, $C0, $84, $80,	$85, $8B, $80
ROM:A900 E0 80 C0 81+		     .BYTE $96,	$80, $AC, $80, $D8, $80, $B0, $81, $E0,	$82, $C0, $85
ROM:A900 80 82 85 80+		     .BYTE $80,	$86, $8D, $80, $9A, $80, $B4, $80, $E8,	$80, $D0, $81
ROM:A900 8A 80 94 80+		     .BYTE $A0,	$83, $C0, $86, $80, $87, $8F, $80, $9E,	$80, $BC, $80
ROM:A900 A8 80 D0 80+		     .BYTE $F8,	$80, $F0, $81, $E0, $83, $C0, $87, $80,	$88, $91, $80
ROM:A900 A0 81 C0 82+		     .BYTE $A2,	$80, $C4, $80, $88, $81, $90, $82, $A0,	$84, $C0, $88
ROM:A900 80 83 87 80+		     .BYTE $80,	$89, $93, $80, $A6, $80, $CC, $80, $98,	$81, $B0, $82
ROM:A900 8E 80 9C 80+		     .BYTE $E0,	$84, $C0, $89, $80, $8A, $95, $80, $AA,	$80, $D4, $80
ROM:A900 B8 80 F0 80+		     .BYTE $A8,	$81, $D0, $82, $A0, $85, $C0, $8A, $80,	$8B, $97, $80
ROM:A900 E0 81 C0 83+		     .BYTE $AE,	$80, $DC, $80, $B8, $81, $F0, $82, $E0,	$85, $C0, $8B
ROM:A900 80 84 89 80+		     .BYTE $80,	$8C, $99, $80, $B2, $80, $E4, $80, $C8,	$81, $90, $83
ROM:A900 92 80 A4 80+		     .BYTE $A0,	$86, $C0, $8C, $80, $8D, $9B, $80, $B6,	$80, $EC, $80
ROM:A900 C8 80 90 81+		     .BYTE $D8,	$81, $B0, $83, $E0, $86, $C0, $8D, $80,	$8E, $9D, $80
ROM:A900 A0 82 C0 84+		     .BYTE $BA,	$80, $F4, $80, $E8, $81, $D0, $83, $A0,	$87, $C0, $8E
ROM:A900 80 85 8B 80+		     .BYTE $80,	$8F, $9F, $80, $BE, $80, $FC, $80, $F8,	$81, $F0, $83
ROM:A900 96 80 AC 80+		     .BYTE $E0,	$87, $C0, $8F, $80, $90, $A1, $80, $C2,	$80, $84, $81
ROM:A900 D8 80 B0 81+		     .BYTE $88,	$82, $90, $84, $A0, $88, $C0, $90, $80,	$91, $A3, $80
ROM:A900 E0 82 C0 85+		     .BYTE $C6,	$80, $8C, $81, $98, $82, $B0, $84, $E0,	$88, $C0, $91
ROM:A900 80 86 8D 80+		     .BYTE $80,	$92, $A5, $80, $CA, $80, $94, $81, $A8,	$82, $D0, $84
ROM:A900 9A 80 B4 80+		     .BYTE $A0,	$89, $C0, $92, $80, $93, $A7, $80, $CE,	$80, $9C, $81
ROM:A900 E8 80 D0 81+		     .BYTE $B8,	$82, $F0, $84, $E0, $89, $C0, $93, $80,	$94, $A9, $80
ROM:A900 A0 83 C0 86+		     .BYTE $D2,	$80, $A4, $81, $C8, $82, $90, $85, $A0,	$8A, $C0, $94
ROM:A900 80 87 8F 80+		     .BYTE $80,	$95, $AB, $80, $D6, $80, $AC, $81, $D8,	$82, $B0, $85
ROM:A900 9E 80 BC 80+		     .BYTE $E0,	$8A, $C0, $95, $80, $96, $AD, $80, $DA,	$80, $B4, $81
ROM:A900 F8 80 F0 81+		     .BYTE $E8,	$82, $D0, $85, $A0, $8B, $C0, $96, $80,	$97, $AF, $80
ROM:A900 E0 83 C0 87+		     .BYTE $DE,	$80, $BC, $81, $F8, $82, $F0, $85, $E0,	$8B, $C0, $97
ROM:A900 80 88 91 80+		     .BYTE $80,	$98, $B1, $80, $E2, $80, $C4, $81, $88,	$83, $90, $86
ROM:A900 A2 80 C4 80+		     .BYTE $A0,	$8C, $C0, $98, $80, $99, $B3, $80, $E6,	$80, $CC, $81
ROM:A900 88 81 90 82+		     .BYTE $98,	$83, $B0, $86, $E0, $8C, $C0, $99, $80,	$9A, $B5, $80
ROM:A900 A0 84 C0 88+		     .BYTE $EA,	$80, $D4, $81, $A8, $83, $D0, $86, $A0,	$8D, $C0, $9A
ROM:A900 80 89 93 80+		     .BYTE $80,	$9B, $B7, $80, $EE, $80, $DC, $81, $B8,	$83, $F0, $86
ROM:A900 A6 80 CC 80+		     .BYTE $E0,	$8D, $C0, $9B, $80, $9C, $B9, $80, $F2,	$80, $E4, $81
ROM:A900 98 81 B0 82+		     .BYTE $C8,	$83, $90, $87, $A0, $8E, $C0, $9C, $80,	$9D, $BB, $80
ROM:A900 E0 84 C0 89+		     .BYTE $F6,	$80, $EC, $81, $D8, $83, $B0, $87, $E0,	$8E, $C0, $9D
ROM:A900 80 8A 95 80+		     .BYTE $80,	$9E, $BD, $80, $FA, $80, $F4, $81, $E8,	$83, $D0, $87
ROM:A900 AA 80 D4 80+		     .BYTE $A0,	$8F, $C0, $9E, $80, $9F, $BF, $80, $FE,	$80, $FC, $81
ROM:A900 A8 81 D0 82+		     .BYTE $F8,	$83, $F0, $87, $E0, $8F, $C0, $9F, $80,	$A0, $C1, $80
ROM:A900 A0 85 C0 8A+		     .BYTE $82,	$81, $84, $82, $88, $84, $90, $88, $A0,	$90, $C0, $A0
ROM:A900 80 8B 97 80+		     .BYTE $80,	$A1, $C3, $80, $86, $81, $8C, $82, $98,	$84, $B0, $88
ROM:A900 AE 80 DC 80+		     .BYTE $E0,	$90, $C0, $A1, $80, $A2, $C5, $80, $8A,	$81, $94, $82
ROM:A900 B8 81 F0 82+		     .BYTE $A8,	$84, $D0, $88, $A0, $91, $C0, $A2, $80,	$A3, $C7, $80
ROM:A900 E0 85 C0 8B+		     .BYTE $8E,	$81, $9C, $82, $B8, $84, $F0, $88, $E0,	$91, $C0, $A3
ROM:A900 80 8C 99 80+		     .BYTE $80,	$A4, $C9, $80, $92, $81, $A4, $82, $C8,	$84, $90, $89
ROM:A900 B2 80 E4 80+		     .BYTE $A0,	$92, $C0, $A4, $80, $A5, $CB, $80, $96,	$81, $AC, $82
ROM:A900 C8 81 90 83+		     .BYTE $D8,	$84, $B0, $89, $E0, $92, $C0, $A5, $80,	$A6, $CD, $80
ROM:A900 A0 86 C0 8C+		     .BYTE $9A,	$81, $B4, $82, $E8, $84, $D0, $89, $A0,	$93, $C0, $A6
ROM:A900 80 8D 9B 80+		     .BYTE $80,	$A7, $CF, $80, $9E, $81, $BC, $82, $F8,	$84, $F0, $89
ROM:A900 B6 80 EC 80+		     .BYTE $E0,	$93, $C0, $A7, $80, $A8, $D1, $80, $A2,	$81, $C4, $82
ROM:A900 D8 81 B0 83+		     .BYTE $88,	$85, $90, $8A, $A0, $94, $C0, $A8, $80,	$A9, $D3, $80
ROM:A900 E0 86 C0 8D+		     .BYTE $A6,	$81, $CC, $82, $98, $85, $B0, $8A, $E0,	$94, $C0, $A9
ROM:A900 80 8E 9D 80+		     .BYTE $80,	$AA, $D5, $80, $AA, $81, $D4, $82, $A8,	$85, $D0, $8A
ROM:A900 BA 80 F4 80+		     .BYTE $A0,	$95, $C0, $AA, $80, $AB, $D7, $80, $AE,	$81, $DC, $82
ROM:A900 E8 81 D0 83+		     .BYTE $B8,	$85, $F0, $8A, $E0, $95, $C0, $AB, $80,	$AC, $D9, $80
ROM:A900 A0 87 C0 8E+		     .BYTE $B2,	$81, $E4, $82, $C8, $85, $90, $8B, $A0,	$96, $C0, $AC
ROM:A900 80 8F 9F 80+		     .BYTE $80,	$AD, $DB, $80, $B6, $81, $EC, $82, $D8,	$85, $B0, $8B
ROM:A900 BE 80 FC 80+		     .BYTE $E0,	$96, $C0, $AD, $80, $AE, $DD, $80, $BA,	$81, $F4, $82
ROM:A900 F8 81 F0 83+		     .BYTE $E8,	$85, $D0, $8B, $A0, $97, $C0, $AE, $80,	$AF, $DF, $80
ROM:A900 E0 87 C0 8F+		     .BYTE $BE,	$81, $FC, $82, $F8, $85, $F0, $8B, $E0,	$97, $C0, $AF
ROM:A900 80 90 A1 80+		     .BYTE $80,	$B0, $E1, $80, $C2, $81, $84, $83, $88,	$86, $90, $8C
ROM:A900 C2 80 84 81+		     .BYTE $A0,	$98, $C0, $B0, $80, $B1, $E3, $80, $C6,	$81, $8C, $83
ROM:A900 88 82 90 84+		     .BYTE $98,	$86, $B0, $8C, $E0, $98, $C0, $B1, $80,	$B2, $E5, $80
ROM:A900 A0 88 C0 90+		     .BYTE $CA,	$81, $94, $83, $A8, $86, $D0, $8C, $A0,	$99, $C0, $B2
ROM:A900 80 91 A3 80+		     .BYTE $80,	$B3, $E7, $80, $CE, $81, $9C, $83, $B8,	$86, $F0, $8C
ROM:A900 C6 80 8C 81+		     .BYTE $E0,	$99, $C0, $B3, $80, $B4, $E9, $80, $D2,	$81, $A4, $83
ROM:A900 98 82 B0 84+		     .BYTE $C8,	$86, $90, $8D, $A0, $9A, $C0, $B4, $80,	$B5, $EB, $80
ROM:A900 E0 88 C0 91+		     .BYTE $D6,	$81, $AC, $83, $D8, $86, $B0, $8D, $E0,	$9A, $C0, $B5
ROM:A900 80 92 A5 80+		     .BYTE $80,	$B6, $ED, $80, $DA, $81, $B4, $83, $E8,	$86, $D0, $8D
ROM:A900 CA 80 94 81+		     .BYTE $A0,	$9B, $C0, $B6, $80, $B7, $EF, $80, $DE,	$81, $BC, $83
ROM:A900 A8 82 D0 84+		     .BYTE $F8,	$86, $F0, $8D, $E0, $9B, $C0, $B7, $80,	$B8, $F1, $80
ROM:A900 A0 89 C0 92+		     .BYTE $E2,	$81, $C4, $83, $88, $87, $90, $8E, $A0,	$9C, $C0, $B8
ROM:A900 80 93 A7 80+		     .BYTE $80,	$B9, $F3, $80, $E6, $81, $CC, $83, $98,	$87, $B0, $8E
ROM:A900 CE 80 9C 81+		     .BYTE $E0,	$9C, $C0, $B9, $80, $BA, $F5, $80, $EA,	$81, $D4, $83
ROM:A900 B8 82 F0 84+		     .BYTE $A8,	$87, $D0, $8E, $A0, $9D, $C0, $BA, $80,	$BB, $F7, $80
ROM:A900 E0 89 C0 93+		     .BYTE $EE,	$81, $DC, $83, $B8, $87, $F0, $8E, $E0,	$9D, $C0, $BB
ROM:A900 80 94 A9 80+		     .BYTE $80,	$BC, $F9, $80, $F2, $81, $E4, $83, $C8,	$87, $90, $8F
ROM:A900 D2 80 A4 81+		     .BYTE $A0,	$9E, $C0, $BC, $80, $BD, $FB, $80, $F6,	$81, $EC, $83
ROM:A900 C8 82 90 85+		     .BYTE $D8,	$87, $B0, $8F, $E0, $9E, $C0, $BD, $80,	$BE, $FD, $80
ROM:A900 A0 8A C0 94+		     .BYTE $FA,	$81, $F4, $83, $E8, $87, $D0, $8F, $A0,	$9F, $C0, $BE
ROM:A900 80 95 AB 80+		     .BYTE $80,	$BF, $FF, $80, $FE, $81, $FC, $83, $F8,	$87, $F0, $8F
ROM:A900 D6 80 AC 81+		     .BYTE $E0,	$9F, $C0, $BF
ROM:AD00 00 15 55 06+tbl1:	     .BYTE 0, $15, $55,	6, 0, $55, 6, 0, $10, $40, $7F,	8, 8, 8, $30
ROM:AD00 00 55 06 00+		     .BYTE $40,	$40, $40, $30, $26, $13, 6, $60, $18, 6, $18, $60, 0
ROM:AD00 10 40 7F 08+		     .BYTE 0, $10, 0, $25, $20,	0, 0, 0, 0, $10, 0, 0, $40, $40, $40
ROM:AD00 08 08 30 40+		     .BYTE $10,	$10, 2,	$20, 8,	2, 8, $20, $20,	$20, $22, $22, 0, 0, 0
ROM:AD00 40 40 30 26+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AD00 13 06 60 18+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AD00 06 18 60 00+		     .BYTE 0, 0, 0, 0, 2, 3
ROM:AD68 00 02 02 03+tbl2:	     .BYTE 0, 2, 2, 3, 0, 2, 0,	0, 0, 0, 7, 0, 0, 0, 0,	0, 0, 0, 0, 6
ROM:AD68 00 02 00 00+		     .BYTE 3, 3, 0, 0, 3, 0, 0,	0, 0, 0, 0, 2, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AD68 00 00 07 00+		     .BYTE 0, 0, 0, 0, 0, 1, 0,	0, 1, 0, 0, 0, 0, 4, 4,	0, 0, 0, 0, 0
ROM:AD68 00 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AD68 00 00 00 06+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AD68 03 03 00 00+		     .BYTE 0, 0, 6, 0
ROM:ADD0 00 15 55 06+tbl3:	     .BYTE 0, $15, $55,	6, $7F,	$55, 6,	0, $28,	$60, $7F, $1C, $1C, $1C
ROM:ADD0 7F 55 06 00+		     .BYTE $30,	$60, $60, $60, $31, $76, $3B, 6, $60, $18, 6, $18, $60
ROM:ADD0 28 60 7F 1C+		     .BYTE 0, 0, 0, 0, $15, $28, $20, 0, 0, 0, $38, 0, 0, $20, $20, $20
ROM:ADD0 1C 1C 30 60+		     .BYTE $28,	$28, 2,	$20, 8,	2, 8, $20, $20,	$21, $22, $22, 0, 0, 0
ROM:ADD0 60 60 31 76+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:ADD0 3B 06 60 18+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:ADD0 06 18 60 00+		     .BYTE 0, 0, 0, 0, 7, 0
ROM:AE38 00 02 02 03+tbl4:	     .BYTE 0, 2, 2, 3, 7, 2, 0,	0, 0, 1, 7, 0, 0, 0, 4,	1, 1, 1, 0, 6
ROM:AE38 07 02 00 00+		     .BYTE 3, 3, 0, 0, 3, 0, 0,	0, 0, 0, 0, 2, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AE38 00 01 07 00+		     .BYTE 1, 1, 1, 0, 0, 1, 0,	0, 1, 0, 0, 4, 0, 4, 4,	0, 0, 0, 0, 0
ROM:AE38 00 00 04 01+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AE38 01 01 00 06+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AE38 03 03 00 00+		     .BYTE 0, 0, $70, $60
ROM:AEA0 00 15 55 7E+tbl5:	     .BYTE 0, $15, $55,	$7E, 0,	0, $7E,	0, $28,	$60, $7F, $1C, $1C, $1C
ROM:AEA0 00 00 7E 00+		     .BYTE $70,	$60, $60, $60, $3F, $76, $3B, $36, $78,	$78, $36, $78
ROM:AEA0 28 60 7F 1C+		     .BYTE $78,	0, 0, 0, 0, $15, 1, $28, 0, 0, 0, $38, 0, 0, $20, $20
ROM:AEA0 1C 1C 70 60+		     .BYTE $20,	$28, $28, $22, $28, $28, $A, $28, $28, $20, $2B, $22
ROM:AEA0 60 60 3F 76+		     .BYTE $22,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0
ROM:AEA0 3B 36 78 78+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AEA0 36 78 78 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 6
ROM:AF08 00 02 02 03+tbl6:	     .BYTE 0, 2, 2, 3, 0, 0, 3,	0, 0, 1, 7, 0, 0, 0, 7,	1, 1, 1, 0, 6
ROM:AF08 00 00 03 00+		     .BYTE 3, 3, 0, 0, 3, 0, 0,	0, 0, 0, 0, 2, 2, 0, 0,	0, 0, 0, 0, 0
ROM:AF08 00 01 07 00+		     .BYTE 1, 1, 1, 0, 0, 1, 0,	0, 1, 0, 0, 5, 0, 4, 4,	0, 0, 0, 0, 0
ROM:AF08 00 00 07 01+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AF08 01 01 00 06+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AF08 03 03 00 00+		     .BYTE 0, 0, $38, $70
ROM:AF70 00 15 55 06+tbl7:	     .BYTE 0, $15, $55,	6, 0, $7C, 6, 0, $20, $70, $7F,	$38, $18, $18
ROM:AF70 00 7C 06 00+		     .BYTE $72,	$40, $60, $60, $38, $7C, $7E, $76, $38,	$70, $3C, $70
ROM:AF70 20 70 7F 38+		     .BYTE $3B,	0, $10,	0, $10,	$15, $15, $29, $20, 0, 0, $18, 0, $10
ROM:AF70 18 18 72 40+		     .BYTE $20,	$20, $20, $20, $20, $22, $28, $20, $A, $28, 8, $22, $28
ROM:AF70 60 60 38 7C+		     .BYTE $28,	$28, 0,	0, 0, 0, $2A, $28, $2A,	$2A, $A, $2A, $2A, $2A
ROM:AF70 7E 76 38 70+		     .BYTE $28,	$2A, $54, $15, $55, $15, $55, $55, $55,	$41, 4,	$10, $41
ROM:AF70 3C 70 3B 00+		     .BYTE 1, $41, $41,	$55, $55, $55, $55, $55, $55, $41, $45,	$41, $41
ROM:AF70 10 00 10 15+		     .BYTE $51,	$55, 1,	0, $14,	$14, $40, 0, $40, 0, 0
ROM:AFD8 00 02 02 03+tbl8:	     .BYTE 0, 2, 2, 3, 0, 1, 3,	0, 0, 0, 7, 0, 0, 0, 0,	1, 0, 0, 2, 3
ROM:AFD8 00 01 03 00+		     .BYTE 1, 1, 0, 6, 3, 0, 0,	0, 0, 0, 0, 2, 2, 2, 0,	0, 0, 0, 0, 0
ROM:AFD8 00 00 07 00+		     .BYTE 0, 0, 0, 0, 0, 1, 0,	4, 1, 0, 0, 0, 2, 1, 1,	0, 0, 0, 0, 1
ROM:AFD8 00 00 00 01+		     .BYTE 0, 1, 1, 1, 1, 1, 1,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AFD8 00 00 02 03+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:AFD8 01 01 00 06+		     .BYTE 0, 0, 0, 0
ROM:B040 00 00 55 06+tbl9:	     .BYTE 0, 0, $55, 6, 0, $30, 0, 0, $28, $6C, $7F, $5C, $38,	$7A, $7E
ROM:B040 00 30 00 00+		     .BYTE $70,	$70, $78, $78, $60, $18, $3C, $1E, $60,	$70, $60, $1E
ROM:B040 28 6C 7F 5C+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	$28, 0,	0, $7E,	0, 0, $28, $28,	$28, $20
ROM:B040 38 7A 7E 70+		     .BYTE $28,	$28, $A, $20, $28, $20,	$A, $2A, $28, $20, $20,	0, 0
ROM:B040 70 78 78 60+		     .BYTE 0, 0, 2, $28, 2, 2, $A, 2, 2, $20, 8, 2, $44, $11, $41, $41
ROM:B040 18 3C 1E 60+		     .BYTE 5, 5, $41, $41, 4, $10, $51,	1, $45,	$41, $51, $41, $51, $41
ROM:B040 70 60 1E 00+		     .BYTE $41,	4, $41,	$45, $41, $41, $51, $41, 5, 0, $14, $14, $40
ROM:B040 00 00 00 00+		     .BYTE 0, $50, 0, 0
ROM:B0A8 00 00 02 03+tbl10:	     .BYTE 0, 0, 2, 3, 0, 0, 3,	0, 1, 1, 7, 1, 0, 0, 0,	7, 0, 2, 3, 0
ROM:B0A8 00 00 03 00+		     .BYTE 0, 0, 0, 3, 1, 3, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B0A8 01 01 07 01+		     .BYTE 1, 0, 1, 1, 1, 0, 0,	1, 0, 1, 0, 0, 3, 0, 0,	0, 0, 0, 0, 1
ROM:B0A8 00 00 00 07+		     .BYTE 0, 1, 1, 1, 0, 1, 1,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B0A8 00 02 03 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B0A8 00 00 00 03+		     .BYTE 0, 0, 0, 0
ROM:B110 00 51 55 06+tbl11:	     .BYTE 0, $51, $55,	6, 0, $30, 0, $78, $22,	$36, $7F, $33, $7C, $5E
ROM:B110 00 30 00 78+		     .BYTE $70,	$5A, $78, $6C, $38, $60, $18, $18, $1B,	$60, $60, $60
ROM:B110 22 36 7F 33+		     .BYTE $18,	0, 0, $11, 1, $51, $51,	$51, $28, $20, 0, $5A, 0, 0, $22
ROM:B110 7C 5E 70 5A+		     .BYTE $28,	$22, $28, $28, 8, $A, $20, $20,	$20, 8,	$20, $28, $20
ROM:B110 78 6C 38 60+		     .BYTE $20,	0, 0, 0, 0, 2, $20, 0, 0, $A, 2, 2, $20, 8, 2, $44, $11
ROM:B110 18 18 1B 60+		     .BYTE 1, $41, 5, 5, 1, $41, 4, $10, $11, 1, $55, $45, $51,	$41, $51
ROM:B110 60 60 18 00+		     .BYTE $41,	1, 4, $41, $45,	$41, $41, $51, $41, $14, 0, 5, $50, $10
ROM:B110 00 11 01 51+		     .BYTE $55,	$14, 1,	1
ROM:B178 00 02 02 03+tbl12:	     .BYTE 0, 2, 2, 3, 0, 0, 3,	1, 4, 6, 7, 3, 0, 1, 0,	5, 1, 3, 0, 0
ROM:B178 00 00 03 01+		     .BYTE 0, 0, 0, 0, 0, 6, 0,	0, 2, 0, 0, 2, 2, 2, 1,	0, 0, 5, 0, 2
ROM:B178 04 06 07 03+		     .BYTE 4, 1, 1, 1, 4, 0, 0,	0, 0, 1, 0, 0, 0, 0, 0,	0, 0, 0, 0, 1
ROM:B178 00 01 00 05+		     .BYTE 0, 1, 1, 1, 0, 0, 1,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B178 01 03 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B178 00 00 00 00+		     .BYTE 2, 0, 8, $20
ROM:B1E0 00 51 55 06+tbl13:	     .BYTE 0, $51, $55,	6, 0, $30, 0, $28, $60,	$30, $7F, $30, $7B, $18
ROM:B1E0 00 30 00 28+		     .BYTE $70,	$42, $78, $60, $38, $78, $78, $18, $18,	$60, $60, $60
ROM:B1E0 60 30 7F 30+		     .BYTE $18,	$10, 1,	0, 0, $51, $51,	$51, 0,	$20, 0,	$18, $10, 5, $30
ROM:B1E0 7B 18 70 42+		     .BYTE $60,	$60, $32, $30, 8, 8, $20, $20, $20, 8, $70, $38, $70
ROM:B1E0 78 60 38 78+		     .BYTE $78,	0, 1, 0, 0, 2, $20, $2A, $28, $2A, $2A,	2, $20,	$2A, $2A
ROM:B1E0 78 18 18 60+		     .BYTE $55,	$55, 1,	$41, $15, $15, 1, $55, $14, $50, $15, 1, $55
ROM:B1E0 60 60 18 10+		     .BYTE $55,	$41, $55, $41, $55, $55, 4, $41, $45, $41, $14,	$55, $10
ROM:B1E0 01 00 00 51+		     .BYTE $50,	0, 5, $50, $10,	$55, 5,	0, 0
ROM:B248 00 02 02 03+tbl14:	     .BYTE 0, 2, 2, 3, 0, 0, 3,	1, 0, 0, 7, 0, 0, 0, 0,	1, 6, 0, 0, 0
ROM:B248 00 00 03 01+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 2, 0, 2, 2, 2, 0,	1, 0, 4, 0, 0
ROM:B248 00 00 07 00+		     .BYTE 0, 4, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1, 0,	0, 2, 0, 0, 1
ROM:B248 00 00 00 01+		     .BYTE 0, 1, 1, 1, 1, 0, 1,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B248 06 00 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B248 00 00 00 00+		     .BYTE 2, 0, $6C, 0
ROM:B2B0 00 51 55 7E+tbl15:	     .BYTE 0, $51, $55,	$7E, 0,	$30, 6,	$78, $70, $70, $7F, $38, $1C
ROM:B2B0 00 30 06 78+		     .BYTE $3C,	$58, $60, $60, $70, $6C, $6C, $58, $1E,	$1C, $70, $60
ROM:B2B0 70 70 7F 38+		     .BYTE $60,	$38, $40, 4, 1,	0, $51,	$51, $51, $51, $29, $20, $38
ROM:B2B0 1C 3C 58 60+		     .BYTE $44,	2, $70,	$60, $70, $38, $78, $1E, $1C, $70, $70,	$70, $1C
ROM:B2B0 60 70 6C 6C+		     .BYTE $58,	$6C, $30, $6C, 0, 1, 0,	0, $22,	$20, 2,	0, 0, $20, $2A
ROM:B2B0 58 1E 1C 70+		     .BYTE $28,	2, $20,	$41, $41, 5, $45, 1, 1,	$51, $45, $14, $50, $55
ROM:B2B0 60 60 38 40+		     .BYTE 5, $41, $55,	$41, 5,	$41, $15, $50, $14, $45, $45, $55, $14
ROM:B2B0 04 01 00 51+		     .BYTE $14,	$14, $50, 0, 5,	$50, 4,	$55, 5,	0, 1
ROM:B318 00 02 02 03+tbl16:	     .BYTE 0, 2, 2, 3, 0, 0, 3,	1, 0, 0, 7, 0, 0, 0, 1,	1, 1, 1, 0, 0
ROM:B318 00 00 03 01+		     .BYTE 1, 0, 0, 0, 3, 1, 0,	4, 0, 0, 2, 2, 2, 2, 2,	1, 0, 0, 0, 0
ROM:B318 00 00 07 00+		     .BYTE 0, 1, 1, 0, 0, 0, 0,	0, 1, 0, 0, 1, 0, 3, 0,	0, 2, 0, 0, 1
ROM:B318 00 00 01 01+		     .BYTE 0, 0, 1, 1, 1, 1, 0,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B318 01 01 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B318 01 00 00 00+		     .BYTE 2, 0, 0, 0
ROM:B380 00 51 55 06+tbl17:	     .BYTE 0, $51, $55,	6, 0, $55, $7E,	$28, $58, $5E, $7F, $6C, $3C
ROM:B380 00 55 7E 28+		     .BYTE $66,	$58, $30, $70, $18, $6E, $6C, $58, $13,	$36, $58, $20
ROM:B380 58 5E 7F 6C+		     .BYTE $30,	$6C, 4,	$50, 4,	0, $51,	$51, $51, $51, 1, $28, $6C, $12
ROM:B380 3C 66 58 30+		     .BYTE $52,	$5E, $70, $18, $78, $4C, $13, $36, $58,	$10, $58, $36
ROM:B380 70 18 6E 6C+		     .BYTE $58,	$6E, $30, $6C, 1, 1, 0,	$28, $22, $20, 2, 0, 0,	$20, $22
ROM:B380 58 13 36 58+		     .BYTE 8, 2, $20, $41, $41,	5, $45,	1, 1, $51, $45,	$14, $50, $45
ROM:B380 20 30 6C 04+		     .BYTE 5, $41, $51,	$41, 5,	$41, $15, $50, $14, $45, $55, $55, $41
ROM:B380 50 04 00 51+		     .BYTE $14,	1, $14,	$14, 5,	$50, 4,	$55, $14, 0, 1
ROM:B3E8 00 02 02 03+tbl18:	     .BYTE 0, 2, 2, 3, 0, 2, 3,	1, 7, 1, 7, 3, 0, 0, 3,	3, 1, 3, 0, 0
ROM:B3E8 00 02 03 01+		     .BYTE 1, 0, 0, 1, 6, 3, 0,	4, 4, 0, 0, 2, 2, 2, 2,	0, 0, 0, 0, 0
ROM:B3E8 07 01 07 03+		     .BYTE 1, 1, 3, 0, 1, 0, 0,	1, 3, 1, 0, 3, 0, 3, 0,	2, 2, 0, 0, 1
ROM:B3E8 00 00 03 03+		     .BYTE 0, 0, 1, 1, 1, 1, 0,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B3E8 01 03 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B3E8 01 00 00 01+		     .BYTE 2, 0, $41, $45
ROM:B450 00 51 55 06+tbl19:	     .BYTE 0, $51, $55,	6, 0, $55, 6, $78, $18,	$40, $7F, $C, $70, $46
ROM:B450 00 55 06 78+		     .BYTE $18,	$30, $38, $C, $60, $6C,	$58, $1B, $36, $58, $60, $30
ROM:B450 18 40 7F 0C+		     .BYTE $6C,	$10, 4,	$40, 0,	$51, $51, $51, $51, $51, $28, $6C, $A
ROM:B450 70 46 18 30+		     .BYTE 8, $40, $38,	$C, $60, $C, $1B, $36, $58, $30, $58, $36, $18
ROM:B450 38 0C 60 6C+		     .BYTE $60,	$30, $6C, 1, 1,	$28, $2A, $22, $28, $22, 2, 0, $20, $22
ROM:B450 58 1B 36 58+		     .BYTE 8, 2, $20, $51, $41,	$45, $45, 1, 1,	$41, $45, $14, $51, $45
ROM:B450 60 30 6C 10+		     .BYTE 5, $41, $41,	$41, 5,	$11, $45, $51, $14, $45, $14, $45, $41
ROM:B450 04 40 00 51+		     .BYTE $14,	$51, 5,	$14, $14, $14, 1, 0, $50, 0, 0
ROM:B4B8 00 02 02 03+tbl20:	     .BYTE 0, 2, 2, 3, 0, 2, 0,	1, 0, 1, 7, 0, 0, 1, 0,	3, 0, 3, 0, 0
ROM:B4B8 00 02 00 01+		     .BYTE 1, 0, 0, 1, 6, 3, 0,	1, 5, 0, 0, 2, 2, 2, 2,	2, 1, 0, 2, 1
ROM:B4B8 00 01 07 00+		     .BYTE 1, 0, 3, 1, 3, 0, 0,	1, 3, 1, 0, 0, 0, 3, 0,	2, 2, 0, 1, 1
ROM:B4B8 00 01 00 03+		     .BYTE 1, 1, 1, 1, 1, 1, 0,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B4B8 00 03 00 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B4B8 01 00 00 01+		     .BYTE 0, 0, $55, $45
ROM:B520 00 00 00 06+tbl21:	     .BYTE 0, 0, 0, 6, 0, 0, 6,	0, $18,	$40, $7F, $C, $30, $40,	$1C, $30
ROM:B520 00 00 06 00+		     .BYTE $30,	$C, $60, $60, $18, $D, $36, $58, $40, $30, $6C,	0, $10
ROM:B520 18 40 7F 0C+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, $6C,	8, 8, $40, $30,	$C, $60, 0, $D
ROM:B520 30 40 1C 30+		     .BYTE $30,	$58, $60, $58, $36, $1C, $60, $30, $60,	0, 0, $2A, $2A
ROM:B520 30 0C 60 60+		     .BYTE $2A,	$28, $2A, $2A, 0, $2A, $2A, 8, $2A, $20, $51, $55, $55
ROM:B520 18 0D 36 58+		     .BYTE $15,	$55, 1,	$55, $45, $14, $55, $45, $55, $41, $41,	$55, 5
ROM:B520 40 30 6C 00+		     .BYTE $45,	$45, $55, $14, $55, 4, $41, $41, $14, $55, 1, $14, $14
ROM:B520 10 00 00 00+		     .BYTE $14,	1, 0, $40, 0, 0
ROM:B588 00 00 00 03+tbl22:	     .BYTE 0, 0, 0, 3, 0, 0, 0,	0, 0, 1, 7, 0, 0, 1, 0,	3, 0, 0, 1, 0
ROM:B588 00 00 00 00+		     .BYTE 0, 0, 0, 1, 5, 3, 0,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 1
ROM:B588 00 01 07 00+		     .BYTE 1, 0, 0, 0, 3, 0, 0,	1, 2, 1, 0, 0, 1, 0, 0,	0, 0, 1, 1, 1
ROM:B588 00 01 00 03+		     .BYTE 1, 1, 1, 1, 1, 1, 0,	1, 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B588 00 00 01 00+		     .BYTE 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
ROM:B588 00 00 00 01+		     .BYTE 0, 0, $81, $A8
ROM:B5F0 C5			     .BYTE $C5 ; Å
ROM:B5F1 A2			     .BYTE $A2 ; ¢
ROM:B5F2 D4			     .BYTE $D4 ; Ô
ROM:B5F3 A2			     .BYTE $A2 ; ¢
ROM:B5F4 00			     .BYTE   0
ROM:B5F5 D0			     .BYTE $D0 ; Ð
ROM:B5F6 8A			     .BYTE $8A ; 
ROM:B5F7 94			     .BYTE $94 ; 
ROM:B5F8 80			     .BYTE $80 ; 
ROM:B5F9 80			     .BYTE $80 ; 
ROM:B5FA 80			     .BYTE $80 ; 
ROM:B5FB 80			     .BYTE $80 ; 
ROM:B5FC 80			     .BYTE $80 ; 
ROM:B5FD 80			     .BYTE $80 ; 
ROM:B5FE 80			     .BYTE $80 ; 
ROM:B5FF 80			     .BYTE $80 ; 
ROM:B600 01			     .BYTE   1
ROM:B601 A5			     .BYTE $A5 ; ¥
ROM:B602 27			     .BYTE $27 ; '
ROM:B603 C9			     .BYTE $C9 ; É
ROM:B604 09			     .BYTE   9
ROM:B605 D0			     .BYTE $D0 ; Ð
ROM:B606 18			     .BYTE $18
ROM:B607 A5			     .BYTE $A5 ; ¥
ROM:B608 2B			     .BYTE $2B ; +
ROM:B609 4A			     .BYTE $4A ; J
ROM:B60A 4A			     .BYTE $4A ; J
ROM:B60B 4A			     .BYTE $4A ; J
ROM:B60C 4A			     .BYTE $4A ; J
ROM:B60D 09			     .BYTE   9
ROM:B60E C0			     .BYTE $C0 ; À
ROM:B60F 85			     .BYTE $85 ; 
ROM:B610 3F			     .BYTE $3F ; ?
ROM:B611 A9			     .BYTE $A9 ; ©
ROM:B612 5C			     .BYTE $5C ; \
ROM:B613 85			     .BYTE $85 ; 
ROM:B614 3E			     .BYTE $3E ; >
ROM:B615 18			     .BYTE $18
ROM:B616 AD			     .BYTE $AD ; ­
ROM:B617 FE			     .BYTE $FE ; þ
ROM:B618 08			     .BYTE   8
ROM:B619 6D			     .BYTE $6D ; m
ROM:B61A FF			     .BYTE $FF
ROM:B61B 08			     .BYTE   8
ROM:B61C 8D			     .BYTE $8D ; 
ROM:B61D FE			     .BYTE $FE ; þ
ROM:B61E 08			     .BYTE   8
ROM:B61F AE			     .BYTE $AE ; ®
ROM:B620 FF			     .BYTE $FF
ROM:B621 08			     .BYTE   8
ROM:B622 30			     .BYTE $30 ; 0
ROM:B623 15			     .BYTE $15
ROM:B624 BD			     .BYTE $BD ; ½
ROM:B625 4D			     .BYTE $4D ; M
ROM:B626 08			     .BYTE   8
ROM:B627 85			     .BYTE $85 ; 
ROM:B628 3D			     .BYTE $3D ; =
ROM:B629 CE			     .BYTE $CE ; Î
ROM:B62A FF			     .BYTE $FF
ROM:B62B 08			     .BYTE   8
ROM:B62C AD			     .BYTE $AD ; ­
ROM:B62D FE			     .BYTE $FE ; þ
ROM:B62E 08			     .BYTE   8
ROM:B62F 85			     .BYTE $85 ; 
ROM:B630 27			     .BYTE $27 ; '
ROM:B631 CE			     .BYTE $CE ; Î
ROM:B632 FE			     .BYTE $FE ; þ
ROM:B633 08			     .BYTE   8
ROM:B634 A6			     .BYTE $A6 ; ¦
ROM:B635 2B			     .BYTE $2B ; +
ROM:B636 6C			     .BYTE $6C ; l
ROM:B637 3E			     .BYTE $3E ; >
ROM:B638 00			     .BYTE   0
ROM:B639 EE			     .BYTE $EE ; î
ROM:B63A FE			     .BYTE $FE ; þ
ROM:B63B 08			     .BYTE   8
ROM:B63C EE			     .BYTE $EE ; î
ROM:B63D FE			     .BYTE $FE ; þ
ROM:B63E 08			     .BYTE   8
ROM:B63F 20			     .BYTE $20
ROM:B640 89			     .BYTE $89 ; 
ROM:B641 FE			     .BYTE $FE ; þ
ROM:B642 20			     .BYTE $20
ROM:B643 93			     .BYTE $93 ; 
ROM:B644 FE			     .BYTE $FE ; þ
ROM:B645 20			     .BYTE $20
ROM:B646 2F			     .BYTE $2F ; /
ROM:B647 FB			     .BYTE $FB ; û
ROM:B648 A6			     .BYTE $A6 ; ¦
ROM:B649 2B			     .BYTE $2B ; +
ROM:B64A 6C			     .BYTE $6C ; l
ROM:B64B FD			     .BYTE $FD ; ý
ROM:B64C 08			     .BYTE   8
ROM:B64D 00			     .BYTE   0
ROM:B64E 0D			     .BYTE  $D
ROM:B64F 0B			     .BYTE  $B
ROM:B650 09			     .BYTE   9
ROM:B651 07			     .BYTE   7
ROM:B652 05			     .BYTE   5
ROM:B653 03			     .BYTE   3
ROM:B654 01			     .BYTE   1
ROM:B655 0E			     .BYTE  $E
ROM:B656 0C			     .BYTE  $C
ROM:B657 0A			     .BYTE  $A
ROM:B658 08			     .BYTE   8
ROM:B659 06			     .BYTE   6
ROM:B65A 04			     .BYTE   4
ROM:B65B 02			     .BYTE   2
ROM:B65C 0F			     .BYTE  $F
ROM:B65D 00			     .BYTE   0
ROM:B65E 20			     .BYTE $20
ROM:B65F 64			     .BYTE $64 ; d
ROM:B660 A7			     .BYTE $A7 ; §
ROM:B661 B0			     .BYTE $B0 ; °
ROM:B662 08			     .BYTE   8
ROM:B663 A9			     .BYTE $A9 ; ©
ROM:B664 00			     .BYTE   0
ROM:B665 A8			     .BYTE $A8 ; ¨
ROM:B666 8D			     .BYTE $8D ; 
ROM:B667 5D			     .BYTE $5D ; ]
ROM:B668 B6			     .BYTE $B6 ; ¶
ROM:B669 91			     .BYTE $91 ; 
ROM:B66A 40			     .BYTE $40 ; @
ROM:B66B AD			     .BYTE $AD ; ­
ROM:B66C C5			     .BYTE $C5 ; Å
ROM:B66D B5			     .BYTE $B5 ; µ
ROM:B66E 4C			     .BYTE $4C ; L
ROM:B66F D2			     .BYTE $D2 ; Ò
ROM:B670 A6			     .BYTE $A6 ; ¦
ROM:B671 AD			     .BYTE $AD ; ­
ROM:B672 5D			     .BYTE $5D ; ]
ROM:B673 B6			     .BYTE $B6 ; ¶
ROM:B674 F0			     .BYTE $F0 ; ð
ROM:B675 08			     .BYTE   8
ROM:B676 EE			     .BYTE $EE ; î
ROM:B677 BD			     .BYTE $BD ; ½
ROM:B678 B5			     .BYTE $B5 ; µ
ROM:B679 D0			     .BYTE $D0 ; Ð
ROM:B67A 03			     .BYTE   3
ROM:B67B EE			     .BYTE $EE ; î
ROM:B67C BE			     .BYTE $BE ; ¾
ROM:B67D B5			     .BYTE $B5 ; µ
ROM:B67E A9			     .BYTE $A9 ; ©
ROM:B67F 00			     .BYTE   0
ROM:B680 8D			     .BYTE $8D ; 
ROM:B681 5D			     .BYTE $5D ; ]
ROM:B682 B6			     .BYTE $B6 ; ¶
ROM:B683 4C			     .BYTE $4C ; L
ROM:B684 46			     .BYTE $46 ; F
ROM:B685 A5			     .BYTE $A5 ; ¥
ROM:B686 8D			     .BYTE $8D ; 
ROM:B687 BC			     .BYTE $BC ; ¼
ROM:B688 B5			     .BYTE $B5 ; µ
ROM:B689 20			     .BYTE $20
ROM:B68A A8			     .BYTE $A8 ; ¨
ROM:B68B A6			     .BYTE $A6 ; ¦
ROM:B68C 20			     .BYTE $20
ROM:B68D EA			     .BYTE $EA ; ê
ROM:B68E A2			     .BYTE $A2 ; ¢
ROM:B68F 4C			     .BYTE $4C ; L
ROM:B690 7D			     .BYTE $7D ; }
ROM:B691 A2			     .BYTE $A2 ; ¢
ROM:B692 A0			     .BYTE $A0 ;  
ROM:B693 13			     .BYTE $13
ROM:B694 B1			     .BYTE $B1 ; ±
ROM:B695 42			     .BYTE $42 ; B
ROM:B696 D0			     .BYTE $D0 ; Ð
ROM:B697 14			     .BYTE $14
ROM:B698 C8			     .BYTE $C8 ; È
ROM:B699 C0			     .BYTE $C0 ; À
ROM:B69A 17			     .BYTE $17
ROM:B69B D0			     .BYTE $D0 ; Ð
ROM:B69C F7			     .BYTE $F7 ; ÷
ROM:B69D A0			     .BYTE $A0 ;  
ROM:B69E 19			     .BYTE $19
ROM:B69F B1			     .BYTE $B1 ; ±
ROM:B6A0 42			     .BYTE $42 ; B
ROM:B6A1 99			     .BYTE $99 ; 
ROM:B6A2 A4			     .BYTE $A4 ; ¤
ROM:B6A3 B5			     .BYTE $B5 ; µ
ROM:B6A4 C8			     .BYTE $C8 ; È
ROM:B6A5 C0			     .BYTE $C0 ; À
ROM:B6A6 1D			     .BYTE $1D
ROM:B6A7 D0			     .BYTE $D0 ; Ð
ROM:B6A8 F6			     .BYTE $F6 ; ö
ROM:B6A9 4C			     .BYTE $4C ; L
ROM:B6AA BC			     .BYTE $BC ; ¼
ROM:B6AB A6			     .BYTE $A6 ; ¦
ROM:B6AC A2			     .BYTE $A2 ; ¢
ROM:B6AD FF			     .BYTE $FF
ROM:B6AE 8E			     .BYTE $8E ; 
ROM:B6AF 5D			     .BYTE $5D ; ]
ROM:B6B0 B6			     .BYTE $B6 ; ¶
ROM:B6B1 D0			     .BYTE $D0 ; Ð
ROM:B6B2 F6			     .BYTE $F6 ; ö
ROM:B6B3 00			     .BYTE   0
ROM:B6B4 00			     .BYTE   0
ROM:B6B5 00			     .BYTE   0
ROM:B6B6 00			     .BYTE   0
ROM:B6B7 00			     .BYTE   0
ROM:B6B8 00			     .BYTE   0
ROM:B6B9 00			     .BYTE   0
ROM:B6BA 00			     .BYTE   0
ROM:B6BB 00			     .BYTE   0
ROM:B6BC 00			     .BYTE   0
ROM:B6BD 00			     .BYTE   0
ROM:B6BE 00			     .BYTE   0
ROM:B6BF 00			     .BYTE   0
ROM:B6C0 00			     .BYTE   0
ROM:B6C1 00			     .BYTE   0
ROM:B6C2 00			     .BYTE   0
ROM:B6C3 00			     .BYTE   0
ROM:B6C4 00			     .BYTE   0
ROM:B6C5 00			     .BYTE   0
ROM:B6C6 00			     .BYTE   0
ROM:B6C7 00			     .BYTE   0
ROM:B6C8 00			     .BYTE   0
ROM:B6C9 00			     .BYTE   0
ROM:B6CA 00			     .BYTE   0
ROM:B6CB 00			     .BYTE   0
ROM:B6CC 00			     .BYTE   0
ROM:B6CD 00			     .BYTE   0
ROM:B6CE 00			     .BYTE   0
ROM:B6CF 00			     .BYTE   0
ROM:B6D0 20			     .BYTE $20
ROM:B6D1 58			     .BYTE $58 ; X
ROM:B6D2 FC			     .BYTE $FC ; ü
ROM:B6D3 A9			     .BYTE $A9 ; ©
ROM:B6D4 C2			     .BYTE $C2 ; Â
ROM:B6D5 20			     .BYTE $20
ROM:B6D6 ED			     .BYTE $ED ; í
ROM:B6D7 FD			     .BYTE $FD ; ý
ROM:B6D8 A9			     .BYTE $A9 ; ©
ROM:B6D9 01			     .BYTE   1
ROM:B6DA 20			     .BYTE $20
ROM:B6DB DA			     .BYTE $DA ; Ú
ROM:B6DC FD			     .BYTE $FD ; ý
ROM:B6DD A9			     .BYTE $A9 ; ©
ROM:B6DE AD			     .BYTE $AD ; ­
ROM:B6DF 20			     .BYTE $20
ROM:B6E0 ED			     .BYTE $ED ; í
ROM:B6E1 FD			     .BYTE $FD ; ý
ROM:B6E2 A9			     .BYTE $A9 ; ©
ROM:B6E3 00			     .BYTE   0
ROM:B6E4 20			     .BYTE $20
ROM:B6E5 DA			     .BYTE $DA ; Ú
ROM:B6E6 FD			     .BYTE $FD ; ý
ROM:B6E7 60			     .BYTE $60 ; `
ROM:B6E8 00			     .BYTE   0
ROM:B6E9 00			     .BYTE   0
ROM:B6EA 00			     .BYTE   0
ROM:B6EB 00			     .BYTE   0
ROM:B6EC 00			     .BYTE   0
ROM:B6ED 00			     .BYTE   0
ROM:B6EE 00			     .BYTE   0
ROM:B6EF 00			     .BYTE   0
ROM:B6F0 00			     .BYTE   0
ROM:B6F1 00			     .BYTE   0
ROM:B6F2 00			     .BYTE   0
ROM:B6F3 00			     .BYTE   0
ROM:B6F4 00			     .BYTE   0
ROM:B6F5 00			     .BYTE   0
ROM:B6F6 00			     .BYTE   0
ROM:B6F7 00			     .BYTE   0
ROM:B6F8 00			     .BYTE   0
ROM:B6F9 00			     .BYTE   0
ROM:B6FA 00			     .BYTE   0
ROM:B6FB 00			     .BYTE   0
ROM:B6FC 00			     .BYTE   0
ROM:B6FD 00			     .BYTE   0
ROM:B6FE B6			     .BYTE $B6 ; ¶
ROM:B6FF 09			     .BYTE   9
ROM:B700 8E			     .BYTE $8E ; 
ROM:B701 E9			     .BYTE $E9 ; é
ROM:B702 B7			     .BYTE $B7 ; ·
ROM:B703 8E			     .BYTE $8E ; 
ROM:B704 F7			     .BYTE $F7 ; ÷
ROM:B705 B7			     .BYTE $B7 ; ·
ROM:B706 A9			     .BYTE $A9 ; ©
ROM:B707 01			     .BYTE   1
ROM:B708 8D			     .BYTE $8D ; 
ROM:B709 F8			     .BYTE $F8 ; ø
ROM:B70A B7			     .BYTE $B7 ; ·
ROM:B70B 8D			     .BYTE $8D ; 
ROM:B70C EA			     .BYTE $EA ; ê
ROM:B70D B7			     .BYTE $B7 ; ·
ROM:B70E AD			     .BYTE $AD ; ­
ROM:B70F E0			     .BYTE $E0 ; à
ROM:B710 B7			     .BYTE $B7 ; ·
ROM:B711 8D			     .BYTE $8D ; 
ROM:B712 E1			     .BYTE $E1 ; á
ROM:B713 B7			     .BYTE $B7 ; ·
ROM:B714 A9			     .BYTE $A9 ; ©
ROM:B715 02			     .BYTE   2
ROM:B716 8D			     .BYTE $8D ; 
ROM:B717 EC			     .BYTE $EC ; ì
ROM:B718 B7			     .BYTE $B7 ; ·
ROM:B719 A9			     .BYTE $A9 ; ©
ROM:B71A 04			     .BYTE   4
ROM:B71B 8D			     .BYTE $8D ; 
ROM:B71C ED			     .BYTE $ED ; í
ROM:B71D B7			     .BYTE $B7 ; ·
ROM:B71E AC			     .BYTE $AC ; ¬
ROM:B71F E7			     .BYTE $E7 ; ç
ROM:B720 B7			     .BYTE $B7 ; ·
ROM:B721 88			     .BYTE $88 ; 
ROM:B722 8C			     .BYTE $8C ; 
ROM:B723 F1			     .BYTE $F1 ; ñ
ROM:B724 B7			     .BYTE $B7 ; ·
ROM:B725 A9			     .BYTE $A9 ; ©
ROM:B726 01			     .BYTE   1
ROM:B727 8D			     .BYTE $8D ; 
ROM:B728 F4			     .BYTE $F4 ; ô
ROM:B729 B7			     .BYTE $B7 ; ·
ROM:B72A 8A			     .BYTE $8A ; 
ROM:B72B 4A			     .BYTE $4A ; J
ROM:B72C 4A			     .BYTE $4A ; J
ROM:B72D 4A			     .BYTE $4A ; J
ROM:B72E 4A			     .BYTE $4A ; J
ROM:B72F AA			     .BYTE $AA ; ª
ROM:B730 A9			     .BYTE $A9 ; ©
ROM:B731 00			     .BYTE   0
ROM:B732 9D			     .BYTE $9D ; 
ROM:B733 F8			     .BYTE $F8 ; ø
ROM:B734 04			     .BYTE   4
ROM:B735 9D			     .BYTE $9D ; 
ROM:B736 78			     .BYTE $78 ; x
ROM:B737 04			     .BYTE   4
ROM:B738 20			     .BYTE $20
ROM:B739 93			     .BYTE $93 ; 
ROM:B73A B7			     .BYTE $B7 ; ·
ROM:B73B A2			     .BYTE $A2 ; ¢
ROM:B73C FF			     .BYTE $FF
ROM:B73D 9A			     .BYTE $9A ; 
ROM:B73E 8E			     .BYTE $8E ; 
ROM:B73F EB			     .BYTE $EB ; ë
ROM:B740 B7			     .BYTE $B7 ; ·
ROM:B741 EA			     .BYTE $EA ; ê
ROM:B742 EA			     .BYTE $EA ; ê
ROM:B743 EA			     .BYTE $EA ; ê
ROM:B744 20			     .BYTE $20
ROM:B745 89			     .BYTE $89 ; 
ROM:B746 FE			     .BYTE $FE ; þ
ROM:B747 4C			     .BYTE $4C ; L
ROM:B748 84			     .BYTE $84 ; 
ROM:B749 9D			     .BYTE $9D ; 
ROM:B74A AD			     .BYTE $AD ; ­
ROM:B74B E7			     .BYTE $E7 ; ç
ROM:B74C B7			     .BYTE $B7 ; ·
ROM:B74D 38			     .BYTE $38 ; 8
ROM:B74E ED			     .BYTE $ED ; í
ROM:B74F F1			     .BYTE $F1 ; ñ
ROM:B750 B7			     .BYTE $B7 ; ·
ROM:B751 8D			     .BYTE $8D ; 
ROM:B752 E1			     .BYTE $E1 ; á
ROM:B753 B7			     .BYTE $B7 ; ·
ROM:B754 AD			     .BYTE $AD ; ­
ROM:B755 E7			     .BYTE $E7 ; ç
ROM:B756 B7			     .BYTE $B7 ; ·
ROM:B757 8D			     .BYTE $8D ; 
ROM:B758 F1			     .BYTE $F1 ; ñ
ROM:B759 B7			     .BYTE $B7 ; ·
ROM:B75A CE			     .BYTE $CE ; Î
ROM:B75B F1			     .BYTE $F1 ; ñ
ROM:B75C B7			     .BYTE $B7 ; ·
ROM:B75D A9			     .BYTE $A9 ; ©
ROM:B75E 02			     .BYTE   2
ROM:B75F 8D			     .BYTE $8D ; 
ROM:B760 EC			     .BYTE $EC ; ì
ROM:B761 B7			     .BYTE $B7 ; ·
ROM:B762 A9			     .BYTE $A9 ; ©
ROM:B763 04			     .BYTE   4
ROM:B764 8D			     .BYTE $8D ; 
ROM:B765 ED			     .BYTE $ED ; í
ROM:B766 B7			     .BYTE $B7 ; ·
ROM:B767 A9			     .BYTE $A9 ; ©
ROM:B768 02			     .BYTE   2
ROM:B769 8D			     .BYTE $8D ; 
ROM:B76A F4			     .BYTE $F4 ; ô
ROM:B76B B7			     .BYTE $B7 ; ·
ROM:B76C 20			     .BYTE $20
ROM:B76D 93			     .BYTE $93 ; 
ROM:B76E B7			     .BYTE $B7 ; ·
ROM:B76F AD			     .BYTE $AD ; ­
ROM:B770 E7			     .BYTE $E7 ; ç
ROM:B771 B7			     .BYTE $B7 ; ·
ROM:B772 8D			     .BYTE $8D ; 
ROM:B773 FE			     .BYTE $FE ; þ
ROM:B774 B6			     .BYTE $B6 ; ¶
ROM:B775 18			     .BYTE $18
ROM:B776 69			     .BYTE $69 ; i
ROM:B777 09			     .BYTE   9
ROM:B778 8D			     .BYTE $8D ; 
ROM:B779 F1			     .BYTE $F1 ; ñ
ROM:B77A B7			     .BYTE $B7 ; ·
ROM:B77B A9			     .BYTE $A9 ; ©
ROM:B77C 0A			     .BYTE  $A
ROM:B77D 8D			     .BYTE $8D ; 
ROM:B77E E1			     .BYTE $E1 ; á
ROM:B77F B7			     .BYTE $B7 ; ·
ROM:B780 38			     .BYTE $38 ; 8
ROM:B781 E9			     .BYTE $E9 ; é
ROM:B782 01			     .BYTE   1
ROM:B783 8D			     .BYTE $8D ; 
ROM:B784 FF			     .BYTE $FF
ROM:B785 B6			     .BYTE $B6 ; ¶
ROM:B786 8D			     .BYTE $8D ; 
ROM:B787 ED			     .BYTE $ED ; í
ROM:B788 B7			     .BYTE $B7 ; ·
ROM:B789 20			     .BYTE $20
ROM:B78A 93			     .BYTE $93 ; 
ROM:B78B B7			     .BYTE $B7 ; ·
ROM:B78C 60			     .BYTE $60 ; `
ROM:B78D 00			     .BYTE   0
ROM:B78E 00			     .BYTE   0
ROM:B78F 00			     .BYTE   0
ROM:B790 00			     .BYTE   0
ROM:B791 00			     .BYTE   0
ROM:B792 00			     .BYTE   0
ROM:B793 AD			     .BYTE $AD ; ­
ROM:B794 E5			     .BYTE $E5 ; å
ROM:B795 B7			     .BYTE $B7 ; ·
ROM:B796 AC			     .BYTE $AC ; ¬
ROM:B797 E4			     .BYTE $E4 ; ä
ROM:B798 B7			     .BYTE $B7 ; ·
ROM:B799 20			     .BYTE $20
ROM:B79A B5			     .BYTE $B5 ; µ
ROM:B79B B7			     .BYTE $B7 ; ·
ROM:B79C AC			     .BYTE $AC ; ¬
ROM:B79D ED			     .BYTE $ED ; í
ROM:B79E B7			     .BYTE $B7 ; ·
ROM:B79F 88			     .BYTE $88 ; 
ROM:B7A0 10			     .BYTE $10
ROM:B7A1 07			     .BYTE   7
ROM:B7A2 A0			     .BYTE $A0 ;  
ROM:B7A3 0F			     .BYTE  $F
ROM:B7A4 EA			     .BYTE $EA ; ê
ROM:B7A5 EA			     .BYTE $EA ; ê
ROM:B7A6 CE			     .BYTE $CE ; Î
ROM:B7A7 EC			     .BYTE $EC ; ì
ROM:B7A8 B7			     .BYTE $B7 ; ·
ROM:B7A9 8C			     .BYTE $8C ; 
ROM:B7AA ED			     .BYTE $ED ; í
ROM:B7AB B7			     .BYTE $B7 ; ·
ROM:B7AC CE			     .BYTE $CE ; Î
ROM:B7AD F1			     .BYTE $F1 ; ñ
ROM:B7AE B7			     .BYTE $B7 ; ·
ROM:B7AF CE			     .BYTE $CE ; Î
ROM:B7B0 E1			     .BYTE $E1 ; á
ROM:B7B1 B7			     .BYTE $B7 ; ·
ROM:B7B2 D0			     .BYTE $D0 ; Ð
ROM:B7B3 DF			     .BYTE $DF ; ß
ROM:B7B4	     ; ---------------------------------------------------------------------------
ROM:B7B4 60			     RTS
ROM:B7B5	     ; ---------------------------------------------------------------------------
ROM:B7B5
ROM:B7B5	     loc_B7B5:					     ; CODE XREF: ROM:loc_8E50j
ROM:B7B5 08			     PHP			     ; push processor status
ROM:B7B6 78			     SEI			     ; disable interrupts
ROM:B7B7 20 00 BD		     JSR     determine_hardware
ROM:B7BA B0 03			     BCS     loc_B7BF
ROM:B7BC 28			     PLP			     ; pull processor status
ROM:B7BD 18			     CLC			     ; clear carry
ROM:B7BE 60			     RTS
ROM:B7BF	     ; ---------------------------------------------------------------------------
ROM:B7BF
ROM:B7BF	     loc_B7BF:					     ; CODE XREF: ROM:B7BAj
ROM:B7BF 28			     PLP			     ; pull processor status
ROM:B7C0 38			     SEC			     ; set carry flag
ROM:B7C1 60			     RTS
ROM:B7C1	     ; ---------------------------------------------------------------------------
ROM:B7C2 AD			     .BYTE $AD ; ­
ROM:B7C3 BC			     .BYTE $BC ; ¼
ROM:B7C4 B5			     .BYTE $B5 ; µ
ROM:B7C5 8D			     .BYTE $8D ; 
ROM:B7C6 F1			     .BYTE $F1 ; ñ
ROM:B7C7 B7			     .BYTE $B7 ; ·
ROM:B7C8 A9			     .BYTE $A9 ; ©
ROM:B7C9 00			     .BYTE   0
ROM:B7CA 8D			     .BYTE $8D ; 
ROM:B7CB F0			     .BYTE $F0 ; ð
ROM:B7CC B7			     .BYTE $B7 ; ·
ROM:B7CD AD			     .BYTE $AD ; ­
ROM:B7CE F9			     .BYTE $F9 ; ù
ROM:B7CF B5			     .BYTE $B5 ; µ
ROM:B7D0 49			     .BYTE $49 ; I
ROM:B7D1 FF			     .BYTE $FF
ROM:B7D2 8D			     .BYTE $8D ; 
ROM:B7D3 EB			     .BYTE $EB ; ë
ROM:B7D4 B7			     .BYTE $B7 ; ·
ROM:B7D5 60			     .BYTE $60 ; `
ROM:B7D6 A9			     .BYTE $A9 ; ©
ROM:B7D7 00			     .BYTE   0
ROM:B7D8 A8			     .BYTE $A8 ; ¨
ROM:B7D9 91			     .BYTE $91 ; 
ROM:B7DA 42			     .BYTE $42 ; B
ROM:B7DB C8			     .BYTE $C8 ; È
ROM:B7DC D0			     .BYTE $D0 ; Ð
ROM:B7DD FB			     .BYTE $FB ; û
ROM:B7DE 60			     .BYTE $60 ; `
ROM:B7DF 00			     .BYTE   0
ROM:B7E0 1B			     .BYTE $1B
ROM:B7E1 00			     .BYTE   0
ROM:B7E2 0A			     .BYTE  $A
ROM:B7E3 1B			     .BYTE $1B
ROM:B7E4 E8			     .BYTE $E8 ; è
ROM:B7E5 B7			     .BYTE $B7 ; ·
ROM:B7E6 00			     .BYTE   0
ROM:B7E7 B6			     .BYTE $B6 ; ¶
ROM:B7E8 01			     .BYTE   1
ROM:B7E9 70			     .BYTE $70
ROM:B7EA 01			     .BYTE   1
ROM:B7EB FF	     byte_B7EB:	     .BYTE $FF			     ; DATA XREF: read_level_data+27w
ROM:B7EB							     ; read_disk_and_chk_sig+19w
ROM:B7EC 13	     byte_B7EC:	     .BYTE $13			     ; DATA XREF: read_level_data+11w
ROM:B7EC							     ; read_disk_and_chk_sig+5w
ROM:B7ED 05	     byte_B7ED:	     .BYTE 5			     ; DATA XREF: read_level_data+18w
ROM:B7ED							     ; read_disk_and_chk_sig+Aw
ROM:B7EE FB			     .BYTE $FB ; û
ROM:B7EF B7			     .BYTE $B7 ; ·
ROM:B7F0 00	     byte_B7F0:	     .BYTE 0			     ; DATA XREF: read_level_data+1Dw
ROM:B7F0							     ; read_disk_and_chk_sig+Fw
ROM:B7F1 96	     byte_B7F1:	     .BYTE $96			     ; DATA XREF: read_level_data+22w
ROM:B7F1							     ; read_disk_and_chk_sig+14w
ROM:B7F2 00			     .BYTE   0
ROM:B7F3 01			     .BYTE   1
ROM:B7F4 01	     byte_B7F4:	     .BYTE 1			     ; DATA XREF: read_level_dataw
ROM:B7F4							     ; read_disk_and_chk_sigw
ROM:B7F5 00			     .BYTE   0
ROM:B7F6 01			     .BYTE   1
ROM:B7F7 60			     .BYTE $60 ; `
ROM:B7F8 01			     .BYTE   1
ROM:B7F9 00			     .BYTE   0
ROM:B7FA 00			     .BYTE   0
ROM:B7FB 00			     .BYTE   0
ROM:B7FC 01			     .BYTE   1
ROM:B7FD EF			     .BYTE $EF ; ï
ROM:B7FE D8			     .BYTE $D8 ; Ø
ROM:B7FF 00			     .BYTE   0
ROM:B800
ROM:B800	     ; =============== S U B R O U T I N E =======================================
ROM:B800
ROM:B800
ROM:B800	     sub_B800:					     ; CODE XREF: ROM:BDB9p
ROM:B800 A2 00			     LDX     #0
ROM:B802 A0 02			     LDY     #2
ROM:B804
ROM:B804	     loc_B804:					     ; CODE XREF: sub_B800+15j
ROM:B804							     ; sub_B800+1Aj
ROM:B804 88			     DEY
ROM:B805 B1 3E			     LDA     ($3E),Y
ROM:B807 4A			     LSR     A
ROM:B808 3E 00 BC		     ROL     $BC00,X
ROM:B80B 4A			     LSR     A
ROM:B80C 3E 00 BC		     ROL     $BC00,X
ROM:B80F 99 00 BB		     STA     $BB00,Y
ROM:B812 E8			     INX
ROM:B813 E0 56			     CPX     #$56 ; 'V'
ROM:B815 90 ED			     BCC     loc_B804
ROM:B817 A2 00			     LDX     #0
ROM:B819 98			     TYA
ROM:B81A D0 E8			     BNE     loc_B804
ROM:B81C A2 55			     LDX     #$55 ; 'U'
ROM:B81E
ROM:B81E	     loc_B81E:					     ; CODE XREF: sub_B800+27j
ROM:B81E BD 00 BC		     LDA     $BC00,X
ROM:B821 29 3F			     AND     #$3F ; '?'
ROM:B823 9D 00 BC		     STA     $BC00,X
ROM:B826 CA			     DEX
ROM:B827 10 F5			     BPL     loc_B81E
ROM:B829 60			     RTS
ROM:B829	     ; End of function sub_B800
ROM:B829
ROM:B82A
ROM:B82A	     ; =============== S U B R O U T I N E =======================================
ROM:B82A
ROM:B82A
ROM:B82A	     sub_B82A:					     ; CODE XREF: ROM:loc_BE51p
ROM:B82A 38			     SEC
ROM:B82B 86 27			     STX     $27
ROM:B82D 8E 78 06		     STX     $678
ROM:B830 BD 8D C0		     LDA     $C08D,X
ROM:B833 BD 8E C0		     LDA     $C08E,X
ROM:B836 30 7C			     BMI     loc_B8B4
ROM:B838 AD 00 BC		     LDA     $BC00
ROM:B83B 85 26			     STA     $26
ROM:B83D A9 FF			     LDA     #$FF
ROM:B83F 9D 8F C0		     STA     $C08F,X
ROM:B842 1D 8C C0		     ORA     $C08C,X
ROM:B845 48			     PHA
ROM:B846 68			     PLA
ROM:B847 EA			     NOP
ROM:B848 A0 04			     LDY     #4
ROM:B84A
ROM:B84A	     loc_B84A:					     ; CODE XREF: sub_B82A+26j
ROM:B84A 48			     PHA
ROM:B84B 68			     PLA
ROM:B84C 20 B9 B8		     JSR     sub_B8B9
ROM:B84F 88			     DEY
ROM:B850 D0 F8			     BNE     loc_B84A
ROM:B852 A9 D5			     LDA     #$D5 ; 'Õ'
ROM:B854 20 B8 B8		     JSR     sub_B8B8
ROM:B857 A9 AA			     LDA     #$AA ; 'ª'
ROM:B859 20 B8 B8		     JSR     sub_B8B8
ROM:B85C A9 AD			     LDA     #$AD ; '­'
ROM:B85E 20 B8 B8		     JSR     sub_B8B8
ROM:B861 98			     TYA
ROM:B862 A0 56			     LDY     #$56 ; 'V'
ROM:B864 D0 03			     BNE     loc_B869
ROM:B866
ROM:B866	     loc_B866:					     ; CODE XREF: sub_B82A+4Fj
ROM:B866 B9 00 BC		     LDA     $BC00,Y
ROM:B869
ROM:B869	     loc_B869:					     ; CODE XREF: sub_B82A+3Aj
ROM:B869 59 FF BB		     EOR     $BBFF,Y
ROM:B86C AA			     TAX
ROM:B86D BD 29 BA		     LDA     $BA29,X
ROM:B870 A6 27			     LDX     $27
ROM:B872 9D 8D C0		     STA     $C08D,X
ROM:B875 BD 8C C0		     LDA     $C08C,X
ROM:B878 88			     DEY
ROM:B879 D0 EB			     BNE     loc_B866
ROM:B87B A5 26			     LDA     $26
ROM:B87D EA			     NOP
ROM:B87E
ROM:B87E	     loc_B87E:					     ; CODE XREF: sub_B82A+68j
ROM:B87E 59 00 BB		     EOR     $BB00,Y
ROM:B881 AA			     TAX
ROM:B882 BD 29 BA		     LDA     $BA29,X
ROM:B885 AE 78 06		     LDX     $678
ROM:B888 9D 8D C0		     STA     $C08D,X
ROM:B88B BD 8C C0		     LDA     $C08C,X
ROM:B88E B9 00 BB		     LDA     $BB00,Y
ROM:B891 C8			     INY
ROM:B892 D0 EA			     BNE     loc_B87E
ROM:B894 AA			     TAX
ROM:B895 BD 29 BA		     LDA     $BA29,X
ROM:B898 A6 27			     LDX     $27
ROM:B89A 20 BB B8		     JSR     sub_B8BB
ROM:B89D A9 DE			     LDA     #$DE ; 'Þ'
ROM:B89F 20 B8 B8		     JSR     sub_B8B8
ROM:B8A2 A9 AA			     LDA     #$AA ; 'ª'
ROM:B8A4 20 B8 B8		     JSR     sub_B8B8
ROM:B8A7 A9 EB			     LDA     #$EB ; 'ë'
ROM:B8A9 20 B8 B8		     JSR     sub_B8B8
ROM:B8AC A9 FF			     LDA     #$FF
ROM:B8AE 20 B8 B8		     JSR     sub_B8B8
ROM:B8B1 BD 8E C0		     LDA     $C08E,X
ROM:B8B4
ROM:B8B4	     loc_B8B4:					     ; CODE XREF: sub_B82A+Cj
ROM:B8B4 BD 8C C0		     LDA     $C08C,X
ROM:B8B7 60			     RTS
ROM:B8B7	     ; End of function sub_B82A
ROM:B8B7
ROM:B8B8
ROM:B8B8	     ; =============== S U B R O U T I N E =======================================
ROM:B8B8
ROM:B8B8
ROM:B8B8	     sub_B8B8:					     ; CODE XREF: sub_B82A+2Ap
ROM:B8B8							     ; sub_B82A+2Fp ...
ROM:B8B8 18			     CLC
ROM:B8B8	     ; End of function sub_B8B8
ROM:B8B8
ROM:B8B9
ROM:B8B9	     ; =============== S U B R O U T I N E =======================================
ROM:B8B9
ROM:B8B9
ROM:B8B9	     sub_B8B9:					     ; CODE XREF: sub_B82A+22p
ROM:B8B9 48			     PHA
ROM:B8BA 68			     PLA
ROM:B8BA	     ; End of function sub_B8B9
ROM:B8BA
ROM:B8BB
ROM:B8BB	     ; =============== S U B R O U T I N E =======================================
ROM:B8BB
ROM:B8BB
ROM:B8BB	     sub_B8BB:					     ; CODE XREF: sub_B82A+70p
ROM:B8BB 9D 8D C0		     STA     $C08D,X
ROM:B8BE 1D 8C C0		     ORA     $C08C,X
ROM:B8C1 60			     RTS
ROM:B8C1	     ; End of function sub_B8BB
ROM:B8C1
ROM:B8C2
ROM:B8C2	     ; =============== S U B R O U T I N E =======================================
ROM:B8C2
ROM:B8C2
ROM:B8C2	     sub_B8C2:					     ; CODE XREF: ROM:BE40p
ROM:B8C2 A0 00			     LDY     #0
ROM:B8C4
ROM:B8C4	     loc_B8C4:					     ; CODE XREF: sub_B8C2+5j
ROM:B8C4 A2 56			     LDX     #$56 ; 'V'
ROM:B8C6
ROM:B8C6	     loc_B8C6:					     ; CODE XREF: sub_B8C2+17j
ROM:B8C6 CA			     DEX
ROM:B8C7 30 FB			     BMI     loc_B8C4
ROM:B8C9 B9 00 BB		     LDA     $BB00,Y
ROM:B8CC 5E 00 BC		     LSR     $BC00,X
ROM:B8CF 2A			     ROL     A
ROM:B8D0 5E 00 BC		     LSR     $BC00,X
ROM:B8D3 2A			     ROL     A
ROM:B8D4 91 3E			     STA     ($3E),Y
ROM:B8D6 C8			     INY
ROM:B8D7 C4 26			     CPY     $26
ROM:B8D9 D0 EB			     BNE     loc_B8C6
ROM:B8DB 60			     RTS
ROM:B8DB	     ; End of function sub_B8C2
ROM:B8DB
ROM:B8DC
ROM:B8DC	     ; =============== S U B R O U T I N E =======================================
ROM:B8DC
ROM:B8DC
ROM:B8DC	     sub_B8DC:					     ; CODE XREF: ROM:BE35p
ROM:B8DC A0 20			     LDY     #$20 ; ' '
ROM:B8DE
ROM:B8DE	     loc_B8DE:					     ; CODE XREF: sub_B8DC+Cj
ROM:B8DE 88			     DEY
ROM:B8DF F0 61			     BEQ     loc_B942
ROM:B8E1
ROM:B8E1	     loc_B8E1:					     ; CODE XREF: sub_B8DC+8j
ROM:B8E1 BD 8C C0		     LDA     $C08C,X
ROM:B8E4 10 FB			     BPL     loc_B8E1
ROM:B8E6
ROM:B8E6	     loc_B8E6:					     ; CODE XREF: sub_B8DC+16j
ROM:B8E6							     ; sub_B8DC+21j
ROM:B8E6 49 D5			     EOR     #$D5 ; 'Õ'
ROM:B8E8 D0 F4			     BNE     loc_B8DE
ROM:B8EA EA			     NOP
ROM:B8EB
ROM:B8EB	     loc_B8EB:					     ; CODE XREF: sub_B8DC+12j
ROM:B8EB BD 8C C0		     LDA     $C08C,X
ROM:B8EE 10 FB			     BPL     loc_B8EB
ROM:B8F0 C9 AA			     CMP     #$AA ; 'ª'
ROM:B8F2 D0 F2			     BNE     loc_B8E6
ROM:B8F4 A0 56			     LDY     #$56 ; 'V'
ROM:B8F6
ROM:B8F6	     loc_B8F6:					     ; CODE XREF: sub_B8DC+1Dj
ROM:B8F6 BD 8C C0		     LDA     $C08C,X
ROM:B8F9 10 FB			     BPL     loc_B8F6
ROM:B8FB C9 AD			     CMP     #$AD ; '­'
ROM:B8FD D0 E7			     BNE     loc_B8E6
ROM:B8FF A9 00			     LDA     #0
ROM:B901
ROM:B901	     loc_B901:					     ; CODE XREF: sub_B8DC+35j
ROM:B901 88			     DEY
ROM:B902 84 26			     STY     $26
ROM:B904
ROM:B904	     loc_B904:					     ; CODE XREF: sub_B8DC+2Bj
ROM:B904 BC 8C C0		     LDY     $C08C,X
ROM:B907 10 FB			     BPL     loc_B904
ROM:B909 59 00 BA		     EOR     $BA00,Y
ROM:B90C A4 26			     LDY     $26
ROM:B90E 99 00 BC		     STA     $BC00,Y
ROM:B911 D0 EE			     BNE     loc_B901
ROM:B913
ROM:B913	     loc_B913:					     ; CODE XREF: sub_B8DC+47j
ROM:B913 84 26			     STY     $26
ROM:B915
ROM:B915	     loc_B915:					     ; CODE XREF: sub_B8DC+3Cj
ROM:B915 BC 8C C0		     LDY     $C08C,X
ROM:B918 10 FB			     BPL     loc_B915
ROM:B91A 59 00 BA		     EOR     $BA00,Y
ROM:B91D A4 26			     LDY     $26
ROM:B91F 99 00 BB		     STA     $BB00,Y
ROM:B922 C8			     INY
ROM:B923 D0 EE			     BNE     loc_B913
ROM:B925
ROM:B925	     loc_B925:					     ; CODE XREF: sub_B8DC+4Cj
ROM:B925 BC 8C C0		     LDY     $C08C,X
ROM:B928 10 FB			     BPL     loc_B925
ROM:B92A D9 00 BA		     CMP     $BA00,Y
ROM:B92D D0 13			     BNE     loc_B942
ROM:B92F
ROM:B92F	     loc_B92F:					     ; CODE XREF: sub_B8DC+56j
ROM:B92F BD 8C C0		     LDA     $C08C,X
ROM:B932 10 FB			     BPL     loc_B92F
ROM:B934 C9 DE			     CMP     #$DE ; 'Þ'
ROM:B936 D0 0A			     BNE     loc_B942
ROM:B938 EA			     NOP
ROM:B939
ROM:B939	     loc_B939:					     ; CODE XREF: sub_B8DC+60j
ROM:B939 BD 8C C0		     LDA     $C08C,X
ROM:B93C 10 FB			     BPL     loc_B939
ROM:B93E C9 AA			     CMP     #$AA ; 'ª'
ROM:B940 F0 5C			     BEQ     loc_B99E
ROM:B942
ROM:B942	     loc_B942:					     ; CODE XREF: sub_B8DC+3j
ROM:B942							     ; sub_B8DC+51j ...
ROM:B942 38			     SEC
ROM:B943 60			     RTS
ROM:B943	     ; End of function sub_B8DC
ROM:B943
ROM:B944
ROM:B944	     ; =============== S U B R O U T I N E =======================================
ROM:B944
ROM:B944
ROM:B944	     sub_B944:					     ; CODE XREF: ROM:BDC4p
ROM:B944 A0 FC			     LDY     #$FC ; 'ü'
ROM:B946 84 26			     STY     $26
ROM:B948
ROM:B948	     loc_B948:					     ; CODE XREF: sub_B944+12j
ROM:B948 C8			     INY
ROM:B949 D0 04			     BNE     loc_B94F
ROM:B94B E6 26			     INC     $26
ROM:B94D F0 F3			     BEQ     loc_B942
ROM:B94F
ROM:B94F	     loc_B94F:					     ; CODE XREF: sub_B944+5j
ROM:B94F							     ; sub_B944+Ej
ROM:B94F BD 8C C0		     LDA     $C08C,X
ROM:B952 10 FB			     BPL     loc_B94F
ROM:B954
ROM:B954	     loc_B954:					     ; CODE XREF: sub_B944+1Cj
ROM:B954							     ; sub_B944+27j
ROM:B954 C9 D5			     CMP     #$D5 ; 'Õ'
ROM:B956 D0 F0			     BNE     loc_B948
ROM:B958 EA			     NOP
ROM:B959
ROM:B959	     loc_B959:					     ; CODE XREF: sub_B944+18j
ROM:B959 BD 8C C0		     LDA     $C08C,X
ROM:B95C 10 FB			     BPL     loc_B959
ROM:B95E C9 AA			     CMP     #$AA ; 'ª'
ROM:B960 D0 F2			     BNE     loc_B954
ROM:B962 A0 03			     LDY     #3
ROM:B964
ROM:B964	     loc_B964:					     ; CODE XREF: sub_B944+23j
ROM:B964 BD 8C C0		     LDA     $C08C,X
ROM:B967 10 FB			     BPL     loc_B964
ROM:B969 C9 96			     CMP     #$96 ; ''
ROM:B96B D0 E7			     BNE     loc_B954
ROM:B96D A9 00			     LDA     #0
ROM:B96F
ROM:B96F	     loc_B96F:					     ; CODE XREF: sub_B944+42j
ROM:B96F 85 27			     STA     $27
ROM:B971
ROM:B971	     loc_B971:					     ; CODE XREF: sub_B944+30j
ROM:B971 BD 8C C0		     LDA     $C08C,X
ROM:B974 10 FB			     BPL     loc_B971
ROM:B976 2A			     ROL     A
ROM:B977 85 26			     STA     $26
ROM:B979
ROM:B979	     loc_B979:					     ; CODE XREF: sub_B944+38j
ROM:B979 BD 8C C0		     LDA     $C08C,X
ROM:B97C 10 FB			     BPL     loc_B979
ROM:B97E 25 26			     AND     $26
ROM:B980 99 2C 00		     STA     $2C,Y
ROM:B983 45 27			     EOR     $27
ROM:B985 88			     DEY
ROM:B986 10 E7			     BPL     loc_B96F
ROM:B988 A8			     TAY
ROM:B989 24 B7			     BIT     $B7
ROM:B98B
ROM:B98B	     loc_B98B:					     ; CODE XREF: sub_B944+4Aj
ROM:B98B BD 8C C0		     LDA     $C08C,X
ROM:B98E 10 FB			     BPL     loc_B98B
ROM:B990 C9 DE			     CMP     #$DE ; 'Þ'
ROM:B992 D0 AE			     BNE     loc_B942
ROM:B994 EA			     NOP
ROM:B995
ROM:B995	     loc_B995:					     ; CODE XREF: sub_B944+54j
ROM:B995 BD 8C C0		     LDA     $C08C,X
ROM:B998 10 FB			     BPL     loc_B995
ROM:B99A C9 AA			     CMP     #$AA ; 'ª'
ROM:B99C 24 A4			     BIT     $A4
ROM:B99E
ROM:B99E	     loc_B99E:					     ; CODE XREF: sub_B8DC+64j
ROM:B99E 18			     CLC
ROM:B99F 60			     RTS
ROM:B99F	     ; End of function sub_B944
ROM:B99F
ROM:B9A0
ROM:B9A0	     ; =============== S U B R O U T I N E =======================================
ROM:B9A0
ROM:B9A0
ROM:B9A0	     sub_B9A0:					     ; CODE XREF: ROM:8E07p
ROM:B9A0							     ; sub_BE6B:loc_BE8Bj
ROM:B9A0 86 2B			     STX     $2B
ROM:B9A2 85 2A			     STA     $2A
ROM:B9A4 CD 78 04		     CMP     $478
ROM:B9A7 F0 53			     BEQ     locret_B9FC
ROM:B9A9 A9 00			     LDA     #0
ROM:B9AB 85 26			     STA     $26
ROM:B9AD
ROM:B9AD	     loc_B9AD:					     ; CODE XREF: sub_B9A0+48j
ROM:B9AD AD 78 04		     LDA     $478
ROM:B9B0 85 27			     STA     $27
ROM:B9B2 38			     SEC
ROM:B9B3 E5 2A			     SBC     $2A
ROM:B9B5 F0 33			     BEQ     loc_B9EA
ROM:B9B7 B0 07			     BCS     loc_B9C0
ROM:B9B9 49 FF			     EOR     #$FF
ROM:B9BB EE 78 04		     INC     $478
ROM:B9BE 90 05			     BCC     loc_B9C5
ROM:B9C0
ROM:B9C0	     loc_B9C0:					     ; CODE XREF: sub_B9A0+17j
ROM:B9C0 69 FE			     ADC     #$FE ; 'þ'
ROM:B9C2 CE 78 04		     DEC     $478
ROM:B9C5
ROM:B9C5	     loc_B9C5:					     ; CODE XREF: sub_B9A0+1Ej
ROM:B9C5 C5 26			     CMP     $26
ROM:B9C7 90 02			     BCC     loc_B9CB
ROM:B9C9 A5 26			     LDA     $26
ROM:B9CB
ROM:B9CB	     loc_B9CB:					     ; CODE XREF: sub_B9A0+27j
ROM:B9CB C9 0C			     CMP     #$C
ROM:B9CD B0 01			     BCS     loc_B9D0
ROM:B9CF A8			     TAY
ROM:B9D0
ROM:B9D0	     loc_B9D0:					     ; CODE XREF: sub_B9A0+2Dj
ROM:B9D0 38			     SEC
ROM:B9D1 20 EE B9		     JSR     sub_B9EE
ROM:B9D4 B9 11 BA		     LDA     $BA11,Y
ROM:B9D7 20 00 BA		     JSR     sub_BA00
ROM:B9DA A5 27			     LDA     $27
ROM:B9DC 18			     CLC
ROM:B9DD 20 F1 B9		     JSR     sub_B9F1
ROM:B9E0 B9 1D BA		     LDA     $BA1D,Y
ROM:B9E3 20 00 BA		     JSR     sub_BA00
ROM:B9E6 E6 26			     INC     $26
ROM:B9E8 D0 C3			     BNE     loc_B9AD
ROM:B9EA
ROM:B9EA	     loc_B9EA:					     ; CODE XREF: sub_B9A0+15j
ROM:B9EA 20 00 BA		     JSR     sub_BA00
ROM:B9ED 18			     CLC
ROM:B9ED	     ; End of function sub_B9A0
ROM:B9ED
ROM:B9EE
ROM:B9EE	     ; =============== S U B R O U T I N E =======================================
ROM:B9EE
ROM:B9EE
ROM:B9EE	     sub_B9EE:					     ; CODE XREF: sub_B9A0+31p
ROM:B9EE AD 78 04		     LDA     $478
ROM:B9EE	     ; End of function sub_B9EE
ROM:B9EE
ROM:B9F1
ROM:B9F1	     ; =============== S U B R O U T I N E =======================================
ROM:B9F1
ROM:B9F1
ROM:B9F1	     sub_B9F1:					     ; CODE XREF: sub_B9A0+3Dp
ROM:B9F1 29 03			     AND     #3
ROM:B9F3 2A			     ROL     A
ROM:B9F4 05 2B			     ORA     $2B
ROM:B9F6 AA			     TAX
ROM:B9F7 BD 80 C0		     LDA     $C080,X
ROM:B9FA A6 2B			     LDX     $2B
ROM:B9FC
ROM:B9FC	     locret_B9FC:				     ; CODE XREF: sub_B9A0+7j
ROM:B9FC 60			     RTS
ROM:B9FC	     ; End of function sub_B9F1
ROM:B9FC
ROM:B9FC	     ; ---------------------------------------------------------------------------
ROM:B9FD AA			     .BYTE $AA ; ª
ROM:B9FE A0			     .BYTE $A0 ;  
ROM:B9FF A0			     .BYTE $A0 ;  
ROM:BA00
ROM:BA00	     ; =============== S U B R O U T I N E =======================================
ROM:BA00
ROM:BA00
ROM:BA00	     sub_BA00:					     ; CODE XREF: sub_B9A0+37p
ROM:BA00							     ; sub_B9A0+43p ...
ROM:BA00 A2 11			     LDX     #$11
ROM:BA02
ROM:BA02	     loc_BA02:					     ; CODE XREF: sub_BA00+3j
ROM:BA02 CA			     DEX
ROM:BA03 D0 FD			     BNE     loc_BA02
ROM:BA05 E6 46			     INC     $46
ROM:BA07 D0 02			     BNE     loc_BA0B
ROM:BA09 E6 47			     INC     $47
ROM:BA0B
ROM:BA0B	     loc_BA0B:					     ; CODE XREF: sub_BA00+7j
ROM:BA0B 38			     SEC
ROM:BA0C E9 01			     SBC     #1
ROM:BA0E D0 F0			     BNE     sub_BA00
ROM:BA10 60			     RTS
ROM:BA10	     ; End of function sub_BA00
ROM:BA10
ROM:BA10	     ; ---------------------------------------------------------------------------
ROM:BA11 01			     .BYTE   1
ROM:BA12 30			     .BYTE $30 ; 0
ROM:BA13 28			     .BYTE $28 ; (
ROM:BA14 24			     .BYTE $24 ; $
ROM:BA15 20			     .BYTE $20
ROM:BA16 1E			     .BYTE $1E
ROM:BA17 1D			     .BYTE $1D
ROM:BA18 1C			     .BYTE $1C
ROM:BA19 1C			     .BYTE $1C
ROM:BA1A 1C			     .BYTE $1C
ROM:BA1B 1C			     .BYTE $1C
ROM:BA1C 1C			     .BYTE $1C
ROM:BA1D 70			     .BYTE $70 ; p
ROM:BA1E 2C			     .BYTE $2C ; ,
ROM:BA1F 26			     .BYTE $26 ; &
ROM:BA20 22			     .BYTE $22 ; "
ROM:BA21 1F			     .BYTE $1F
ROM:BA22 1E			     .BYTE $1E
ROM:BA23 1D			     .BYTE $1D
ROM:BA24 1C			     .BYTE $1C
ROM:BA25 1C			     .BYTE $1C
ROM:BA26 1C			     .BYTE $1C
ROM:BA27 1C			     .BYTE $1C
ROM:BA28 1C			     .BYTE $1C
ROM:BA29 96			     .BYTE $96 ; 
ROM:BA2A 97			     .BYTE $97 ; 
ROM:BA2B 9A			     .BYTE $9A ; 
ROM:BA2C 9B			     .BYTE $9B ; 
ROM:BA2D 9D			     .BYTE $9D ; 
ROM:BA2E 9E			     .BYTE $9E ; 
ROM:BA2F 9F			     .BYTE $9F ; 
ROM:BA30 A6			     .BYTE $A6 ; ¦
ROM:BA31 A7			     .BYTE $A7 ; §
ROM:BA32 AB			     .BYTE $AB ; «
ROM:BA33 AC			     .BYTE $AC ; ¬
ROM:BA34 AD			     .BYTE $AD ; ­
ROM:BA35 AE			     .BYTE $AE ; ®
ROM:BA36 AF			     .BYTE $AF ; ¯
ROM:BA37 B2			     .BYTE $B2 ; ²
ROM:BA38 B3			     .BYTE $B3 ; ³
ROM:BA39 B4			     .BYTE $B4 ; ´
ROM:BA3A B5			     .BYTE $B5 ; µ
ROM:BA3B B6			     .BYTE $B6 ; ¶
ROM:BA3C B7			     .BYTE $B7 ; ·
ROM:BA3D B9			     .BYTE $B9 ; ¹
ROM:BA3E BA			     .BYTE $BA ; º
ROM:BA3F BB			     .BYTE $BB ; »
ROM:BA40 BC			     .BYTE $BC ; ¼
ROM:BA41 BD			     .BYTE $BD ; ½
ROM:BA42 BE			     .BYTE $BE ; ¾
ROM:BA43 BF			     .BYTE $BF ; ¿
ROM:BA44 CB			     .BYTE $CB ; Ë
ROM:BA45 CD			     .BYTE $CD ; Í
ROM:BA46 CE			     .BYTE $CE ; Î
ROM:BA47 CF			     .BYTE $CF ; Ï
ROM:BA48 D3			     .BYTE $D3 ; Ó
ROM:BA49 D6			     .BYTE $D6 ; Ö
ROM:BA4A D7			     .BYTE $D7 ; ×
ROM:BA4B D9			     .BYTE $D9 ; Ù
ROM:BA4C DA			     .BYTE $DA ; Ú
ROM:BA4D DB			     .BYTE $DB ; Û
ROM:BA4E DC			     .BYTE $DC ; Ü
ROM:BA4F DD			     .BYTE $DD ; Ý
ROM:BA50 DE			     .BYTE $DE ; Þ
ROM:BA51 DF			     .BYTE $DF ; ß
ROM:BA52 E5			     .BYTE $E5 ; å
ROM:BA53 E6			     .BYTE $E6 ; æ
ROM:BA54 E7			     .BYTE $E7 ; ç
ROM:BA55 E9			     .BYTE $E9 ; é
ROM:BA56 EA			     .BYTE $EA ; ê
ROM:BA57 EB			     .BYTE $EB ; ë
ROM:BA58 EC			     .BYTE $EC ; ì
ROM:BA59 ED			     .BYTE $ED ; í
ROM:BA5A EE			     .BYTE $EE ; î
ROM:BA5B EF			     .BYTE $EF ; ï
ROM:BA5C F2			     .BYTE $F2 ; ò
ROM:BA5D F3			     .BYTE $F3 ; ó
ROM:BA5E F4			     .BYTE $F4 ; ô
ROM:BA5F F5			     .BYTE $F5 ; õ
ROM:BA60 F6			     .BYTE $F6 ; ö
ROM:BA61 F7			     .BYTE $F7 ; ÷
ROM:BA62 F9			     .BYTE $F9 ; ù
ROM:BA63 FA			     .BYTE $FA ; ú
ROM:BA64 FB			     .BYTE $FB ; û
ROM:BA65 FC			     .BYTE $FC ; ü
ROM:BA66 FD			     .BYTE $FD ; ý
ROM:BA67 FE			     .BYTE $FE ; þ
ROM:BA68 FF			     .BYTE $FF
ROM:BA69 B3			     .BYTE $B3 ; ³
ROM:BA6A B3			     .BYTE $B3 ; ³
ROM:BA6B A0			     .BYTE $A0 ;  
ROM:BA6C E0			     .BYTE $E0 ; à
ROM:BA6D B3			     .BYTE $B3 ; ³
ROM:BA6E C3			     .BYTE $C3 ; Ã
ROM:BA6F C5			     .BYTE $C5 ; Å
ROM:BA70 B3			     .BYTE $B3 ; ³
ROM:BA71 A0			     .BYTE $A0 ;  
ROM:BA72 E0			     .BYTE $E0 ; à
ROM:BA73 B3			     .BYTE $B3 ; ³
ROM:BA74 C3			     .BYTE $C3 ; Ã
ROM:BA75 C5			     .BYTE $C5 ; Å
ROM:BA76 B3			     .BYTE $B3 ; ³
ROM:BA77 A0			     .BYTE $A0 ;  
ROM:BA78 E0			     .BYTE $E0 ; à
ROM:BA79 B3			     .BYTE $B3 ; ³
ROM:BA7A B3			     .BYTE $B3 ; ³
ROM:BA7B C5			     .BYTE $C5 ; Å
ROM:BA7C AA			     .BYTE $AA ; ª
ROM:BA7D A0			     .BYTE $A0 ;  
ROM:BA7E 82			     .BYTE $82 ; 
ROM:BA7F B3			     .BYTE $B3 ; ³
ROM:BA80 B3			     .BYTE $B3 ; ³
ROM:BA81 C5			     .BYTE $C5 ; Å
ROM:BA82 AA			     .BYTE $AA ; ª
ROM:BA83 A0			     .BYTE $A0 ;  
ROM:BA84 82			     .BYTE $82 ; 
ROM:BA85 C5			     .BYTE $C5 ; Å
ROM:BA86 B3			     .BYTE $B3 ; ³
ROM:BA87 B3			     .BYTE $B3 ; ³
ROM:BA88 AA			     .BYTE $AA ; ª
ROM:BA89 88			     .BYTE $88 ; 
ROM:BA8A 82			     .BYTE $82 ; 
ROM:BA8B C5			     .BYTE $C5 ; Å
ROM:BA8C B3			     .BYTE $B3 ; ³
ROM:BA8D B3			     .BYTE $B3 ; ³
ROM:BA8E AA			     .BYTE $AA ; ª
ROM:BA8F 88			     .BYTE $88 ; 
ROM:BA90 82			     .BYTE $82 ; 
ROM:BA91 C5			     .BYTE $C5 ; Å
ROM:BA92 C4			     .BYTE $C4 ; Ä
ROM:BA93 B3			     .BYTE $B3 ; ³
ROM:BA94 B0			     .BYTE $B0 ; °
ROM:BA95 88			     .BYTE $88 ; 
ROM:BA96 00			     .BYTE   0
ROM:BA97 01			     .BYTE   1
ROM:BA98 98			     .BYTE $98 ; 
ROM:BA99 99			     .BYTE $99 ; 
ROM:BA9A 02			     .BYTE   2
ROM:BA9B 03			     .BYTE   3
ROM:BA9C 9C			     .BYTE $9C ; 
ROM:BA9D 04			     .BYTE   4
ROM:BA9E 05			     .BYTE   5
ROM:BA9F 06			     .BYTE   6
ROM:BAA0 A0			     .BYTE $A0 ;  
ROM:BAA1 A1			     .BYTE $A1 ; ¡
ROM:BAA2 A2			     .BYTE $A2 ; ¢
ROM:BAA3 A3			     .BYTE $A3 ; £
ROM:BAA4 A4			     .BYTE $A4 ; ¤
ROM:BAA5 A5			     .BYTE $A5 ; ¥
ROM:BAA6 07			     .BYTE   7
ROM:BAA7 08			     .BYTE   8
ROM:BAA8 A8			     .BYTE $A8 ; ¨
ROM:BAA9 A9			     .BYTE $A9 ; ©
ROM:BAAA AA			     .BYTE $AA ; ª
ROM:BAAB 09			     .BYTE   9
ROM:BAAC 0A			     .BYTE  $A
ROM:BAAD 0B			     .BYTE  $B
ROM:BAAE 0C			     .BYTE  $C
ROM:BAAF 0D			     .BYTE  $D
ROM:BAB0 B0			     .BYTE $B0 ; °
ROM:BAB1 B1			     .BYTE $B1 ; ±
ROM:BAB2 0E			     .BYTE  $E
ROM:BAB3 0F			     .BYTE  $F
ROM:BAB4 10			     .BYTE $10
ROM:BAB5 11			     .BYTE $11
ROM:BAB6 12			     .BYTE $12
ROM:BAB7 13			     .BYTE $13
ROM:BAB8 B8			     .BYTE $B8 ; ¸
ROM:BAB9 14			     .BYTE $14
ROM:BABA 15			     .BYTE $15
ROM:BABB 16			     .BYTE $16
ROM:BABC 17			     .BYTE $17
ROM:BABD 18			     .BYTE $18
ROM:BABE 19			     .BYTE $19
ROM:BABF 1A			     .BYTE $1A
ROM:BAC0 C0			     .BYTE $C0 ; À
ROM:BAC1 C1			     .BYTE $C1 ; Á
ROM:BAC2 C2			     .BYTE $C2 ; Â
ROM:BAC3 C3			     .BYTE $C3 ; Ã
ROM:BAC4 C4			     .BYTE $C4 ; Ä
ROM:BAC5 C5			     .BYTE $C5 ; Å
ROM:BAC6 C6			     .BYTE $C6 ; Æ
ROM:BAC7 C7			     .BYTE $C7 ; Ç
ROM:BAC8 C8			     .BYTE $C8 ; È
ROM:BAC9 C9			     .BYTE $C9 ; É
ROM:BACA CA			     .BYTE $CA ; Ê
ROM:BACB 1B			     .BYTE $1B
ROM:BACC CC			     .BYTE $CC ; Ì
ROM:BACD 1C			     .BYTE $1C
ROM:BACE 1D			     .BYTE $1D
ROM:BACF 1E			     .BYTE $1E
ROM:BAD0 D0			     .BYTE $D0 ; Ð
ROM:BAD1 D1			     .BYTE $D1 ; Ñ
ROM:BAD2 D2			     .BYTE $D2 ; Ò
ROM:BAD3 1F			     .BYTE $1F
ROM:BAD4 D4			     .BYTE $D4 ; Ô
ROM:BAD5 D5			     .BYTE $D5 ; Õ
ROM:BAD6 20			     .BYTE $20
ROM:BAD7 21			     .BYTE $21 ; !
ROM:BAD8 D8			     .BYTE $D8 ; Ø
ROM:BAD9 22			     .BYTE $22 ; "
ROM:BADA 23			     .BYTE $23 ; #
ROM:BADB 24			     .BYTE $24 ; $
ROM:BADC 25			     .BYTE $25 ; %
ROM:BADD 26			     .BYTE $26 ; &
ROM:BADE 27			     .BYTE $27 ; '
ROM:BADF 28			     .BYTE $28 ; (
ROM:BAE0 E0			     .BYTE $E0 ; à
ROM:BAE1 E1			     .BYTE $E1 ; á
ROM:BAE2 E2			     .BYTE $E2 ; â
ROM:BAE3 E3			     .BYTE $E3 ; ã
ROM:BAE4 E4			     .BYTE $E4 ; ä
ROM:BAE5 29			     .BYTE $29 ; )
ROM:BAE6 2A			     .BYTE $2A ; *
ROM:BAE7 2B			     .BYTE $2B ; +
ROM:BAE8 E8			     .BYTE $E8 ; è
ROM:BAE9 2C			     .BYTE $2C ; ,
ROM:BAEA 2D			     .BYTE $2D ; -
ROM:BAEB 2E			     .BYTE $2E ; .
ROM:BAEC 2F			     .BYTE $2F ; /
ROM:BAED 30			     .BYTE $30 ; 0
ROM:BAEE 31			     .BYTE $31 ; 1
ROM:BAEF 32			     .BYTE $32 ; 2
ROM:BAF0 F0			     .BYTE $F0 ; ð
ROM:BAF1 F1			     .BYTE $F1 ; ñ
ROM:BAF2 33			     .BYTE $33 ; 3
ROM:BAF3 34			     .BYTE $34 ; 4
ROM:BAF4 35			     .BYTE $35 ; 5
ROM:BAF5 36			     .BYTE $36 ; 6
ROM:BAF6 37			     .BYTE $37 ; 7
ROM:BAF7 38			     .BYTE $38 ; 8
ROM:BAF8 F8			     .BYTE $F8 ; ø
ROM:BAF9 39			     .BYTE $39 ; 9
ROM:BAFA 3A			     .BYTE $3A ; :
ROM:BAFB 3B			     .BYTE $3B ; ;
ROM:BAFC 3C			     .BYTE $3C ; <
ROM:BAFD 3D			     .BYTE $3D ; =
ROM:BAFE 3E			     .BYTE $3E ; >
ROM:BAFF 3F			     .BYTE $3F ; ?
ROM:BB00 00			     .BYTE   0
ROM:BB01 04			     .BYTE   4
ROM:BB02 03			     .BYTE   3
ROM:BB03 00			     .BYTE   0
ROM:BB04 00			     .BYTE   0
ROM:BB05 00			     .BYTE   0
ROM:BB06 00			     .BYTE   0
ROM:BB07 00			     .BYTE   0
ROM:BB08 00			     .BYTE   0
ROM:BB09 00			     .BYTE   0
ROM:BB0A 00			     .BYTE   0
ROM:BB0B 00			     .BYTE   0
ROM:BB0C 00			     .BYTE   0
ROM:BB0D 00			     .BYTE   0
ROM:BB0E 00			     .BYTE   0
ROM:BB0F 00			     .BYTE   0
ROM:BB10 00			     .BYTE   0
ROM:BB11 00			     .BYTE   0
ROM:BB12 00			     .BYTE   0
ROM:BB13 00			     .BYTE   0
ROM:BB14 00			     .BYTE   0
ROM:BB15 00			     .BYTE   0
ROM:BB16 00			     .BYTE   0
ROM:BB17 00			     .BYTE   0
ROM:BB18 00			     .BYTE   0
ROM:BB19 00			     .BYTE   0
ROM:BB1A 00			     .BYTE   0
ROM:BB1B 00			     .BYTE   0
ROM:BB1C 00			     .BYTE   0
ROM:BB1D 00			     .BYTE   0
ROM:BB1E 00			     .BYTE   0
ROM:BB1F 00			     .BYTE   0
ROM:BB20 00			     .BYTE   0
ROM:BB21 00			     .BYTE   0
ROM:BB22 00			     .BYTE   0
ROM:BB23 00			     .BYTE   0
ROM:BB24 00			     .BYTE   0
ROM:BB25 00			     .BYTE   0
ROM:BB26 00			     .BYTE   0
ROM:BB27 00			     .BYTE   0
ROM:BB28 00			     .BYTE   0
ROM:BB29 00			     .BYTE   0
ROM:BB2A 00			     .BYTE   0
ROM:BB2B 00			     .BYTE   0
ROM:BB2C 00			     .BYTE   0
ROM:BB2D 00			     .BYTE   0
ROM:BB2E 00			     .BYTE   0
ROM:BB2F 00			     .BYTE   0
ROM:BB30 00			     .BYTE   0
ROM:BB31 00			     .BYTE   0
ROM:BB32 00			     .BYTE   0
ROM:BB33 00			     .BYTE   0
ROM:BB34 00			     .BYTE   0
ROM:BB35 00			     .BYTE   0
ROM:BB36 00			     .BYTE   0
ROM:BB37 00			     .BYTE   0
ROM:BB38 00			     .BYTE   0
ROM:BB39 00			     .BYTE   0
ROM:BB3A 00			     .BYTE   0
ROM:BB3B 00			     .BYTE   0
ROM:BB3C 00			     .BYTE   0
ROM:BB3D 00			     .BYTE   0
ROM:BB3E 00			     .BYTE   0
ROM:BB3F 00			     .BYTE   0
ROM:BB40 00			     .BYTE   0
ROM:BB41 00			     .BYTE   0
ROM:BB42 00			     .BYTE   0
ROM:BB43 00			     .BYTE   0
ROM:BB44 00			     .BYTE   0
ROM:BB45 00			     .BYTE   0
ROM:BB46 00			     .BYTE   0
ROM:BB47 00			     .BYTE   0
ROM:BB48 00			     .BYTE   0
ROM:BB49 00			     .BYTE   0
ROM:BB4A 00			     .BYTE   0
ROM:BB4B 00			     .BYTE   0
ROM:BB4C 00			     .BYTE   0
ROM:BB4D 00			     .BYTE   0
ROM:BB4E 00			     .BYTE   0
ROM:BB4F 00			     .BYTE   0
ROM:BB50 00			     .BYTE   0
ROM:BB51 00			     .BYTE   0
ROM:BB52 00			     .BYTE   0
ROM:BB53 00			     .BYTE   0
ROM:BB54 00			     .BYTE   0
ROM:BB55 00			     .BYTE   0
ROM:BB56 00			     .BYTE   0
ROM:BB57 00			     .BYTE   0
ROM:BB58 00			     .BYTE   0
ROM:BB59 00			     .BYTE   0
ROM:BB5A 00			     .BYTE   0
ROM:BB5B 00			     .BYTE   0
ROM:BB5C 00			     .BYTE   0
ROM:BB5D 00			     .BYTE   0
ROM:BB5E 00			     .BYTE   0
ROM:BB5F 00			     .BYTE   0
ROM:BB60 00			     .BYTE   0
ROM:BB61 00			     .BYTE   0
ROM:BB62 00			     .BYTE   0
ROM:BB63 00			     .BYTE   0
ROM:BB64 00			     .BYTE   0
ROM:BB65 00			     .BYTE   0
ROM:BB66 00			     .BYTE   0
ROM:BB67 00			     .BYTE   0
ROM:BB68 00			     .BYTE   0
ROM:BB69 00			     .BYTE   0
ROM:BB6A 00			     .BYTE   0
ROM:BB6B 00			     .BYTE   0
ROM:BB6C 00			     .BYTE   0
ROM:BB6D 00			     .BYTE   0
ROM:BB6E 00			     .BYTE   0
ROM:BB6F 00			     .BYTE   0
ROM:BB70 00			     .BYTE   0
ROM:BB71 00			     .BYTE   0
ROM:BB72 00			     .BYTE   0
ROM:BB73 00			     .BYTE   0
ROM:BB74 00			     .BYTE   0
ROM:BB75 00			     .BYTE   0
ROM:BB76 00			     .BYTE   0
ROM:BB77 00			     .BYTE   0
ROM:BB78 00			     .BYTE   0
ROM:BB79 00			     .BYTE   0
ROM:BB7A 00			     .BYTE   0
ROM:BB7B 00			     .BYTE   0
ROM:BB7C 00			     .BYTE   0
ROM:BB7D 00			     .BYTE   0
ROM:BB7E 00			     .BYTE   0
ROM:BB7F 00			     .BYTE   0
ROM:BB80 00			     .BYTE   0
ROM:BB81 00			     .BYTE   0
ROM:BB82 00			     .BYTE   0
ROM:BB83 00			     .BYTE   0
ROM:BB84 00			     .BYTE   0
ROM:BB85 00			     .BYTE   0
ROM:BB86 00			     .BYTE   0
ROM:BB87 00			     .BYTE   0
ROM:BB88 00			     .BYTE   0
ROM:BB89 00			     .BYTE   0
ROM:BB8A 00			     .BYTE   0
ROM:BB8B 00			     .BYTE   0
ROM:BB8C 00			     .BYTE   0
ROM:BB8D 00			     .BYTE   0
ROM:BB8E 00			     .BYTE   0
ROM:BB8F 00			     .BYTE   0
ROM:BB90 00			     .BYTE   0
ROM:BB91 00			     .BYTE   0
ROM:BB92 00			     .BYTE   0
ROM:BB93 00			     .BYTE   0
ROM:BB94 00			     .BYTE   0
ROM:BB95 00			     .BYTE   0
ROM:BB96 00			     .BYTE   0
ROM:BB97 00			     .BYTE   0
ROM:BB98 00			     .BYTE   0
ROM:BB99 00			     .BYTE   0
ROM:BB9A 00			     .BYTE   0
ROM:BB9B 00			     .BYTE   0
ROM:BB9C 00			     .BYTE   0
ROM:BB9D 00			     .BYTE   0
ROM:BB9E 00			     .BYTE   0
ROM:BB9F 00			     .BYTE   0
ROM:BBA0 00			     .BYTE   0
ROM:BBA1 00			     .BYTE   0
ROM:BBA2 00			     .BYTE   0
ROM:BBA3 00			     .BYTE   0
ROM:BBA4 00			     .BYTE   0
ROM:BBA5 00			     .BYTE   0
ROM:BBA6 00			     .BYTE   0
ROM:BBA7 00			     .BYTE   0
ROM:BBA8 00			     .BYTE   0
ROM:BBA9 00			     .BYTE   0
ROM:BBAA 00			     .BYTE   0
ROM:BBAB 00			     .BYTE   0
ROM:BBAC 00			     .BYTE   0
ROM:BBAD 00			     .BYTE   0
ROM:BBAE 00			     .BYTE   0
ROM:BBAF 00			     .BYTE   0
ROM:BBB0 00			     .BYTE   0
ROM:BBB1 00			     .BYTE   0
ROM:BBB2 00			     .BYTE   0
ROM:BBB3 00			     .BYTE   0
ROM:BBB4 00			     .BYTE   0
ROM:BBB5 00			     .BYTE   0
ROM:BBB6 00			     .BYTE   0
ROM:BBB7 00			     .BYTE   0
ROM:BBB8 00			     .BYTE   0
ROM:BBB9 00			     .BYTE   0
ROM:BBBA 00			     .BYTE   0
ROM:BBBB 00			     .BYTE   0
ROM:BBBC 00			     .BYTE   0
ROM:BBBD 00			     .BYTE   0
ROM:BBBE 00			     .BYTE   0
ROM:BBBF 00			     .BYTE   0
ROM:BBC0 00			     .BYTE   0
ROM:BBC1 00			     .BYTE   0
ROM:BBC2 00			     .BYTE   0
ROM:BBC3 00			     .BYTE   0
ROM:BBC4 00			     .BYTE   0
ROM:BBC5 00			     .BYTE   0
ROM:BBC6 00			     .BYTE   0
ROM:BBC7 00			     .BYTE   0
ROM:BBC8 00			     .BYTE   0
ROM:BBC9 00			     .BYTE   0
ROM:BBCA 00			     .BYTE   0
ROM:BBCB 00			     .BYTE   0
ROM:BBCC 00			     .BYTE   0
ROM:BBCD 00			     .BYTE   0
ROM:BBCE 00			     .BYTE   0
ROM:BBCF 00			     .BYTE   0
ROM:BBD0 00			     .BYTE   0
ROM:BBD1 00			     .BYTE   0
ROM:BBD2 00			     .BYTE   0
ROM:BBD3 00			     .BYTE   0
ROM:BBD4 00			     .BYTE   0
ROM:BBD5 00			     .BYTE   0
ROM:BBD6 00			     .BYTE   0
ROM:BBD7 00			     .BYTE   0
ROM:BBD8 00			     .BYTE   0
ROM:BBD9 00			     .BYTE   0
ROM:BBDA 00			     .BYTE   0
ROM:BBDB 00			     .BYTE   0
ROM:BBDC 00			     .BYTE   0
ROM:BBDD 00			     .BYTE   0
ROM:BBDE 00			     .BYTE   0
ROM:BBDF 00			     .BYTE   0
ROM:BBE0 00			     .BYTE   0
ROM:BBE1 00			     .BYTE   0
ROM:BBE2 00			     .BYTE   0
ROM:BBE3 00			     .BYTE   0
ROM:BBE4 00			     .BYTE   0
ROM:BBE5 00			     .BYTE   0
ROM:BBE6 00			     .BYTE   0
ROM:BBE7 00			     .BYTE   0
ROM:BBE8 00			     .BYTE   0
ROM:BBE9 00			     .BYTE   0
ROM:BBEA 00			     .BYTE   0
ROM:BBEB 00			     .BYTE   0
ROM:BBEC 00			     .BYTE   0
ROM:BBED 00			     .BYTE   0
ROM:BBEE 00			     .BYTE   0
ROM:BBEF 00			     .BYTE   0
ROM:BBF0 00			     .BYTE   0
ROM:BBF1 00			     .BYTE   0
ROM:BBF2 00			     .BYTE   0
ROM:BBF3 00			     .BYTE   0
ROM:BBF4 00			     .BYTE   0
ROM:BBF5 00			     .BYTE   0
ROM:BBF6 00			     .BYTE   0
ROM:BBF7 00			     .BYTE   0
ROM:BBF8 00			     .BYTE   0
ROM:BBF9 00			     .BYTE   0
ROM:BBFA 00			     .BYTE   0
ROM:BBFB 00			     .BYTE   0
ROM:BBFC 00			     .BYTE   0
ROM:BBFD 00			     .BYTE   0
ROM:BBFE 00			     .BYTE   0
ROM:BBFF 00			     .BYTE   0
ROM:BC00 02			     .BYTE 2
ROM:BC01 00			     .BYTE   0
ROM:BC02 00			     .BYTE   0
ROM:BC03 00			     .BYTE   0
ROM:BC04 00			     .BYTE   0
ROM:BC05 00			     .BYTE   0
ROM:BC06 00			     .BYTE   0
ROM:BC07 00			     .BYTE   0
ROM:BC08 00			     .BYTE   0
ROM:BC09 00			     .BYTE   0
ROM:BC0A 00			     .BYTE   0
ROM:BC0B 00			     .BYTE   0
ROM:BC0C 00			     .BYTE   0
ROM:BC0D 00			     .BYTE   0
ROM:BC0E 00			     .BYTE   0
ROM:BC0F 00			     .BYTE   0
ROM:BC10 00			     .BYTE   0
ROM:BC11 00			     .BYTE   0
ROM:BC12 00			     .BYTE   0
ROM:BC13 00			     .BYTE   0
ROM:BC14 00			     .BYTE   0
ROM:BC15 00			     .BYTE   0
ROM:BC16 00			     .BYTE   0
ROM:BC17 00			     .BYTE   0
ROM:BC18 00			     .BYTE   0
ROM:BC19 00			     .BYTE   0
ROM:BC1A 00			     .BYTE   0
ROM:BC1B 00			     .BYTE   0
ROM:BC1C 00			     .BYTE   0
ROM:BC1D 00			     .BYTE   0
ROM:BC1E 00			     .BYTE   0
ROM:BC1F 00			     .BYTE   0
ROM:BC20 00			     .BYTE   0
ROM:BC21 00			     .BYTE   0
ROM:BC22 00			     .BYTE   0
ROM:BC23 00			     .BYTE   0
ROM:BC24 00			     .BYTE   0
ROM:BC25 00			     .BYTE   0
ROM:BC26 00			     .BYTE   0
ROM:BC27 00			     .BYTE   0
ROM:BC28 00			     .BYTE   0
ROM:BC29 00			     .BYTE   0
ROM:BC2A 00			     .BYTE   0
ROM:BC2B 00			     .BYTE   0
ROM:BC2C 00			     .BYTE   0
ROM:BC2D 00			     .BYTE   0
ROM:BC2E 00			     .BYTE   0
ROM:BC2F 00			     .BYTE   0
ROM:BC30 00			     .BYTE   0
ROM:BC31 00			     .BYTE   0
ROM:BC32 00			     .BYTE   0
ROM:BC33 00			     .BYTE   0
ROM:BC34 00			     .BYTE   0
ROM:BC35 00			     .BYTE   0
ROM:BC36 00			     .BYTE   0
ROM:BC37 00			     .BYTE   0
ROM:BC38 00			     .BYTE   0
ROM:BC39 00			     .BYTE   0
ROM:BC3A 00			     .BYTE   0
ROM:BC3B 00			     .BYTE   0
ROM:BC3C 00			     .BYTE   0
ROM:BC3D 00			     .BYTE   0
ROM:BC3E 00			     .BYTE   0
ROM:BC3F 00			     .BYTE   0
ROM:BC40 00			     .BYTE   0
ROM:BC41 00			     .BYTE   0
ROM:BC42 00			     .BYTE   0
ROM:BC43 00			     .BYTE   0
ROM:BC44 00			     .BYTE   0
ROM:BC45 00			     .BYTE   0
ROM:BC46 00			     .BYTE   0
ROM:BC47 00			     .BYTE   0
ROM:BC48 00			     .BYTE   0
ROM:BC49 00			     .BYTE   0
ROM:BC4A 00			     .BYTE   0
ROM:BC4B 00			     .BYTE   0
ROM:BC4C 00			     .BYTE   0
ROM:BC4D 00			     .BYTE   0
ROM:BC4E 00			     .BYTE   0
ROM:BC4F 00			     .BYTE   0
ROM:BC50 00			     .BYTE   0
ROM:BC51 00			     .BYTE   0
ROM:BC52 00			     .BYTE   0
ROM:BC53 00			     .BYTE   0
ROM:BC54 00			     .BYTE   0
ROM:BC55 00			     .BYTE   0
ROM:BC56	     ; ---------------------------------------------------------------------------
ROM:BC56 38			     SEC
ROM:BC57 BD 8D C0		     LDA     $C08D,X
ROM:BC5A BD 8E C0		     LDA     $C08E,X
ROM:BC5D 30 5E			     BMI     loc_BCBD
ROM:BC5F A9 FF			     LDA     #$FF
ROM:BC61 9D 8F C0		     STA     $C08F,X
ROM:BC64 DD 8C C0		     CMP     $C08C,X
ROM:BC67 48			     PHA
ROM:BC68 68			     PLA
ROM:BC69
ROM:BC69	     loc_BC69:					     ; CODE XREF: ROM:BC77j
ROM:BC69 20 C3 BC		     JSR     nullsub_1
ROM:BC6C 20 C3 BC		     JSR     nullsub_1
ROM:BC6F 9D 8D C0		     STA     $C08D,X
ROM:BC72 DD 8C C0		     CMP     $C08C,X
ROM:BC75 EA			     NOP
ROM:BC76 88			     DEY
ROM:BC77 D0 F0			     BNE     loc_BC69
ROM:BC79 A9 D5			     LDA     #$D5 ; 'Õ'
ROM:BC7B 20 D5 BC		     JSR     sub_BCD5
ROM:BC7E A9 AA			     LDA     #$AA ; 'ª'
ROM:BC80 20 D5 BC		     JSR     sub_BCD5
ROM:BC83 A9 96			     LDA     #$96 ; ''
ROM:BC85 20 D5 BC		     JSR     sub_BCD5
ROM:BC88 A5 41			     LDA     $41
ROM:BC8A 20 C4 BC		     JSR     sub_BCC4
ROM:BC8D A5 44			     LDA     $44
ROM:BC8F 20 C4 BC		     JSR     sub_BCC4
ROM:BC92 A5 3F			     LDA     $3F
ROM:BC94 20 C4 BC		     JSR     sub_BCC4
ROM:BC97 A5 41			     LDA     $41
ROM:BC99 45 44			     EOR     $44
ROM:BC9B 45 3F			     EOR     $3F
ROM:BC9D 48			     PHA
ROM:BC9E 4A			     LSR     A
ROM:BC9F 05 3E			     ORA     $3E
ROM:BCA1 9D 8D C0		     STA     $C08D,X
ROM:BCA4 BD 8C C0		     LDA     $C08C,X
ROM:BCA7 68			     PLA
ROM:BCA8 09 AA			     ORA     #$AA ; 'ª'
ROM:BCAA 20 D4 BC		     JSR     sub_BCD4
ROM:BCAD A9 DE			     LDA     #$DE ; 'Þ'
ROM:BCAF 20 D5 BC		     JSR     sub_BCD5
ROM:BCB2 A9 AA			     LDA     #$AA ; 'ª'
ROM:BCB4 20 D5 BC		     JSR     sub_BCD5
ROM:BCB7 A9 EB			     LDA     #$EB ; 'ë'
ROM:BCB9 20 D5 BC		     JSR     sub_BCD5
ROM:BCBC 18			     CLC
ROM:BCBD
ROM:BCBD	     loc_BCBD:					     ; CODE XREF: ROM:BC5Dj
ROM:BCBD BD 8E C0		     LDA     $C08E,X
ROM:BCC0 BD 8C C0		     LDA     $C08C,X
ROM:BCC3
ROM:BCC3	     ; =============== S U B R O U T I N E =======================================
ROM:BCC3
ROM:BCC3
ROM:BCC3	     nullsub_1:					     ; CODE XREF: ROM:loc_BC69p
ROM:BCC3							     ; ROM:BC6Cp
ROM:BCC3 60			     RTS
ROM:BCC3	     ; End of function nullsub_1
ROM:BCC3
ROM:BCC4
ROM:BCC4	     ; =============== S U B R O U T I N E =======================================
ROM:BCC4
ROM:BCC4
ROM:BCC4	     sub_BCC4:					     ; CODE XREF: ROM:BC8Ap
ROM:BCC4							     ; ROM:BC8Fp ...
ROM:BCC4 48			     PHA
ROM:BCC5 4A			     LSR     A
ROM:BCC6 05 3E			     ORA     $3E
ROM:BCC8 9D 8D C0		     STA     $C08D,X
ROM:BCCB DD 8C C0		     CMP     $C08C,X
ROM:BCCE 68			     PLA
ROM:BCCF EA			     NOP
ROM:BCD0 EA			     NOP
ROM:BCD1 EA			     NOP
ROM:BCD2 09 AA			     ORA     #$AA ; 'ª'
ROM:BCD2	     ; End of function sub_BCC4
ROM:BCD2
ROM:BCD4
ROM:BCD4	     ; =============== S U B R O U T I N E =======================================
ROM:BCD4
ROM:BCD4
ROM:BCD4	     sub_BCD4:					     ; CODE XREF: ROM:BCAAp
ROM:BCD4 EA			     NOP
ROM:BCD4	     ; End of function sub_BCD4
ROM:BCD4
ROM:BCD5
ROM:BCD5	     ; =============== S U B R O U T I N E =======================================
ROM:BCD5
ROM:BCD5
ROM:BCD5	     sub_BCD5:					     ; CODE XREF: ROM:BC7Bp
ROM:BCD5							     ; ROM:BC80p ...
ROM:BCD5 EA			     NOP
ROM:BCD6 48			     PHA
ROM:BCD7 68			     PLA
ROM:BCD8 9D 8D C0		     STA     $C08D,X
ROM:BCDB DD 8C C0		     CMP     $C08C,X
ROM:BCDE 60			     RTS
ROM:BCDE	     ; End of function sub_BCD5
ROM:BCDE
ROM:BCDE	     ; ---------------------------------------------------------------------------
ROM:BCDF 88			     .BYTE $88 ; 
ROM:BCE0 A5			     .BYTE $A5 ; ¥
ROM:BCE1 E8			     .BYTE $E8 ; è
ROM:BCE2 91			     .BYTE $91 ; 
ROM:BCE3 A0			     .BYTE $A0 ;  
ROM:BCE4 94			     .BYTE $94 ; 
ROM:BCE5 88			     .BYTE $88 ; 
ROM:BCE6 96			     .BYTE $96 ; 
ROM:BCE7 E8			     .BYTE $E8 ; è
ROM:BCE8 91			     .BYTE $91 ; 
ROM:BCE9 A0			     .BYTE $A0 ;  
ROM:BCEA 94			     .BYTE $94 ; 
ROM:BCEB 88			     .BYTE $88 ; 
ROM:BCEC 96			     .BYTE $96 ; 
ROM:BCED 91			     .BYTE $91 ; 
ROM:BCEE 91			     .BYTE $91 ; 
ROM:BCEF C8			     .BYTE $C8 ; È
ROM:BCF0 94			     .BYTE $94 ; 
ROM:BCF1 D0			     .BYTE $D0 ; Ð
ROM:BCF2 96			     .BYTE $96 ; 
ROM:BCF3 91			     .BYTE $91 ; 
ROM:BCF4 91			     .BYTE $91 ; 
ROM:BCF5 C8			     .BYTE $C8 ; È
ROM:BCF6 94			     .BYTE $94 ; 
ROM:BCF7 D0			     .BYTE $D0 ; Ð
ROM:BCF8 96			     .BYTE $96 ; 
ROM:BCF9 91			     .BYTE $91 ; 
ROM:BCFA A3			     .BYTE $A3 ; £
ROM:BCFB C8			     .BYTE $C8 ; È
ROM:BCFC A0			     .BYTE $A0 ;  
ROM:BCFD A5			     .BYTE $A5 ; ¥
ROM:BCFE 85			     .BYTE $85 ; 
ROM:BCFF A4			     .BYTE $A4 ; ¤
ROM:BD00	     ; ---------------------------------------------------------------------------
ROM:BD00
ROM:BD00	     determine_hardware:			     ; CODE XREF: ROM:B7B7p
ROM:BD00 84 48			     STY     $48
ROM:BD02 85 49			     STA     $49
ROM:BD04 A0 02			     LDY     #2
ROM:BD06 8C F8 06		     STY     $6F8
ROM:BD09 A0 04			     LDY     #4
ROM:BD0B 8C F8 04		     STY     $4F8
ROM:BD0E AE E9 B7		     LDX     $B7E9
ROM:BD11 BD 8E C0		     LDA     $C08E,X		     ; LC RAM bank1, Read ROM instead of RAM, WR-protect RAM
ROM:BD14 BD 8C C0		     LDA     $C08C,X		     ; LC RAM bank1, Read and WR-protect RAM
ROM:BD17 A0 08			     LDY     #8
ROM:BD19
ROM:BD19	     loc_BD19:					     ; CODE XREF: ROM:BD29j
ROM:BD19 BD 8C C0		     LDA     $C08C,X		     ; LC RAM bank1, Read and WR-protect RAM
ROM:BD1C 48			     PHA
ROM:BD1D 68			     PLA
ROM:BD1E 48			     PHA
ROM:BD1F 68			     PLA
ROM:BD20 8E F8 05		     STX     $5F8
ROM:BD23 DD 8C C0		     CMP     $C08C,X		     ; LC RAM bank1, Read and WR-protect RAM
ROM:BD26 D0 03			     BNE     loc_BD2B
ROM:BD28 88			     DEY
ROM:BD29 D0 EE			     BNE     loc_BD19
ROM:BD2B
ROM:BD2B	     loc_BD2B:					     ; CODE XREF: ROM:BD26j
ROM:BD2B 08			     PHP
ROM:BD2C BD 89 C0		     LDA     $C089,X		     ; LC RAM bank1, Read ROM instead of RAM, two or more successive reads WR-enables RAM
ROM:BD2F A0 06			     LDY     #6
ROM:BD31
ROM:BD31	     loc_BD31:					     ; CODE XREF: ROM:BD39j
ROM:BD31 B1 48			     LDA     ($48),Y
ROM:BD33 99 36 00		     STA     $36,Y
ROM:BD36 C8			     INY
ROM:BD37 C0 0A			     CPY     #$A
ROM:BD39 D0 F6			     BNE     loc_BD31
ROM:BD3B A0 03			     LDY     #3
ROM:BD3D B1 3C			     LDA     ($3C),Y
ROM:BD3F 85 47			     STA     $47
ROM:BD41 A0 02			     LDY     #2
ROM:BD43 B1 48			     LDA     ($48),Y
ROM:BD45 A0 10			     LDY     #$10
ROM:BD47 D1 48			     CMP     ($48),Y
ROM:BD49 F0 06			     BEQ     loc_BD51
ROM:BD4B 91 48			     STA     ($48),Y
ROM:BD4D 28			     PLP
ROM:BD4E A0 00			     LDY     #0
ROM:BD50 08			     PHP
ROM:BD51
ROM:BD51	     loc_BD51:					     ; CODE XREF: ROM:BD49j
ROM:BD51 6A			     ROR     A
ROM:BD52 90 05			     BCC     loc_BD59
ROM:BD54 BD 8A C0		     LDA     $C08A,X		     ; LC RAM bank1, Read ROM instead of RAM, WR-protect RAM
ROM:BD57 B0 03			     BCS     loc_BD5C
ROM:BD59
ROM:BD59	     loc_BD59:					     ; CODE XREF: ROM:BD52j
ROM:BD59 BD 8B C0		     LDA     $C08B,X		     ; LC RAM bank1, Read RAM, two or more successive reads WR-enables RAM
ROM:BD5C
ROM:BD5C	     loc_BD5C:					     ; CODE XREF: ROM:BD57j
ROM:BD5C 66 35			     ROR     $35
ROM:BD5E 28			     PLP
ROM:BD5F 08			     PHP
ROM:BD60 D0 0B			     BNE     loc_BD6D
ROM:BD62 A0 07			     LDY     #7
ROM:BD64
ROM:BD64	     loc_BD64:					     ; CODE XREF: ROM:BD68j
ROM:BD64 20 00 BA		     JSR     sub_BA00
ROM:BD67 88			     DEY
ROM:BD68 D0 FA			     BNE     loc_BD64
ROM:BD6A AE F8 05		     LDX     $5F8
ROM:BD6D
ROM:BD6D	     loc_BD6D:					     ; CODE XREF: ROM:BD60j
ROM:BD6D A0 04			     LDY     #4
ROM:BD6F B1 48			     LDA     ($48),Y
ROM:BD71 20 5A BE		     JSR     sub_BE5A
ROM:BD74 28			     PLP
ROM:BD75 D0 34			     BNE     loc_BDAB
ROM:BD77 EA			     NOP
ROM:BD78 EA			     NOP
ROM:BD79 EA			     NOP
ROM:BD7A EA			     NOP
ROM:BD7B AD F4 B7		     LDA     $B7F4
ROM:BD7E C9 01			     CMP     #1
ROM:BD80 F0 29			     BEQ     loc_BDAB
ROM:BD82 EA			     NOP
ROM:BD83 EA			     NOP
ROM:BD84 EA			     NOP
ROM:BD85 EA			     NOP
ROM:BD86 EA			     NOP
ROM:BD87 EA			     NOP
ROM:BD88 EA			     NOP
ROM:BD89 EA			     NOP
ROM:BD8A EA			     NOP
ROM:BD8B EA			     NOP
ROM:BD8C EA			     NOP
ROM:BD8D EA			     NOP
ROM:BD8E EA			     NOP
ROM:BD8F EA			     NOP
ROM:BD90 EA			     NOP
ROM:BD91 EA			     NOP
ROM:BD92 EA			     NOP
ROM:BD93 EA			     NOP
ROM:BD94 EA			     NOP
ROM:BD95 EA			     NOP
ROM:BD96 EA			     NOP
ROM:BD97 EA			     NOP
ROM:BD98 EA			     NOP
ROM:BD99 EA			     NOP
ROM:BD9A EA			     NOP
ROM:BD9B EA			     NOP
ROM:BD9C EA			     NOP
ROM:BD9D EA			     NOP
ROM:BD9E
ROM:BD9E	     loc_BD9E:					     ; CODE XREF: ROM:BDA5j
ROM:BD9E							     ; ROM:BDA9j
ROM:BD9E A0 12			     LDY     #$12
ROM:BDA0
ROM:BDA0	     loc_BDA0:					     ; CODE XREF: ROM:BDA1j
ROM:BDA0 88			     DEY
ROM:BDA1 D0 FD			     BNE     loc_BDA0
ROM:BDA3 E6 46			     INC     $46
ROM:BDA5 D0 F7			     BNE     loc_BD9E
ROM:BDA7 E6 47			     INC     $47
ROM:BDA9 D0 F3			     BNE     loc_BD9E
ROM:BDAB
ROM:BDAB	     loc_BDAB:					     ; CODE XREF: ROM:BD75j
ROM:BDAB							     ; ROM:BD80j
ROM:BDAB A0 0C			     LDY     #$C
ROM:BDAD B1 48			     LDA     ($48),Y
ROM:BDAF F0 5A			     BEQ     loc_BE0B
ROM:BDB1 C9 04			     CMP     #4
ROM:BDB3 F0 58			     BEQ     loc_BE0D
ROM:BDB5 6A			     ROR     A
ROM:BDB6 08			     PHP
ROM:BDB7 B0 03			     BCS     loc_BDBC
ROM:BDB9 20 00 B8		     JSR     sub_B800
ROM:BDBC
ROM:BDBC	     loc_BDBC:					     ; CODE XREF: ROM:BDB7j
ROM:BDBC							     ; ROM:BDEAj
ROM:BDBC A0 30			     LDY     #$30 ; '0'
ROM:BDBE 8C 78 05		     STY     $578
ROM:BDC1
ROM:BDC1	     loc_BDC1:					     ; CODE XREF: ROM:BDCCj
ROM:BDC1 AE F8 05		     LDX     $5F8
ROM:BDC4 20 44 B9		     JSR     sub_B944
ROM:BDC7 90 24			     BCC     loc_BDED
ROM:BDC9
ROM:BDC9	     loc_BDC9:					     ; CODE XREF: ROM:BE30j
ROM:BDC9							     ; ROM:BE39j
ROM:BDC9 CE 78 05		     DEC     $578
ROM:BDCC 10 F3			     BPL     loc_BDC1
ROM:BDCE
ROM:BDCE	     loc_BDCE:					     ; CODE XREF: ROM:BE02j
ROM:BDCE AD 78 04		     LDA     $478
ROM:BDD1 48			     PHA
ROM:BDD2 A9 60			     LDA     #$60 ; '`'
ROM:BDD4 20 95 BE		     JSR     sub_BE95
ROM:BDD7 CE F8 06		     DEC     $6F8
ROM:BDDA F0 28			     BEQ     loc_BE04
ROM:BDDC A9 04			     LDA     #4
ROM:BDDE 8D F8 04		     STA     $4F8
ROM:BDE1 A9 00			     LDA     #0
ROM:BDE3 20 5A BE		     JSR     sub_BE5A
ROM:BDE6 68			     PLA
ROM:BDE7
ROM:BDE7	     loc_BDE7:					     ; CODE XREF: ROM:BE00j
ROM:BDE7 20 5A BE		     JSR     sub_BE5A
ROM:BDEA 4C BC BD		     JMP     loc_BDBC
ROM:BDED	     ; ---------------------------------------------------------------------------
ROM:BDED
ROM:BDED	     loc_BDED:					     ; CODE XREF: ROM:BDC7j
ROM:BDED A4 2E			     LDY     $2E
ROM:BDEF CC 78 04		     CPY     $478
ROM:BDF2 F0 1C			     BEQ     loc_BE10
ROM:BDF4 AD 78 04		     LDA     $478
ROM:BDF7 48			     PHA
ROM:BDF8 98			     TYA
ROM:BDF9 20 95 BE		     JSR     sub_BE95
ROM:BDFC 68			     PLA
ROM:BDFD CE F8 04		     DEC     $4F8
ROM:BE00 D0 E5			     BNE     loc_BDE7
ROM:BE02 F0 CA			     BEQ     loc_BDCE
ROM:BE04
ROM:BE04	     loc_BE04:					     ; CODE XREF: ROM:BDDAj
ROM:BE04 68			     PLA
ROM:BE05 A9 40			     LDA     #$40 ; '@'
ROM:BE07
ROM:BE07	     loc_BE07:					     ; CODE XREF: ROM:BE24j
ROM:BE07 28			     PLP
ROM:BE08 4C 48 BE		     JMP     loc_BE47+1
ROM:BE0B	     ; ---------------------------------------------------------------------------
ROM:BE0B
ROM:BE0B	     loc_BE0B:					     ; CODE XREF: ROM:BDAFj
ROM:BE0B F0 39			     BEQ     loc_BE46
ROM:BE0D
ROM:BE0D	     loc_BE0D:					     ; CODE XREF: ROM:BDB3j
ROM:BE0D 4C 00 8E		     JMP     loc_8E00
ROM:BE10	     ; ---------------------------------------------------------------------------
ROM:BE10
ROM:BE10	     loc_BE10:					     ; CODE XREF: ROM:BDF2j
ROM:BE10 A0 03			     LDY     #3
ROM:BE12 B1 48			     LDA     ($48),Y
ROM:BE14 48			     PHA
ROM:BE15 A5 2F			     LDA     $2F
ROM:BE17 A0 0E			     LDY     #$E
ROM:BE19 91 48			     STA     ($48),Y
ROM:BE1B 68			     PLA
ROM:BE1C F0 08			     BEQ     loc_BE26
ROM:BE1E C5 2F			     CMP     $2F
ROM:BE20 F0 04			     BEQ     loc_BE26
ROM:BE22 A9 20			     LDA     #$20 ; ' '
ROM:BE24 D0 E1			     BNE     loc_BE07
ROM:BE26
ROM:BE26	     loc_BE26:					     ; CODE XREF: ROM:BE1Cj
ROM:BE26							     ; ROM:BE20j
ROM:BE26 A0 05			     LDY     #5
ROM:BE28 B1 48			     LDA     ($48),Y
ROM:BE2A A8			     TAY
ROM:BE2B B9 B8 BF		     LDA     $BFB8,Y
ROM:BE2E C5 2D			     CMP     $2D
ROM:BE30 D0 97			     BNE     loc_BDC9
ROM:BE32 28			     PLP
ROM:BE33 90 1C			     BCC     loc_BE51
ROM:BE35 20 DC B8		     JSR     sub_B8DC
ROM:BE38 08			     PHP
ROM:BE39 B0 8E			     BCS     loc_BDC9
ROM:BE3B 28			     PLP
ROM:BE3C A2 00			     LDX     #0
ROM:BE3E 86 26			     STX     $26
ROM:BE40 20 C2 B8		     JSR     sub_B8C2
ROM:BE43 AE F8 05		     LDX     $5F8
ROM:BE46
ROM:BE46	     loc_BE46:					     ; CODE XREF: ROM:loc_BE0Bj
ROM:BE46							     ; ROM:BE54j
ROM:BE46 18			     CLC
ROM:BE47
ROM:BE47	     loc_BE47:					     ; CODE XREF: ROM:BE08j
ROM:BE47							     ; ROM:BE58j
ROM:BE47 24 38			     BIT     $38
ROM:BE49 A0 0D			     LDY     #$D
ROM:BE4B 91 48			     STA     ($48),Y
ROM:BE4D BD 88 C0		     LDA     $C088,X
ROM:BE50 60			     RTS
ROM:BE51	     ; ---------------------------------------------------------------------------
ROM:BE51
ROM:BE51	     loc_BE51:					     ; CODE XREF: ROM:BE33j
ROM:BE51 20 2A B8		     JSR     sub_B82A
ROM:BE54 90 F0			     BCC     loc_BE46
ROM:BE56 A9 10			     LDA     #$10
ROM:BE58 B0 EE			     BCS     loc_BE47+1
ROM:BE5A
ROM:BE5A	     ; =============== S U B R O U T I N E =======================================
ROM:BE5A
ROM:BE5A
ROM:BE5A	     sub_BE5A:					     ; CODE XREF: ROM:BD71p
ROM:BE5A							     ; ROM:BDE3p ...
ROM:BE5A 48			     PHA
ROM:BE5B A0 01			     LDY     #1
ROM:BE5D B1 3C			     LDA     ($3C),Y
ROM:BE5F 6A			     ROR     A
ROM:BE60 68			     PLA
ROM:BE61 90 08			     BCC     sub_BE6B
ROM:BE63 0A			     ASL     A
ROM:BE64 20 6B BE		     JSR     sub_BE6B
ROM:BE67 4E 78 04		     LSR     $478
ROM:BE6A 60			     RTS
ROM:BE6A	     ; End of function sub_BE5A
ROM:BE6A
ROM:BE6B
ROM:BE6B	     ; =============== S U B R O U T I N E =======================================
ROM:BE6B
ROM:BE6B
ROM:BE6B	     sub_BE6B:					     ; CODE XREF: sub_BE5A+7j
ROM:BE6B							     ; sub_BE5A+Ap
ROM:BE6B 85 2A			     STA     $2A
ROM:BE6D 20 8E BE		     JSR     sub_BE8E
ROM:BE70 B9 78 04		     LDA     $478,Y
ROM:BE73 24 35			     BIT     $35
ROM:BE75 30 03			     BMI     loc_BE7A
ROM:BE77 B9 F8 04		     LDA     $4F8,Y
ROM:BE7A
ROM:BE7A	     loc_BE7A:					     ; CODE XREF: sub_BE6B+Aj
ROM:BE7A 8D 78 04		     STA     $478
ROM:BE7D A5 2A			     LDA     $2A
ROM:BE7F 24 35			     BIT     $35
ROM:BE81 30 05			     BMI     loc_BE88
ROM:BE83 99 F8 04		     STA     $4F8,Y
ROM:BE86 10 03			     BPL     loc_BE8B
ROM:BE88
ROM:BE88	     loc_BE88:					     ; CODE XREF: sub_BE6B+16j
ROM:BE88 99 78 04		     STA     $478,Y
ROM:BE8B
ROM:BE8B	     loc_BE8B:					     ; CODE XREF: sub_BE6B+1Bj
ROM:BE8B 4C A0 B9		     JMP     sub_B9A0
ROM:BE8B	     ; End of function sub_BE6B
ROM:BE8B
ROM:BE8E
ROM:BE8E	     ; =============== S U B R O U T I N E =======================================
ROM:BE8E
ROM:BE8E
ROM:BE8E	     sub_BE8E:					     ; CODE XREF: sub_BE6B+2p
ROM:BE8E							     ; sub_BE95+8p
ROM:BE8E 8A			     TXA
ROM:BE8F 4A			     LSR     A
ROM:BE90 4A			     LSR     A
ROM:BE91 4A			     LSR     A
ROM:BE92 4A			     LSR     A
ROM:BE93 A8			     TAY
ROM:BE94 60			     RTS
ROM:BE94	     ; End of function sub_BE8E
ROM:BE94
ROM:BE95
ROM:BE95	     ; =============== S U B R O U T I N E =======================================
ROM:BE95
ROM:BE95
ROM:BE95	     sub_BE95:					     ; CODE XREF: ROM:BDD4p
ROM:BE95							     ; ROM:BDF9p
ROM:BE95 48			     PHA
ROM:BE96 A0 02			     LDY     #2
ROM:BE98 B1 48			     LDA     ($48),Y
ROM:BE9A 6A			     ROR     A
ROM:BE9B 66 35			     ROR     $35
ROM:BE9D 20 8E BE		     JSR     sub_BE8E
ROM:BEA0 68			     PLA
ROM:BEA1 0A			     ASL     A
ROM:BEA2 24 35			     BIT     $35
ROM:BEA4 30 05			     BMI     loc_BEAB
ROM:BEA6 99 F8 04		     STA     $4F8,Y
ROM:BEA9 10 03			     BPL     locret_BEAE
ROM:BEAB
ROM:BEAB	     loc_BEAB:					     ; CODE XREF: sub_BE95+Fj
ROM:BEAB 99 78 04		     STA     $478,Y
ROM:BEAE
ROM:BEAE	     locret_BEAE:				     ; CODE XREF: sub_BE95+14j
ROM:BEAE 60			     RTS
ROM:BEAE	     ; End of function sub_BE95
ROM:BEAE
ROM:BEAF	     ; ---------------------------------------------------------------------------
ROM:BEAF
ROM:BEAF	     loc_BEAF:					     ; CODE XREF: ROM:8E1Bj
ROM:BEAF A0 03			     LDY     #3
ROM:BEB1 B1 48			     LDA     ($48),Y
ROM:BEB3 85 41			     STA     $41
ROM:BEB5 A9 AA			     LDA     #$AA ; 'ª'
ROM:BEB7 85 3E			     STA     $3E
ROM:BEB9 A0 56			     LDY     #$56 ; 'V'
ROM:BEBB A9 00			     LDA     #0
ROM:BEBD 85 44			     STA     $44
ROM:BEBF 99 FF BB		     STA     $BBFF,Y
ROM:BEC2 88			     DEY
ROM:BEC2	     ; ---------------------------------------------------------------------------
ROM:BEC3 D0			     .BYTE $D0 ; Ð
ROM:BEC4 FA			     .BYTE $FA
ROM:BEC5 99			     .BYTE $99 ; 
ROM:BEC6 00			     .BYTE   0
ROM:BEC7 BB			     .BYTE $BB ; »
ROM:BEC8 88			     .BYTE $88 ; 
ROM:BEC9 D0			     .BYTE $D0 ; Ð
ROM:BECA FA			     .BYTE $FA ; ú
ROM:BECB A9			     .BYTE $A9 ; ©
ROM:BECC 00			     .BYTE   0
ROM:BECD 20			     .BYTE $20
ROM:BECE 95			     .BYTE $95 ; 
ROM:BECF BE			     .BYTE $BE ; ¾
ROM:BED0 A9			     .BYTE $A9 ; ©
ROM:BED1 28			     .BYTE $28 ; (
ROM:BED2 85			     .BYTE $85 ; 
ROM:BED3 45			     .BYTE $45 ; E
ROM:BED4 A5			     .BYTE $A5 ; ¥
ROM:BED5 44			     .BYTE $44 ; D
ROM:BED6 20			     .BYTE $20
ROM:BED7 5A			     .BYTE $5A ; Z
ROM:BED8 BE			     .BYTE $BE ; ¾
ROM:BED9 20			     .BYTE $20
ROM:BEDA 0D			     .BYTE  $D
ROM:BEDB BF			     .BYTE $BF ; ¿
ROM:BEDC A9			     .BYTE $A9 ; ©
ROM:BEDD 08			     .BYTE   8
ROM:BEDE B0			     .BYTE $B0 ; °
ROM:BEDF 24			     .BYTE $24 ; $
ROM:BEE0 A9			     .BYTE $A9 ; ©
ROM:BEE1 30			     .BYTE $30 ; 0
ROM:BEE2 8D			     .BYTE $8D ; 
ROM:BEE3 78			     .BYTE $78 ; x
ROM:BEE4 05			     .BYTE   5
ROM:BEE5 38			     .BYTE $38 ; 8
ROM:BEE6 CE			     .BYTE $CE ; Î
ROM:BEE7 78			     .BYTE $78 ; x
ROM:BEE8 05			     .BYTE   5
ROM:BEE9 F0			     .BYTE $F0 ; ð
ROM:BEEA 19			     .BYTE $19
ROM:BEEB 20			     .BYTE $20
ROM:BEEC 44			     .BYTE $44 ; D
ROM:BEED B9			     .BYTE $B9 ; ¹
ROM:BEEE B0			     .BYTE $B0 ; °
ROM:BEEF F5			     .BYTE $F5 ; õ
ROM:BEF0 A5			     .BYTE $A5 ; ¥
ROM:BEF1 2D			     .BYTE $2D ; -
ROM:BEF2 D0			     .BYTE $D0 ; Ð
ROM:BEF3 F1			     .BYTE $F1 ; ñ
ROM:BEF4 20			     .BYTE $20
ROM:BEF5 DC			     .BYTE $DC ; Ü
ROM:BEF6 B8			     .BYTE $B8 ; ¸
ROM:BEF7 B0			     .BYTE $B0 ; °
ROM:BEF8 EC			     .BYTE $EC ; ì
ROM:BEF9 E6			     .BYTE $E6 ; æ
ROM:BEFA 44			     .BYTE $44 ; D
ROM:BEFB A5			     .BYTE $A5 ; ¥
ROM:BEFC 44			     .BYTE $44 ; D
ROM:BEFD C9			     .BYTE $C9 ; É
ROM:BEFE 23			     .BYTE $23 ; #
ROM:BEFF 90			     .BYTE $90 ; 
ROM:BF00 D3			     .BYTE $D3 ; Ó
ROM:BF01 18			     .BYTE $18
ROM:BF02 90			     .BYTE $90 ; 
ROM:BF03 05			     .BYTE   5
ROM:BF04 A0			     .BYTE $A0 ;  
ROM:BF05 0D			     .BYTE  $D
ROM:BF06 91			     .BYTE $91 ; 
ROM:BF07 48			     .BYTE $48 ; H
ROM:BF08 38			     .BYTE $38 ; 8
ROM:BF09 BD			     .BYTE $BD ; ½
ROM:BF0A 88			     .BYTE $88 ; 
ROM:BF0B C0			     .BYTE $C0 ; À
ROM:BF0C 60			     .BYTE $60 ; `
ROM:BF0D A9			     .BYTE $A9 ; ©
ROM:BF0E 00			     .BYTE   0
ROM:BF0F 85			     .BYTE $85 ; 
ROM:BF10 3F			     .BYTE $3F ; ?
ROM:BF11 A0			     .BYTE $A0 ;  
ROM:BF12 80			     .BYTE $80 ; 
ROM:BF13 D0			     .BYTE $D0 ; Ð
ROM:BF14 02			     .BYTE   2
ROM:BF15 A4			     .BYTE $A4 ; ¤
ROM:BF16 45			     .BYTE $45 ; E
ROM:BF17 20			     .BYTE $20
ROM:BF18 56			     .BYTE $56 ; V
ROM:BF19 BC			     .BYTE $BC ; ¼
ROM:BF1A B0			     .BYTE $B0 ; °
ROM:BF1B 6B			     .BYTE $6B ; k
ROM:BF1C 20			     .BYTE $20
ROM:BF1D 2A			     .BYTE $2A ; *
ROM:BF1E B8			     .BYTE $B8 ; ¸
ROM:BF1F B0			     .BYTE $B0 ; °
ROM:BF20 66			     .BYTE $66 ; f
ROM:BF21 E6			     .BYTE $E6 ; æ
ROM:BF22 3F			     .BYTE $3F ; ?
ROM:BF23 A5			     .BYTE $A5 ; ¥
ROM:BF24 3F			     .BYTE $3F ; ?
ROM:BF25 C9			     .BYTE $C9 ; É
ROM:BF26 10			     .BYTE $10
ROM:BF27 90			     .BYTE $90 ; 
ROM:BF28 EC			     .BYTE $EC ; ì
ROM:BF29 A0			     .BYTE $A0 ;  
ROM:BF2A 0F			     .BYTE  $F
ROM:BF2B 84			     .BYTE $84 ; 
ROM:BF2C 3F			     .BYTE $3F ; ?
ROM:BF2D A9			     .BYTE $A9 ; ©
ROM:BF2E 30			     .BYTE $30 ; 0
ROM:BF2F 8D			     .BYTE $8D ; 
ROM:BF30 78			     .BYTE $78 ; x
ROM:BF31 05			     .BYTE   5
ROM:BF32 99			     .BYTE $99 ; 
ROM:BF33 A8			     .BYTE $A8 ; ¨
ROM:BF34 BF			     .BYTE $BF ; ¿
ROM:BF35 88			     .BYTE $88 ; 
ROM:BF36 10			     .BYTE $10
ROM:BF37 FA			     .BYTE $FA ; ú
ROM:BF38 A4			     .BYTE $A4 ; ¤
ROM:BF39 45			     .BYTE $45 ; E
ROM:BF3A 20			     .BYTE $20
ROM:BF3B 87			     .BYTE $87 ; 
ROM:BF3C BF			     .BYTE $BF ; ¿
ROM:BF3D 20			     .BYTE $20
ROM:BF3E 87			     .BYTE $87 ; 
ROM:BF3F BF			     .BYTE $BF ; ¿
ROM:BF40 20			     .BYTE $20
ROM:BF41 87			     .BYTE $87 ; 
ROM:BF42 BF			     .BYTE $BF ; ¿
ROM:BF43 48			     .BYTE $48 ; H
ROM:BF44 68			     .BYTE $68 ; h
ROM:BF45 EA			     .BYTE $EA ; ê
ROM:BF46 88			     .BYTE $88 ; 
ROM:BF47 D0			     .BYTE $D0 ; Ð
ROM:BF48 F1			     .BYTE $F1 ; ñ
ROM:BF49 20			     .BYTE $20
ROM:BF4A 44			     .BYTE $44 ; D
ROM:BF4B B9			     .BYTE $B9 ; ¹
ROM:BF4C B0			     .BYTE $B0 ; °
ROM:BF4D 23			     .BYTE $23 ; #
ROM:BF4E A5			     .BYTE $A5 ; ¥
ROM:BF4F 2D			     .BYTE $2D ; -
ROM:BF50 F0			     .BYTE $F0 ; ð
ROM:BF51 15			     .BYTE $15
ROM:BF52 A9			     .BYTE $A9 ; ©
ROM:BF53 10			     .BYTE $10
ROM:BF54 C5			     .BYTE $C5 ; Å
ROM:BF55 45			     .BYTE $45 ; E
ROM:BF56 A5			     .BYTE $A5 ; ¥
ROM:BF57 45			     .BYTE $45 ; E
ROM:BF58 E9			     .BYTE $E9 ; é
ROM:BF59 01			     .BYTE   1
ROM:BF5A 85			     .BYTE $85 ; 
ROM:BF5B 45			     .BYTE $45 ; E
ROM:BF5C C9			     .BYTE $C9 ; É
ROM:BF5D 05			     .BYTE   5
ROM:BF5E B0			     .BYTE $B0 ; °
ROM:BF5F 11			     .BYTE $11
ROM:BF60 38			     .BYTE $38 ; 8
ROM:BF61 60			     .BYTE $60 ; `
ROM:BF62 20			     .BYTE $20
ROM:BF63 44			     .BYTE $44 ; D
ROM:BF64 B9			     .BYTE $B9 ; ¹
ROM:BF65 B0			     .BYTE $B0 ; °
ROM:BF66 05			     .BYTE   5
ROM:BF67 20			     .BYTE $20
ROM:BF68 DC			     .BYTE $DC ; Ü
ROM:BF69 B8			     .BYTE $B8 ; ¸
ROM:BF6A 90			     .BYTE $90 ; 
ROM:BF6B 1C			     .BYTE $1C
ROM:BF6C CE			     .BYTE $CE ; Î
ROM:BF6D 78			     .BYTE $78 ; x
ROM:BF6E 05			     .BYTE   5
ROM:BF6F D0			     .BYTE $D0 ; Ð
ROM:BF70 F1			     .BYTE $F1 ; ñ
ROM:BF71 20			     .BYTE $20
ROM:BF72 44			     .BYTE $44 ; D
ROM:BF73 B9			     .BYTE $B9 ; ¹
ROM:BF74 B0			     .BYTE $B0 ; °
ROM:BF75 0B			     .BYTE  $B
ROM:BF76 A5			     .BYTE $A5 ; ¥
ROM:BF77 2D			     .BYTE $2D ; -
ROM:BF78 C9			     .BYTE $C9 ; É
ROM:BF79 0F			     .BYTE  $F
ROM:BF7A D0			     .BYTE $D0 ; Ð
ROM:BF7B 05			     .BYTE   5
ROM:BF7C 20			     .BYTE $20
ROM:BF7D DC			     .BYTE $DC ; Ü
ROM:BF7E B8			     .BYTE $B8 ; ¸
ROM:BF7F 90			     .BYTE $90 ; 
ROM:BF80 8C			     .BYTE $8C ; 
ROM:BF81 CE			     .BYTE $CE ; Î
ROM:BF82 78			     .BYTE $78 ; x
ROM:BF83 05			     .BYTE   5
ROM:BF84 D0			     .BYTE $D0 ; Ð
ROM:BF85 EB			     .BYTE $EB ; ë
ROM:BF86 38			     .BYTE $38 ; 8
ROM:BF87 60			     .BYTE $60 ; `
ROM:BF88 A4			     .BYTE $A4 ; ¤
ROM:BF89 2D			     .BYTE $2D ; -
ROM:BF8A B9			     .BYTE $B9 ; ¹
ROM:BF8B A8			     .BYTE $A8 ; ¨
ROM:BF8C BF			     .BYTE $BF ; ¿
ROM:BF8D 30			     .BYTE $30 ; 0
ROM:BF8E DD			     .BYTE $DD ; Ý
ROM:BF8F A9			     .BYTE $A9 ; ©
ROM:BF90 FF			     .BYTE $FF
ROM:BF91 99			     .BYTE $99 ; 
ROM:BF92 A8			     .BYTE $A8 ; ¨
ROM:BF93 BF			     .BYTE $BF ; ¿
ROM:BF94 C6			     .BYTE $C6 ; Æ
ROM:BF95 3F			     .BYTE $3F ; ?
ROM:BF96 10			     .BYTE $10
ROM:BF97 CA			     .BYTE $CA ; Ê
ROM:BF98 A5			     .BYTE $A5 ; ¥
ROM:BF99 44			     .BYTE $44 ; D
ROM:BF9A D0			     .BYTE $D0 ; Ð
ROM:BF9B 0A			     .BYTE  $A
ROM:BF9C A5			     .BYTE $A5 ; ¥
ROM:BF9D 45			     .BYTE $45 ; E
ROM:BF9E C9			     .BYTE $C9 ; É
ROM:BF9F 10			     .BYTE $10
ROM:BFA0 90			     .BYTE $90 ; 
ROM:BFA1 E5			     .BYTE $E5 ; å
ROM:BFA2 C6			     .BYTE $C6 ; Æ
ROM:BFA3 45			     .BYTE $45 ; E
ROM:BFA4 C6			     .BYTE $C6 ; Æ
ROM:BFA5 45			     .BYTE $45 ; E
ROM:BFA6 18			     .BYTE $18
ROM:BFA7 60			     .BYTE $60 ; `
ROM:BFA8 FF			     .BYTE $FF
ROM:BFA9 FF			     .BYTE $FF
ROM:BFAA FF			     .BYTE $FF
ROM:BFAB FF			     .BYTE $FF
ROM:BFAC FF			     .BYTE $FF
ROM:BFAD FF			     .BYTE $FF
ROM:BFAE FF			     .BYTE $FF
ROM:BFAF FF			     .BYTE $FF
ROM:BFB0 FF			     .BYTE $FF
ROM:BFB1 FF			     .BYTE $FF
ROM:BFB2 FF			     .BYTE $FF
ROM:BFB3 FF			     .BYTE $FF
ROM:BFB4 FF			     .BYTE $FF
ROM:BFB5 FF			     .BYTE $FF
ROM:BFB6 FF			     .BYTE $FF
ROM:BFB7 FF			     .BYTE $FF
ROM:BFB8 00			     .BYTE   0
ROM:BFB9 0D			     .BYTE  $D
ROM:BFBA 0B			     .BYTE  $B
ROM:BFBB 09			     .BYTE   9
ROM:BFBC 07			     .BYTE   7
ROM:BFBD 05			     .BYTE   5
ROM:BFBE 03			     .BYTE   3
ROM:BFBF 01			     .BYTE   1
ROM:BFC0 0E			     .BYTE  $E
ROM:BFC1 0C			     .BYTE  $C
ROM:BFC2 0A			     .BYTE  $A
ROM:BFC3 08			     .BYTE   8
ROM:BFC4 06			     .BYTE   6
ROM:BFC5 04			     .BYTE   4
ROM:BFC6 02			     .BYTE   2
ROM:BFC7 0F			     .BYTE  $F
ROM:BFC8 20			     .BYTE $20
ROM:BFC9 DC			     .BYTE $DC ; Ü
ROM:BFCA AB			     .BYTE $AB ; «
ROM:BFCB A9			     .BYTE $A9 ; ©
ROM:BFCC 10			     .BYTE $10
ROM:BFCD 8D			     .BYTE $8D ; 
ROM:BFCE F0			     .BYTE $F0 ; ð
ROM:BFCF B3			     .BYTE $B3 ; ³
ROM:BFD0 A9			     .BYTE $A9 ; ©
ROM:BFD1 23			     .BYTE $23 ; #
ROM:BFD2 8D			     .BYTE $8D ; 
ROM:BFD3 EF			     .BYTE $EF ; ï
ROM:BFD4 B3			     .BYTE $B3 ; ³
ROM:BFD5 60			     .BYTE $60 ; `
ROM:BFD6 4C			     .BYTE $4C ; L
ROM:BFD7 44			     .BYTE $44 ; D
ROM:BFD8 B7			     .BYTE $B7 ; ·
ROM:BFD9 00			     .BYTE   0
ROM:BFDA 00			     .BYTE   0
ROM:BFDB 00			     .BYTE   0
ROM:BFDC 8D			     .BYTE $8D ; 
ROM:BFDD 63			     .BYTE $63 ; c
ROM:BFDE AA			     .BYTE $AA ; ª
ROM:BFDF 8D			     .BYTE $8D ; 
ROM:BFE0 70			     .BYTE $70 ; p
ROM:BFE1 AA			     .BYTE $AA ; ª
ROM:BFE2 8D			     .BYTE $8D ; 
ROM:BFE3 71			     .BYTE $71 ; q
ROM:BFE4 AA			     .BYTE $AA ; ª
ROM:BFE5 60			     .BYTE $60 ; `
ROM:BFE6 20			     .BYTE $20
ROM:BFE7 5B			     .BYTE $5B ; [
ROM:BFE8 A7			     .BYTE $A7 ; §
ROM:BFE9 8C			     .BYTE $8C ; 
ROM:BFEA B7			     .BYTE $B7 ; ·
ROM:BFEB AA			     .BYTE $AA ; ª
ROM:BFEC 60			     .BYTE $60 ; `
ROM:BFED 20			     .BYTE $20
ROM:BFEE 7E			     .BYTE $7E ; ~
ROM:BFEF AE			     .BYTE $AE ; ®
ROM:BFF0 AE			     .BYTE $AE ; ®
ROM:BFF1 9B			     .BYTE $9B ; 
ROM:BFF2 B3			     .BYTE $B3 ; ³
ROM:BFF3 9A			     .BYTE $9A ; 
ROM:BFF4 20			     .BYTE $20
ROM:BFF5 16			     .BYTE $16
ROM:BFF6 A3			     .BYTE $A3 ; £
ROM:BFF7 BA			     .BYTE $BA ; º
ROM:BFF8 8E			     .BYTE $8E ; 
ROM:BFF9 9B			     .BYTE $9B ; 
ROM:BFFA B3			     .BYTE $B3 ; ³
ROM:BFFB A9			     .BYTE $A9 ; ©
ROM:BFFC 09			     .BYTE   9
ROM:BFFD 4C			     .BYTE $4C ; L
ROM:BFFE 85			     .BYTE $85 ; 
ROM:BFFF B3			     .BYTE $B3 ; ³
ROM:BFFF	     ; end of 'ROM'
ROM:BFFF
ROM:BFFF
ROM:BFFF			     .END
