video_seg:3C00		   ;
video_seg:3C00		   ; +-------------------------------------------------------------------------+
video_seg:3C00		   ; |	 This file has been generated by The Interactive Disassembler (IDA)    |
video_seg:3C00		   ; |		 Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>	       |
video_seg:3C00		   ; |			    License info: 48-B437-7294-77		       |
video_seg:3C00		   ; |			      Chris Nott, Virtual Logic			       |
video_seg:3C00		   ; +-------------------------------------------------------------------------+
video_seg:3C00		   ;
video_seg:3C00		   ; Input MD5	 : 59D3C587DDC97074E36E88F23E677079
video_seg:3C00		   ; Input CRC32 : 66E0325A
video_seg:3C00
video_seg:3C00
video_seg:3C00		   ; Processor	     : z80 []
video_seg:3C00		   ; Target assembler: ASxxxx by Alan R. Baldwin v1.5
video_seg:3C00			  .area	  idaseg (ABS)
video_seg:3C00			  .hd64	; this is needed only for HD64180
video_seg:3C00
video_seg:3C00		   ; ===========================================================================
video_seg:3C00
video_seg:3C00		   ; Segment type: Regular
video_seg:3C00				   .org	0x3C00
video_seg:3C00 ?? ?? ??	??+video:	   .ds 0x400
video_seg:3C00 ?? ?? ??	??+; end of 'video_seg'
video_seg:3C00 ?? ?? ??	??+
RAM:4000	     ; File Name   : E:\Projects\pace\pacedev.net\sw\re\platform\trs80\timetrek\timetrek.bin
RAM:4000	     ; Format	   : Binary file
RAM:4000	     ; Base Address: 0000h Range: 40B7h	- 4FFFh	Loaded length: 00000F48h
RAM:4000	     ; ===========================================================================
RAM:4000
RAM:4000	     ; Segment type: Regular
RAM:4000			     .org 0x4000
RAM:4000 ?? ?? ?? ??+quadrant_map:   .ds 0x40
RAM:4040 ?? ??	     rand_seed:	     .ds 2
RAM:4042 ??	     level:	     .ds 1
RAM:4043 ??	     cur_quadrant:   .ds 1
RAM:4044 ?? ?? ??    stardate:	     .ds 3
RAM:4047 ??	     klingons0:	     .ds 1
RAM:4048 ??	     klingons:	     .ds 1
RAM:4049 ??	     bases0:	     .ds 1
RAM:404A ??	     bases:	     .ds 1
RAM:404B ?? ?? ??    klingon_damages:.ds 3
RAM:404E ??	     pos_enterprise: .ds 1
RAM:404F ??	     pos_starbase:   .ds 1
RAM:4050 ?? ?? ?? ??+pos_stars:	     .ds 5
RAM:4055 ?? ?? ??    pos_klingons:   .ds 3
RAM:4058 ??	     pos_blkhole:    .ds 1
RAM:4059 ??	     imp_damage:     .ds 1
RAM:405A ??	     warp_damage:    .ds 1
RAM:405B ??	     lrs_damage:     .ds 1
RAM:405C ??	     shield_damage:  .ds 1
RAM:405D ??	     phaser_damage:  .ds 1
RAM:405E ??	     ship_nrg:	     .ds 1
RAM:405F ??	     shields:	     .ds 1
RAM:4060 ??	     photons:	     .ds 1
RAM:4061 ??	     starbase_damage:.ds 1
RAM:4062 ?? ??	     word_4062:	     .ds 2
RAM:4064 ??	     sos_starbase_qpos:.ds 1
RAM:4065 ??	     sos_starbase_ttl:.ds 1
RAM:4066 ?? ?? ?? ??+		     .ds 0x25
RAM:408B ??	     stack1:	     .ds 1
RAM:408C ?? ?? ?? ??+		     .ds 0x2B
RAM:40B7 96 49	     stack2:	     .dw klingon_thread
RAM:40B9 29 29 29 54+aTimeTrek:	     .ascii ')))TIME TREK((('
RAM:40B9 49 4D 45 20+		     .db 0
RAM:40C9 43 4F 50 59+aCopyright1978J:.ascii 'COPYRIGHT 1978 JOSHUA LAVINSKY'
RAM:40C9 52 49 47 48+		     .db 0
RAM:40E8 57 48 41 54+aWhatLevelDoYou:.ascii 'WHAT LEVEL DO YOU WISH TO PLAY (1-10)? '
RAM:40E8 20 4C 45 56+		     .db 0
RAM:4110 59 4F 55 52+aYourMission:   .ascii 'YOUR MISSION:'
RAM:4110 20 4D 49 53+		     .db 0
RAM:411E 44 45 53 54+aDestroyTheFlee:.ascii 'DESTROY THE FLEET OF'
RAM:411E 52 4F 59 20+		     .db 0
RAM:4133 20 42 45 46+aBeforeTheyDest:.ascii ' BEFORE THEY DESTROY THE'
RAM:4133 4F 52 45 20+		     .db 0
RAM:414C 20 46 45 44+aFederationStar:.ascii ' FEDERATION STARBASES'
RAM:414C 45 52 41 54+		     .db 0
RAM:4162 47 4F 4F 44+aGoodLuck:	     .ascii 'GOOD LUCK!'
RAM:4162 20 4C 55 43+		     .db 0
RAM:416D	     ; ---------------------------------------------------------------------------
RAM:416D
RAM:416D	     entry_point:
RAM:416D 31 8B 40		     ld	     sp, #stack1
RAM:4170 DD 21 FB 3F		     ld	     ix, #0x3FFB
RAM:4174 FD 21 B7 40		     ld	     iy, #stack2
RAM:4178 CD 8D 4F		     call    cls				     ; clear screen
RAM:417B 21 B9 40		     ld	     hl, #aTimeTrek			     ; ")))TIME	TREK((("
RAM:417E 01 19 3C		     ld	     bc, # video+0x19
RAM:4181 CD 4F 4F		     call    str_hl_at_bc
RAM:4184 01 E2 3F		     ld	     bc, # video+0x3E2
RAM:4187 CD 4F 4F		     call    str_hl_at_bc			     ; copyright
RAM:418A AF			     xor     a					     ; clear $4000-$407F
RAM:418B
RAM:418B	     loc_418B:							     ; display on screen
RAM:418B 02			     ld	     (bc), a
RAM:418C 0C			     inc     c					     ; next location
RAM:418D F2 8B 41		     jp	     P,	loc_418B
RAM:4190	     ; Initialize some globals;	IX=3FFB	at this	point
RAM:4190 DD 36 65 03		     ld	     0x65(ix), #3
RAM:4194 DD 36 63 64		     ld	     0x63(ix), #100			     ; ship_nrg
RAM:4198 DD 36 64 64		     ld	     0x64(ix), #100			     ; shields
RAM:419C 50			     ld	     d,	b
RAM:419D 01 80 3C		     ld	     bc, # video+0x80
RAM:41A0 CD 4F 4F		     call    str_hl_at_bc			     ; display level prompt
RAM:41A3 CD 16 4E		     call    getint_HL
RAM:41A6	     ; Level in	HL; start over if <= 0 or >= 11
RAM:41A6 7D			     ld	     a,	l
RAM:41A7 B7			     or	     a					     ; level = 0?
RAM:41A8 28 C3			     jr	     Z,	entry_point			     ; yes, start over
RAM:41AA FE 0B			     cp	     #11				     ; level >=	11?
RAM:41AC 30 BF			     jr	     NC, entry_point			     ; yes, start over
RAM:41AE DD 75 47		     ld	     0x47(ix), l			     ; level
RAM:41B1
RAM:41B1	     gen_galaxy:
RAM:41B1 AF			     xor     a
RAM:41B2
RAM:41B2	     loc_41B2:							     ; bases0
RAM:41B2 DD 77 4E		     ld	     0x4E(ix), a
RAM:41B5 5F			     ld	     e,	a				     ; current quadrant
RAM:41B6 4F			     ld	     c,	a				     ; klingons
RAM:41B7
RAM:41B7	     ; E loops 0 to 63 as current quadrant.
RAM:41B7	     ; C counts	Klingons.
RAM:41B7	     ; B holds quadrant	parameters.
RAM:41B7	     ; Quadrant	has a 3/130 chance of a	black hole. 1.48 average per galaxy.
RAM:41B7	     ; 4/131 chance of a magnetic storm. 1.95 average per galaxy.
RAM:41B7
RAM:41B7	     gen_quad:
RAM:41B7 3E 82			     ld	     a,	#130
RAM:41B9 06 00			     ld	     b,	#0
RAM:41BB CD 9A 4F		     call    rand
RAM:41BE 17			     rla
RAM:41BF CB 18			     rr	     b
RAM:41C1 3E 83			     ld	     a,	#131
RAM:41C3 CD 9A 4F		     call    rand
RAM:41C6 17			     rla
RAM:41C7 CB 18			     rr	     b
RAM:41C9 CB 38			     srl     b
RAM:41CB	     ; Stars.  Very nearly even	chance of 2 to 5.
RAM:41CB 3E 1F			     ld	     a,	#31
RAM:41CD CD 9A 4F		     call    rand
RAM:41D0 B0			     or	     b
RAM:41D1 E6 78			     and     #0x78 ; 'x'
RAM:41D3 47			     ld	     b,	a
RAM:41D4	     ; If current klingons * 10	/ quad num <= level then no klingons here.
RAM:41D4	     ; Given LdivH, I think we'll never start with klingons in quadrant 0.
RAM:41D4	     ; And always have klingons	in quadrant 1.
RAM:41D4 2E 0A			     ld	     l,	#0xA
RAM:41D6 61			     ld	     h,	c
RAM:41D7 CD EF 4F		     call    HxL
RAM:41DA 63			     ld	     h,	e
RAM:41DB CD DA 4F		     call    LdivH
RAM:41DE DD 96 47		     sub     0x47(ix)				     ; level
RAM:41E1 30 0F			     jr	     NC, no_klingons
RAM:41E3	     ; Klingons	chosen as rand(rand(3)).
RAM:41E3	     ; 11/18 for 1, 5/18 for 2 and 2/18	for 3.
RAM:41E3 3E 03			     ld	     a,	#3
RAM:41E5 CD 9A 4F		     call    rand
RAM:41E8 CD 9A 4F		     call    rand
RAM:41EB 67			     ld	     h,	a
RAM:41EC 07			     rlca
RAM:41ED B0			     or	     b
RAM:41EE 47			     ld	     b,	a
RAM:41EF 7C			     ld	     a,	h
RAM:41F0 81			     add     a,	c
RAM:41F1 4F			     ld	     c,	a
RAM:41F2
RAM:41F2	     ; 19/146 chance of	a starbase; about 13%.	We'll average 8.3 in the galaxy.
RAM:41F2
RAM:41F2	     no_klingons:
RAM:41F2 3E 92			     ld	     a,	#146
RAM:41F4 CD 9A 4F		     call    rand
RAM:41F7 17			     rla
RAM:41F8 30 04			     jr	     NC, no_starbase
RAM:41FA 04			     inc     b
RAM:41FB DD 34 4E		     inc     0x4E(ix)				     ; bases0
RAM:41FE
RAM:41FE	     no_starbase:
RAM:41FE 78			     ld	     a,	b
RAM:41FF 12			     ld	     (de), a
RAM:4200 1C			     inc     e
RAM:4201 7B			     ld	     a,	e
RAM:4202 FE 40			     cp	     #64
RAM:4204 20 B1			     jr	     NZ, gen_quad
RAM:4206 1E 47			     ld	     e,	#0x47 ;	'G'
RAM:4208 79			     ld	     a,	c
RAM:4209 12			     ld	     (de), a
RAM:420A 1C			     inc     e
RAM:420B 12			     ld	     (de), a
RAM:420C 1C			     inc     e
RAM:420D 1A			     ld	     a,	(de)
RAM:420E 1C			     inc     e
RAM:420F 12			     ld	     (de), a
RAM:4210	     ; Only 6 to 12 starbases are acceptable.  Start over if not.
RAM:4210 FE 06			     cp	     #6
RAM:4212 38 9D			     jr	     C,	gen_galaxy
RAM:4214 FE 0D			     cp	     #13
RAM:4216 30 99			     jr	     NC, gen_galaxy
RAM:4218	     ; Pick random starting quadrant for Enterprise.
RAM:4218 3E 3F			     ld	     a,	#63
RAM:421A CD 9A 4F		     call    rand
RAM:421D 5F			     ld	     e,	a
RAM:421E CD 8D 4F		     call    cls
RAM:4221 06 3C			     ld	     b,	#0x3C ;	'<'
RAM:4223 21 10 41		     ld	     hl, #aYourMission			     ; "YOUR MISSION:"
RAM:4226 CD 4F 4F		     call    str_hl_at_bc
RAM:4229 0E 82			     ld	     c,	#0x82 ;	'‚'
RAM:422B CD 4F 4F		     call    str_hl_at_bc			     ; "DESTROY	THE FLEET OF"
RAM:422E DD 7E 4C		     ld	     a,	0x4C(ix)			     ; klingons0
RAM:4231 CD 57 4F		     call    print_a
RAM:4234 21 A8 44		     ld	     hl, #aKlingonShips			     ; " KLINGON SHIPS"
RAM:4237 CD 4F 4F		     call    str_hl_at_bc
RAM:423A 21 33 41		     ld	     hl, #aBeforeTheyDest		     ; " BEFORE	THEY DESTROY THE"
RAM:423D CD 4F 4F		     call    str_hl_at_bc
RAM:4240 DD 7E 4E		     ld	     a,	0x4E(ix)			     ; bases0
RAM:4243 0E C2			     ld	     c,	#0xC2 ;	'Â'
RAM:4245 CD 57 4F		     call    print_a
RAM:4248 CD 4F 4F		     call    str_hl_at_bc
RAM:424B 01 6C 3D		     ld	     bc, # video+0x16C
RAM:424E CD 4F 4F		     call    str_hl_at_bc
RAM:4251 CD 39 4E		     call    getchar
RAM:4254 DD 21 00 40		     ld	     ix, #quadrant_map
RAM:4258
RAM:4258	     ; Initialize the position of everything in	the quadrant (at DE, of	course)
RAM:4258	     ; Also displays the black hole warning as needed.
RAM:4258
RAM:4258	     quad_init:
RAM:4258 D5			     push    de
RAM:4259 DD 73 43		     ld	     0x43(ix), e			     ; cur_quadrant
RAM:425C 1E 4E			     ld	     e,	#78
RAM:425E
RAM:425E	     loc_425E:
RAM:425E 3E 7F			     ld	     a,	#127
RAM:4260 CD 9A 4F		     call    rand
RAM:4263 07			     rlca
RAM:4264 12			     ld	     (de), a
RAM:4265 E6 1F			     and     #0x1F
RAM:4267 28 F5			     jr	     Z,	loc_425E
RAM:4269 21 4E 40		     ld	     hl, #pos_enterprise
RAM:426C
RAM:426C	     loc_426C:
RAM:426C 7D			     ld	     a,	l
RAM:426D BB			     cp	     e
RAM:426E 28 07			     jr	     Z,	loc_4277
RAM:4270 1A			     ld	     a,	(de)
RAM:4271 BE			     cp	     (hl)
RAM:4272 28 EA			     jr	     Z,	loc_425E
RAM:4274 2C			     inc     l
RAM:4275 18 F5			     jr	     loc_426C
RAM:4277	     ; ---------------------------------------------------------------------------
RAM:4277
RAM:4277	     loc_4277:
RAM:4277 1C			     inc     e
RAM:4278 7B			     ld	     a,	e
RAM:4279 FE 59			     cp	     #0x59 ; 'Y'
RAM:427B 20 E1			     jr	     NZ, loc_425E
RAM:427D D1			     pop     de
RAM:427E CD 8D 4F		     call    cls
RAM:4281 1A			     ld	     a,	(de)
RAM:4282 E6 60			     and     #0x60 ; '`'
RAM:4284 FE 20			     cp	     #0x20 ; ' '
RAM:4286 20 08			     jr	     NZ, get_command
RAM:4288 21 5A 44		     ld	     hl, #aSensorsDetectABlackHoleInThisQu   ; "SENSORS	DETECT A BLACK HOLE IN THIS QUA"...
RAM:428B 06 3C			     ld	     b,	#0x3C ;	'<'
RAM:428D CD 4F 4F		     call    str_hl_at_bc
RAM:4290
RAM:4290	     get_command:
RAM:4290 CD F8 42		     call    draw_srs
RAM:4293
RAM:4293	     nd_get_command:						     ; "COMMAND?"
RAM:4293 21 88 44		     ld	     hl, #aCommand
RAM:4296 01 F6 3F		     ld	     bc, # video+0x3F6
RAM:4299 CD 4F 4F		     call    str_hl_at_bc
RAM:429C 0D			     dec     c
RAM:429D CD 39 4E		     call    getchar
RAM:42A0 D6 31			     sub     #0x31 ; '1'
RAM:42A2 CA 03 45		     jp	     Z,	cmd_status
RAM:42A5 38 EC			     jr	     C,	nd_get_command
RAM:42A7 FE 07			     cp	     #7
RAM:42A9 30 E8			     jr	     NC, nd_get_command
RAM:42AB F5			     push    af
RAM:42AC 0E C0			     ld	     c,	#0xC0 ;	'À'
RAM:42AE CD 0C 4E		     call    clreol
RAM:42B1 01 40 3C		     ld	     bc, # video+0x40
RAM:42B4 CD 0C 4E		     call    clreol
RAM:42B7 F1			     pop     af
RAM:42B8 FE 05			     cp	     #5
RAM:42BA 30 25			     jr	     NC, loc_42E1
RAM:42BC 21 7D 45		     ld	     hl, #aWarpEngines			     ; "WARP ENGINES"
RAM:42BF D5			     push    de
RAM:42C0 5F			     ld	     e,	a
RAM:42C1 53			     ld	     d,	e
RAM:42C2
RAM:42C2	     loc_42C2:
RAM:42C2 01 00 3C		     ld	     bc, #video
RAM:42C5 CD 4F 4F		     call    str_hl_at_bc
RAM:42C8 15			     dec     d
RAM:42C9 20 F7			     jr	     NZ, loc_42C2
RAM:42CB 21 04 44		     ld	     hl, #aInoperable			     ; " INOPERABLE"
RAM:42CE CD 4F 4F		     call    str_hl_at_bc
RAM:42D1 CD 0C 4E		     call    clreol
RAM:42D4
RAM:42D4	     s_noover:
RAM:42D4 06 40			     ld	     b,	#0x40 ;	'@'
RAM:42D6 7B			     ld	     a,	e
RAM:42D7 C6 59			     add     a,	#0x59 ;	'Y'
RAM:42D9 4F			     ld	     c,	a
RAM:42DA 0A			     ld	     a,	(bc)
RAM:42DB FE 64			     cp	     #100
RAM:42DD 7B			     ld	     a,	e
RAM:42DE D1			     pop     de
RAM:42DF 30 B2			     jr	     NC, nd_get_command
RAM:42E1
RAM:42E1	     loc_42E1:
RAM:42E1 3D			     dec     a
RAM:42E2 CA D0 45		     jp	     Z,	cmd_warp
RAM:42E5 3D			     dec     a
RAM:42E6 CA 1E 46		     jp	     Z,	cmd_lrs
RAM:42E9 3D			     dec     a
RAM:42EA CA A3 45		     jp	     Z,	cmd_shield
RAM:42ED 3D			     dec     a
RAM:42EE CA F1 46		     jp	     Z,	cmd_phaser
RAM:42F1 3D			     dec     a
RAM:42F2 CA 3C 47		     jp	     Z,	cmd_photon
RAM:42F5 C3 BC 46		     jp	     cmd_destruct
RAM:42F8
RAM:42F8	     ; =============== S U B R O U T I N E =======================================
RAM:42F8
RAM:42F8	     ; Draws the short range scanners plus checks a number of
RAM:42F8	     ; game ending conditions or something.  Not fully understood.
RAM:42F8	     ; First we	erase the area save for	the frame.
RAM:42F8
RAM:42F8	     draw_srs:
RAM:42F8 21 80 3C		     ld	     hl, # video+0x80
RAM:42FB 01 95 AA		     ld	     bc, #0xAA95
RAM:42FE
RAM:42FE	     loc_42FE:
RAM:42FE 3E 2D			     ld	     a,	#0x2D ;	'-'
RAM:4300 77			     ld	     (hl), a
RAM:4301 2C			     inc     l
RAM:4302 7D			     ld	     a,	l
RAM:4303 FE C0			     cp	     #0xC0 ; 'À'
RAM:4305 20 F7			     jr	     NZ, loc_42FE
RAM:4307
RAM:4307	     loc_4307:
RAM:4307 71			     ld	     (hl), c
RAM:4308
RAM:4308	     loc_4308:
RAM:4308 23			     inc     hl
RAM:4309 3E 80			     ld	     a,	#0x80 ;	'€'
RAM:430B 77			     ld	     (hl), a
RAM:430C 7D			     ld	     a,	l
RAM:430D E6 3F			     and     #0x3F ; '?'
RAM:430F 20 F7			     jr	     NZ, loc_4308
RAM:4311 2B			     dec     hl
RAM:4312 70			     ld	     (hl), b
RAM:4313 23			     inc     hl
RAM:4314 7D			     ld	     a,	l
RAM:4315 FE C0			     cp	     #0xC0 ; 'À'
RAM:4317 20 EE			     jr	     NZ, loc_4307
RAM:4319 7C			     ld	     a,	h
RAM:431A FE 3E			     cp	     #0x3E ; '>'
RAM:431C 20 E9			     jr	     NZ, loc_4307
RAM:431E
RAM:431E	     loc_431E:
RAM:431E 3E 2D			     ld	     a,	#0x2D ;	'-'
RAM:4320 77			     ld	     (hl), a
RAM:4321 2C			     inc     l
RAM:4322 20 FA			     jr	     NZ, loc_431E
RAM:4322	     ; End of function draw_srs
RAM:4322
RAM:4324
RAM:4324	     ; =============== S U B R O U T I N E =======================================
RAM:4324
RAM:4324	     ; Display the Enterprise herself.
RAM:4324
RAM:4324	     disp_srs_ships:
RAM:4324 DD 7E 4E		     ld	     a,	0x4E(ix)			     ; pos_enterprise
RAM:4327 CD 80 4F		     call    pos2scrn
RAM:432A 21 4E 44		     ld	     hl, #aV				     ; "\"V\""
RAM:432D CD 4F 4F		     call    str_hl_at_bc
RAM:4330 DD 5E 43		     ld	     e,	0x43(ix)			     ; cur_quadrant
RAM:4333 16 40			     ld	     d,	#0x40 ;	'@'
RAM:4335 1A			     ld	     a,	(de)
RAM:4336 E6 01			     and     #1
RAM:4338 28 09			     jr	     Z,	no_starbase_l
RAM:433A DD 7E 4F		     ld	     a,	0x4F(ix)			     ; pos_starbase
RAM:433D CD 80 4F		     call    pos2scrn
RAM:4340 CD 4F 4F		     call    str_hl_at_bc
RAM:4343
RAM:4343	     ; Draw stars
RAM:4343
RAM:4343	     no_starbase_l:
RAM:4343 1A			     ld	     a,	(de)
RAM:4344 E6 18			     and     #0x18
RAM:4346 0F			     rrca
RAM:4347 0F			     rrca
RAM:4348 0F			     rrca
RAM:4349 D5			     push    de
RAM:434A C6 51			     add     a,	#0x51 ;	'Q'
RAM:434C 5F			     ld	     e,	a
RAM:434D
RAM:434D	     loc_434D:
RAM:434D 1A			     ld	     a,	(de)
RAM:434E CD 80 4F		     call    pos2scrn
RAM:4351 3E 2E			     ld	     a,	#0x2E ;	'.'
RAM:4353 02			     ld	     (bc), a
RAM:4354 1D			     dec     e
RAM:4355 7B			     ld	     a,	e
RAM:4356 FE 4F			     cp	     #0x4F ; 'O'
RAM:4358 20 F3			     jr	     NZ, loc_434D
RAM:435A	     ; Draw Klingons
RAM:435A D1			     pop     de
RAM:435B 1A			     ld	     a,	(de)
RAM:435C E6 06			     and     #6
RAM:435E 0F			     rrca
RAM:435F D5			     push    de
RAM:4360 C6 54			     add     a,	#0x54 ;	'T'
RAM:4362 5F			     ld	     e,	a
RAM:4363
RAM:4363	     loc_4363:
RAM:4363 7B			     ld	     a,	e
RAM:4364 FE 54			     cp	     #0x54 ; 'T'
RAM:4366 28 0D			     jr	     Z,	loc_4375
RAM:4368 1A			     ld	     a,	(de)
RAM:4369 CD 80 4F		     call    pos2scrn
RAM:436C 21 56 44		     ld	     hl, #klingon			     ; "<*>"
RAM:436F CD 4F 4F		     call    str_hl_at_bc
RAM:4372 1D			     dec     e
RAM:4373 18 EE			     jr	     loc_4363
RAM:4375	     ; ---------------------------------------------------------------------------
RAM:4375
RAM:4375	     loc_4375:
RAM:4375 D1			     pop     de
RAM:4376 C3 9F 4D		     jp	     draw_stats
RAM:4376	     ; End of function disp_srs_ships
RAM:4376
RAM:4379	     ; ---------------------------------------------------------------------------
RAM:4379	     ; START OF	FUNCTION CHUNK FOR ship_hit
RAM:4379
RAM:4379	     no_more_starbases:
RAM:4379 01 00 3F		     ld	     bc, # video+0x300
RAM:437C 21 29 44		     ld	     hl, #aTheLastStarbaseHasBeenDestroyed   ; "THE LAST STARBASE HAS BEEN DESTROYED"
RAM:437F CD 4F 4F		     call    str_hl_at_bc
RAM:4382 16 00			     ld	     d,	#0
RAM:4384 21 C0 44		     ld	     hl, #aWillBeConquered		     ; "WILL BE	CONQUERED"
RAM:4387 18 4E			     jr	     game_done
RAM:4387	     ; END OF FUNCTION CHUNK FOR ship_hit
RAM:4389	     ; ---------------------------------------------------------------------------
RAM:4389	     ; START OF	FUNCTION CHUNK FOR getchar
RAM:4389
RAM:4389	     ent_dead:
RAM:4389 E5			     push    hl
RAM:438A 01 00 3F		     ld	     bc, # video+0x300
RAM:438D 21 10 44		     ld	     hl, #aTheEnterpriseHasBeen		     ; "THE ENTERPRISE HAS BEEN	"
RAM:4390 CD 4F 4F		     call    str_hl_at_bc
RAM:4393 E1			     pop     hl
RAM:4394 CD 4F 4F		     call    str_hl_at_bc
RAM:4397 16 00			     ld	     d,	#0
RAM:4399 21 C0 44		     ld	     hl, #aWillBeConquered		     ; "WILL BE	CONQUERED"
RAM:439C 18 39			     jr	     game_done
RAM:439C	     ; END OF FUNCTION CHUNK FOR getchar
RAM:439E
RAM:439E	     ; =============== S U B R O U T I N E =======================================
RAM:439E
RAM:439E
RAM:439E	     LdivB:
RAM:439E C5			     push    bc
RAM:439F AF			     xor     a
RAM:43A0 C3 DE 4F		     jp	     loc_4FDE
RAM:43A0	     ; End of function LdivB
RAM:43A0
RAM:43A3	     ; ---------------------------------------------------------------------------
RAM:43A3	     ; I'm guessing a bit on some of the variables, but here's the score calc:
RAM:43A3	     ; (((((B1 * 32) % 256[maybe]) / B0) * L) %	256) * 24) % 256[maybe]) / S
RAM:43A3	     ;
RAM:43A3	     ; Where:
RAM:43A3	     ;	  B0 - initial number of starbases
RAM:43A3	     ;	  B1 - starbases left at end of	game
RAM:43A3	     ;	  S  - stardates used
RAM:43A3	     ;	  L  - level selected (1 - 10, of course)
RAM:43A3	     ;
RAM:43A3	     ; Seems rife with overlows
RAM:43A3	     ;
RAM:43A3	     ; START OF	FUNCTION CHUNK FOR ship_hit
RAM:43A3
RAM:43A3	     victory:							     ; bases
RAM:43A3 DD 6E 4A		     ld	     l,	0x4A(ix)
RAM:43A6 26 00			     ld	     h,	#0
RAM:43A8 29			     add     hl, hl
RAM:43A9 29			     add     hl, hl
RAM:43AA 29			     add     hl, hl
RAM:43AB 29			     add     hl, hl
RAM:43AC 29			     add     hl, hl
RAM:43AD DD 46 49		     ld	     b,	0x49(ix)			     ; bases0
RAM:43B0 CD 9E 43		     call    LdivB
RAM:43B3 DD 66 42		     ld	     h,	0x42(ix)			     ; level
RAM:43B6 CD EF 4F		     call    HxL
RAM:43B9 26 18			     ld	     h,	#0x18
RAM:43BB CD EF 4F		     call    HxL
RAM:43BE DD 46 44		     ld	     b,	0x44(ix)			     ; stardate
RAM:43C1 CD 9E 43		     call    LdivB
RAM:43C4 57			     ld	     d,	a
RAM:43C5 01 00 3F		     ld	     bc, # video+0x300
RAM:43C8 21 91 44		     ld	     hl, #aYouHaveDestroyedAll		     ; "YOU HAVE DESTROYED ALL"
RAM:43CB CD 4F 4F		     call    str_hl_at_bc
RAM:43CE DD 7E 47		     ld	     a,	0x47(ix)			     ; klingons0
RAM:43D1 CD 57 4F		     call    print_a
RAM:43D4 CD 4F 4F		     call    str_hl_at_bc
RAM:43D4	     ; END OF FUNCTION CHUNK FOR ship_hit
RAM:43D7	     ; START OF	FUNCTION CHUNK FOR getchar
RAM:43D7
RAM:43D7	     game_done:
RAM:43D7 1E 04			     ld	     e,	#4
RAM:43D9
RAM:43D9	     loc_43D9:
RAM:43D9 CD 0C 4E		     call    clreol
RAM:43DC 1D			     dec     e
RAM:43DD 20 FA			     jr	     NZ, loc_43D9
RAM:43DF 01 50 3F		     ld	     bc, # video+0x350
RAM:43E2 CD 4F 4F		     call    str_hl_at_bc
RAM:43E5 21 D2 44		     ld	     hl, #aTheFederation		     ; "THE FEDERATION "
RAM:43E8 0E 40			     ld	     c,	#0x40 ;	'@'
RAM:43EA CD 4F 4F		     call    str_hl_at_bc
RAM:43ED 0E 65			     ld	     c,	#0x65 ;	'e'
RAM:43EF CD 4F 4F		     call    str_hl_at_bc
RAM:43F2 7A			     ld	     a,	d
RAM:43F3 CD 57 4F		     call    print_a
RAM:43F6 0E EC			     ld	     c,	#0xEC ;	'ì'
RAM:43F8 CD 4F 4F		     call    str_hl_at_bc
RAM:43FB
RAM:43FB	     loc_43FB:							     ; keyboard	row with 'Y'
RAM:43FB 3A 08 38		     ld	     a,	(0x3808)
RAM:43FE B7			     or	     a					     ; any key pressed?
RAM:43FF 28 FA			     jr	     Z,	loc_43FB			     ; no, loop
RAM:4401 C3 6D 41		     jp	     entry_point
RAM:4401	     ; END OF FUNCTION CHUNK FOR getchar
RAM:4401	     ; ---------------------------------------------------------------------------
RAM:4404 20 49 4E 4F+aInoperable:    .ascii ' INOPERABLE'
RAM:4404 50 45 52 41+		     .db 0
RAM:4410 54 48 45 20+aTheEnterpriseHasBeen:.ascii 'THE ENTERPRISE HAS BEEN '
RAM:4410 45 4E 54 45+		     .db 0
RAM:4429 54 48 45 20+aTheLastStarbaseHasBeenDestroyed:.ascii 'THE LAST STARBASE HAS BEEN DESTROYED'
RAM:4429 4C 41 53 54+		     .db 0
RAM:444E 22 56 22 00 aV:	     .ascii '"V"'
RAM:444E			     .db 0
RAM:4452 2B 4F 2B 00 aO:	     .ascii '+O+'
RAM:4452			     .db 0
RAM:4456 3C 2A 3E 00 klingon:	     .ascii '<*>'
RAM:4456			     .db 0
RAM:445A 53 45 4E 53+aSensorsDetectABlackHoleInThisQu:.ascii 'SENSORS DETECT A BLACK HOLE IN THIS QUADRANT!'
RAM:445A 4F 52 53 20+		     .db 0
RAM:4488 43 4F 4D 4D+aCommand:	     .ascii 'COMMAND?'
RAM:4488 41 4E 44 3F+		     .db 0
RAM:4491 59 4F 55 20+aYouHaveDestroyedAll:.ascii 'YOU HAVE DESTROYED ALL'
RAM:4491 48 41 56 45+		     .db 0
RAM:44A8 20 4B 4C 49+aKlingonShips:  .ascii ' KLINGON SHIPS'
RAM:44A8 4E 47 4F 4E+		     .db 0
RAM:44B7 49 53 20 53+aIsSaved:	     .ascii 'IS SAVED'
RAM:44B7 41 56 45 44+		     .db 0
RAM:44C0 57 49 4C 4C+aWillBeConquered:.ascii 'WILL BE CONQUERED'
RAM:44C0 20 42 45 20+		     .db 0
RAM:44D2 54 48 45 20+aTheFederation: .ascii 'THE FEDERATION '
RAM:44D2 46 45 44 45+		     .db 0
RAM:44E2 59 4F 55 52+aYourScoreIs:   .ascii 'YOUR SCORE IS'
RAM:44E2 20 53 43 4F+		     .db 0
RAM:44F0 43 41 52 45+aCareToPlayAgain:.ascii 'CARE TO PLAY AGAIN?'
RAM:4503	     ; ---------------------------------------------------------------------------
RAM:4503
RAM:4503	     cmd_status:
RAM:4503 00			     nop
RAM:4504 CD 8D 4F		     call    cls
RAM:4507 06 3C			     ld	     b,	#0x3C ;	'<'
RAM:4509 DD 7E 48		     ld	     a,	0x48(ix)			     ; klingons
RAM:450C CD 57 4F		     call    print_a
RAM:450F 21 4B 45		     ld	     hl, #aKlingonsLeft			     ; " KLINGONS LEFT"
RAM:4512 CD 4F 4F		     call    str_hl_at_bc
RAM:4515 0E 20			     ld	     c,	#0x20 ;	' '
RAM:4517 DD 7E 4A		     ld	     a,	0x4A(ix)			     ; bases
RAM:451A CD 57 4F		     call    print_a
RAM:451D CD 4F 4F		     call    str_hl_at_bc
RAM:4520 0E C0			     ld	     c,	#0xC0 ;	'À'
RAM:4522 CD 4F 4F		     call    str_hl_at_bc
RAM:4525 01 40 3D		     ld	     bc, # video+0x140
RAM:4528 D5			     push    de
RAM:4529 1E 59			     ld	     e,	#0x59 ;	'Y'
RAM:452B
RAM:452B	     loc_452B:
RAM:452B CD 4F 4F		     call    str_hl_at_bc
RAM:452E 79			     ld	     a,	c
RAM:452F E6 C0			     and     #0xC0 ; 'À'
RAM:4531 C6 18			     add     a,	#0x18
RAM:4533 4F			     ld	     c,	a
RAM:4534 1A			     ld	     a,	(de)
RAM:4535 CD 57 4F		     call    print_a
RAM:4538 3E 25			     ld	     a,	#0x25 ;	'%'
RAM:453A 02			     ld	     (bc), a
RAM:453B 03			     inc     bc
RAM:453C CD 0C 4E		     call    clreol
RAM:453F 13			     inc     de
RAM:4540 7B			     ld	     a,	e
RAM:4541 FE 5E			     cp	     #0x5E ; '^'
RAM:4543 20 E6			     jr	     NZ, loc_452B
RAM:4545 D1			     pop     de
RAM:4546 CD 39 4E		     call    getchar
RAM:4549 18 6C			     jr	     loc_45B7
RAM:4549	     ; ---------------------------------------------------------------------------
RAM:454B 20 4B 4C 49+aKlingonsLeft:  .ascii ' KLINGONS LEFT'
RAM:454B 4E 47 4F 4E+		     .db 0
RAM:455A 20 42 41 53+aBasesLeft:     .ascii ' BASES LEFT'
RAM:455A 45 53 20 4C+		     .db 0
RAM:4566 44 41 4D 41+aDamage:	     .ascii 'DAMAGE'
RAM:4566 47 45 00		     .db 0
RAM:456D 49 4D 50 55+aImpulseEngines:.ascii 'IMPULSE ENGINES'
RAM:456D 4C 53 45 20+		     .db 0
RAM:457D 57 41 52 50+aWarpEngines:   .ascii 'WARP ENGINES'
RAM:457D 20 45 4E 47+		     .db 0
RAM:458A 53 43 41 4E+aScanners:	     .ascii 'SCANNERS'
RAM:458A 4E 45 52 53+		     .db 0
RAM:4593 53 48 49 45+aShields:	     .ascii 'SHIELDS'
RAM:4593 4C 44 53 00		     .db 0
RAM:459B 50 48 41 53+aPhasers:	     .ascii 'PHASERS'
RAM:459B 45 52 53 00		     .db 0
RAM:45A3	     ; ---------------------------------------------------------------------------
RAM:45A3
RAM:45A3	     cmd_shield:
RAM:45A3 01 00 3C		     ld	     bc, #video
RAM:45A6 21 BA 45		     ld	     hl, #aEnergyToShields		     ; "% ENERGY TO SHIELDS? "
RAM:45A9 CD 4F 4F		     call    str_hl_at_bc
RAM:45AC CD 16 4E		     call    getint_HL
RAM:45AF 7D			     ld	     a,	l
RAM:45B0 FE 65			     cp	     #101
RAM:45B2 30 EF			     jr	     NC, cmd_shield
RAM:45B4 DD 77 5F		     ld	     0x5F(ix), a			     ; shields
RAM:45B7
RAM:45B7	     loc_45B7:
RAM:45B7 C3 90 42		     jp	     get_command
RAM:45B7	     ; ---------------------------------------------------------------------------
RAM:45BA 25 20 45 4E+aEnergyToShields:.ascii '% ENERGY TO SHIELDS? '
RAM:45BA 45 52 47 59+		     .db 0
RAM:45D0	     ; ---------------------------------------------------------------------------
RAM:45D0
RAM:45D0	     cmd_warp:
RAM:45D0 01 00 3C		     ld	     bc, #video
RAM:45D3 C5			     push    bc
RAM:45D4 CD 0C 4E		     call    clreol
RAM:45D7 C1			     pop     bc
RAM:45D8 21 0D 46		     ld	     hl, #aSetCourseFor			     ; "SET COURSE FOR?	"
RAM:45DB CD 4F 4F		     call    str_hl_at_bc
RAM:45DE CD 39 4E		     call    getchar
RAM:45E1 28 1B			     jr	     Z,	loc_45FE
RAM:45E3 FE 38			     cp	     #0x38 ; '8'
RAM:45E5 30 E9			     jr	     NC, cmd_warp
RAM:45E7 D6 30			     sub     #0x30 ; '0'
RAM:45E9 38 E5			     jr	     C,	cmd_warp
RAM:45EB 67			     ld	     h,	a
RAM:45EC CD 39 4E		     call    getchar
RAM:45EF 28 0D			     jr	     Z,	loc_45FE
RAM:45F1 FE 38			     cp	     #0x38 ; '8'
RAM:45F3 30 DB			     jr	     NC, cmd_warp
RAM:45F5 D6 30			     sub     #0x30 ; '0'
RAM:45F7 38 D7			     jr	     C,	cmd_warp
RAM:45F9 07			     rlca
RAM:45FA 07			     rlca
RAM:45FB 07			     rlca
RAM:45FC B4			     or	     h
RAM:45FD BB			     cp	     e
RAM:45FE
RAM:45FE	     loc_45FE:
RAM:45FE CA 93 42		     jp	     Z,	nd_get_command
RAM:4601 5F			     ld	     e,	a
RAM:4602 FD 21 B7 40		     ld	     iy, #stack2
RAM:4606 DD 36 61 00		     ld	     0x61(ix), #0			     ; starbase_damage
RAM:460A C3 58 42		     jp	     quad_init
RAM:460A	     ; ---------------------------------------------------------------------------
RAM:460D 53 45 54 20+aSetCourseFor:  .ascii 'SET COURSE FOR? '
RAM:460D 43 4F 55 52+		     .db 0
RAM:461E	     ; ---------------------------------------------------------------------------
RAM:461E
RAM:461E	     cmd_lrs:
RAM:461E CD 8D 4F		     call    cls
RAM:4621 21 AC 46		     ld	     hl, #aLongRangeScan		     ; "LONG RANGE SCAN"
RAM:4624 06 3C			     ld	     b,	#0x3C ;	'<'
RAM:4626 CD 4F 4F		     call    str_hl_at_bc
RAM:4629 D5			     push    de
RAM:462A 1E 30			     ld	     e,	#0x30 ;	'0'
RAM:462C 21 85 3C		     ld	     hl, # video+0x85
RAM:462F 0E C0			     ld	     c,	#0xC0 ;	'À'
RAM:4631
RAM:4631	     loc_4631:
RAM:4631 7B			     ld	     a,	e
RAM:4632 02			     ld	     (bc), a
RAM:4633 77			     ld	     (hl), a
RAM:4634 7D			     ld	     a,	l
RAM:4635 C6 08			     add     a,	#8
RAM:4637 6F			     ld	     l,	a
RAM:4638 03			     inc     bc
RAM:4639 D5			     push    de
RAM:463A E5			     push    hl
RAM:463B DD 7E 43		     ld	     a,	0x43(ix)			     ; cur_quadrant
RAM:463E 67			     ld	     h,	a
RAM:463F E6 07			     and     #7
RAM:4641 6F			     ld	     l,	a
RAM:4642 7B			     ld	     a,	e
RAM:4643 D6 30			     sub     #0x30 ; '0'
RAM:4645 07			     rlca
RAM:4646 07			     rlca
RAM:4647 07			     rlca
RAM:4648 5F			     ld	     e,	a
RAM:4649
RAM:4649	     loc_4649:
RAM:4649 3E AA			     ld	     a,	#0xAA ;	'ª'
RAM:464B 02			     ld	     (bc), a
RAM:464C C5			     push    bc
RAM:464D 1A			     ld	     a,	(de)
RAM:464E E6 01			     and     #1
RAM:4650 20 16			     jr	     NZ, loc_4668
RAM:4652 7B			     ld	     a,	e
RAM:4653 E6 07			     and     #7
RAM:4655 95			     sub     l
RAM:4656 30 02			     jr	     NC, loc_465A
RAM:4658 ED 44			     neg
RAM:465A
RAM:465A	     loc_465A:
RAM:465A FE 02			     cp	     #2
RAM:465C 30 30			     jr	     NC, loc_468E
RAM:465E 7B			     ld	     a,	e
RAM:465F 94			     sub     h
RAM:4660 30 02			     jr	     NC, loc_4664
RAM:4662 ED 44			     neg
RAM:4664
RAM:4664	     loc_4664:
RAM:4664 FE 0A			     cp	     #0xA
RAM:4666 30 26			     jr	     NC, loc_468E
RAM:4668
RAM:4668	     loc_4668:
RAM:4668 03			     inc     bc
RAM:4669 03			     inc     bc
RAM:466A 7B			     ld	     a,	e
RAM:466B BC			     cp	     h
RAM:466C 20 04			     jr	     NZ, loc_4672
RAM:466E 3E 45			     ld	     a,	#0x45 ;	'E'
RAM:4670 02			     ld	     (bc), a
RAM:4671 03			     inc     bc
RAM:4672
RAM:4672	     loc_4672:
RAM:4672 1A			     ld	     a,	(de)
RAM:4673 E6 01			     and     #1
RAM:4675 28 05			     jr	     Z,	loc_467C
RAM:4677 3E 42			     ld	     a,	#0x42 ;	'B'
RAM:4679 03			     inc     bc
RAM:467A 02			     ld	     (bc), a
RAM:467B 03			     inc     bc
RAM:467C
RAM:467C	     loc_467C:
RAM:467C 1A			     ld	     a,	(de)
RAM:467D CB 77			     bit     6,	a
RAM:467F 28 06			     jr	     Z,	loc_4687
RAM:4681 3E 4D			     ld	     a,	#0x4D ;	'M'
RAM:4683 03			     inc     bc
RAM:4684 02			     ld	     (bc), a
RAM:4685 18 07			     jr	     loc_468E
RAM:4687	     ; ---------------------------------------------------------------------------
RAM:4687
RAM:4687	     loc_4687:
RAM:4687 1A			     ld	     a,	(de)
RAM:4688 E6 06			     and     #6
RAM:468A 0F			     rrca
RAM:468B CD 57 4F		     call    print_a
RAM:468E
RAM:468E	     loc_468E:
RAM:468E C1			     pop     bc
RAM:468F 1C			     inc     e
RAM:4690 79			     ld	     a,	c
RAM:4691 C6 08			     add     a,	#8
RAM:4693 30 01			     jr	     NC, loc_4696
RAM:4695 04			     inc     b
RAM:4696
RAM:4696	     loc_4696:
RAM:4696 4F			     ld	     c,	a
RAM:4697 E6 3F			     and     #0x3F ; '?'
RAM:4699 3D			     dec     a
RAM:469A 20 AD			     jr	     NZ, loc_4649
RAM:469C E1			     pop     hl
RAM:469D D1			     pop     de
RAM:469E 0B			     dec     bc
RAM:469F 1C			     inc     e
RAM:46A0 7B			     ld	     a,	e
RAM:46A1 FE 38			     cp	     #0x38 ; '8'
RAM:46A3 20 8C			     jr	     NZ, loc_4631
RAM:46A5 D1			     pop     de
RAM:46A6 CD 39 4E		     call    getchar
RAM:46A9
RAM:46A9	     loc_46A9:
RAM:46A9 C3 90 42		     jp	     get_command
RAM:46A9	     ; ---------------------------------------------------------------------------
RAM:46AC 4C 4F 4E 47+aLongRangeScan: .ascii 'LONG RANGE SCAN'
RAM:46AC 20 52 41 4E+		     .db 0
RAM:46BC	     ; ---------------------------------------------------------------------------
RAM:46BC
RAM:46BC	     cmd_destruct:
RAM:46BC 01 00 3C		     ld	     bc, #video
RAM:46BF 21 E7 46		     ld	     hl, #aConfirm			     ; "CONFIRM? "
RAM:46C2 CD 4F 4F		     call    str_hl_at_bc
RAM:46C5 CD 16 4E		     call    getint_HL
RAM:46C8 7D			     ld	     a,	l
RAM:46C9 FE 7B			     cp	     #0x7B ; '{'
RAM:46CB 20 DC			     jr	     NZ, loc_46A9
RAM:46CD DD 4E 4E		     ld	     c,	0x4E(ix)			     ; pos_enterprise
RAM:46D0 06 40			     ld	     b,	#0x40 ;	'@'
RAM:46D2 3E FF			     ld	     a,	#0xFF
RAM:46D4 CD 7F 48		     call    sub_487F
RAM:46D7 1A			     ld	     a,	(de)
RAM:46D8 E6 06			     and     #6
RAM:46DA 0F			     rrca
RAM:46DB DD 96 48		     sub     0x48(ix)				     ; klingons
RAM:46DE CA A3 43		     jp	     Z,	victory
RAM:46E1	     ; START OF	FUNCTION CHUNK FOR ship_hit
RAM:46E1
RAM:46E1	     enterprise_destroyed:
RAM:46E1 21 44 44		     ld	     hl, # aTheLastStarbaseHasBeenDestroyed+0x1B
RAM:46E4 C3 89 43		     jp	     ent_dead
RAM:46E4	     ; END OF FUNCTION CHUNK FOR ship_hit
RAM:46E4	     ; ---------------------------------------------------------------------------
RAM:46E7 43 4F 4E 46+aConfirm:	     .ascii 'CONFIRM? '
RAM:46E7 49 52 4D 3F+		     .db 0
RAM:46F1	     ; ---------------------------------------------------------------------------
RAM:46F1
RAM:46F1	     cmd_phaser:
RAM:46F1 01 08 3C		     ld	     bc, # video+8
RAM:46F4 21 0C 47		     ld	     hl, #aAt				     ; "AT "
RAM:46F7 CD 4F 4F		     call    str_hl_at_bc
RAM:46FA 0B			     dec     bc
RAM:46FB CD 10 47		     call    phaser_pct
RAM:46FE CD 57 4F		     call    print_a
RAM:4701 3E 25			     ld	     a,	#0x25 ;	'%'
RAM:4703 02			     ld	     (bc), a
RAM:4704 03			     inc     bc
RAM:4705 CD 0C 4E		     call    clreol
RAM:4708 0E 20			     ld	     c,	#0x20 ;	' '
RAM:470A 18 4A			     jr	     loc_4756
RAM:470A	     ; ---------------------------------------------------------------------------
RAM:470C 41 54 20 00 aAt:	     .ascii 'AT '
RAM:470C			     .db 0
RAM:4710
RAM:4710	     ; =============== S U B R O U T I N E =======================================
RAM:4710
RAM:4710
RAM:4710	     phaser_pct:
RAM:4710 DD 6E 5F		     ld	     l,	0x5F(ix)			     ; shields
RAM:4713 CB 25			     sla     l
RAM:4715 26 03			     ld	     h,	#3
RAM:4717 CD DA 4F		     call    LdivH
RAM:471A 3E 64			     ld	     a,	#100
RAM:471C 95			     sub     l
RAM:471D 67			     ld	     h,	a
RAM:471E C9			     ret
RAM:471E	     ; End of function phaser_pct
RAM:471E
RAM:471E	     ; ---------------------------------------------------------------------------
RAM:471F 50 48 4F 54+aPhotonTubesEmpty:.ascii 'PHOTON TUBES EMPTY'
RAM:471F 4F 4E 20 54+		     .db 0
RAM:4732 44 45 47 52+aDegrees:	     .ascii 'DEGREES? '
RAM:4732 45 45 53 3F+		     .db 0
RAM:473C	     ; ---------------------------------------------------------------------------
RAM:473C
RAM:473C	     cmd_photon:
RAM:473C 01 00 3C		     ld	     bc, #video
RAM:473F DD 7E 60		     ld	     a,	0x60(ix)			     ; photons
RAM:4742 B7			     or	     a
RAM:4743 20 0C			     jr	     NZ, loc_4751
RAM:4745 21 1F 47		     ld	     hl, #aPhotonTubesEmpty		     ; "PHOTON TUBES EMPTY"
RAM:4748 CD 4F 4F		     call    str_hl_at_bc
RAM:474B CD 0C 4E		     call    clreol
RAM:474E C3 93 42		     jp	     nd_get_command
RAM:4751	     ; ---------------------------------------------------------------------------
RAM:4751
RAM:4751	     loc_4751:							     ; photons
RAM:4751 DD 35 60		     dec     0x60(ix)
RAM:4754 26 00			     ld	     h,	#0
RAM:4756
RAM:4756	     loc_4756:
RAM:4756 E5			     push    hl
RAM:4757 21 32 47		     ld	     hl, #aDegrees			     ; "DEGREES? "
RAM:475A CD 4F 4F		     call    str_hl_at_bc
RAM:475D	     ; compute BC as a vector in direction of input angle
RAM:475D CD 16 4E		     call    getint_HL
RAM:4760 CB 3C			     srl     h
RAM:4762 CB 1D			     rr	     l
RAM:4764 EB			     ex	     de, hl
RAM:4765 7B			     ld	     a,	e
RAM:4766 CD 7E 47		     call    angle_cosine
RAM:4769 47			     ld	     b,	a
RAM:476A 7B			     ld	     a,	e
RAM:476B C6 2D			     add     a,	#0x2D ;	'-'
RAM:476D CD 7E 47		     call    angle_cosine
RAM:4770 4F			     ld	     c,	a
RAM:4771 DD 7E 4E		     ld	     a,	0x4E(ix)			     ; pos_enterprise
RAM:4774 E1			     pop     hl
RAM:4775 CD CF 48		     call    draw_shot
RAM:4778 DC AA 47		     call    C,	ship_hit
RAM:477B C3 93 42		     jp	     nd_get_command
RAM:477E
RAM:477E	     ; =============== S U B R O U T I N E =======================================
RAM:477E
RAM:477E	     ; Returns cosine(A) in H
RAM:477E	     ; This uses approximation that sin(X) ~ X
RAM:477E	     ; Since angle is in 2*degrees, the	result is
RAM:477E	     ; is not the actual cosine	by cosine(X)*90/PI
RAM:477E	     ; But this	is good	enough for producing a vector
RAM:477E	     ; which points in the direction of	the angle
RAM:477E
RAM:477E	     angle_cosine:
RAM:477E 6F			     ld	     l,	a
RAM:477F 26 5A			     ld	     h,	#0x5A ;	'Z'
RAM:4781 CD DA 4F		     call    LdivH
RAM:4784 7C			     ld	     a,	h
RAM:4785 D6 2D			     sub     #0x2D ; '-'
RAM:4787 CB 45			     bit     0,	l
RAM:4789 C0			     ret     NZ
RAM:478A ED 44			     neg
RAM:478C C9			     ret
RAM:478C	     ; End of function angle_cosine
RAM:478C
RAM:478D
RAM:478D	     ; =============== S U B R O U T I N E =======================================
RAM:478D
RAM:478D	     ; Normalizes B,C into HL,DE. (HL=delta x, DE=delta	Y)
RAM:478D	     ; look at the calling context to figure out which is which.
RAM:478D	     ; the 'ret po' is a clever way to detect the 'overflow' because it uses
RAM:478D	     ; signed versions of HL,DE.
RAM:478D
RAM:478D	     normalize_BC:
RAM:478D 68			     ld	     l,	b
RAM:478E AF			     xor     a
RAM:478F CB 7D			     bit     7,	l
RAM:4791 28 01			     jr	     Z,	dx_positive
RAM:4793 2F			     cpl
RAM:4794
RAM:4794	     dx_positive:
RAM:4794 67			     ld	     h,	a
RAM:4795 29			     add     hl, hl
RAM:4796 59			     ld	     e,	c
RAM:4797 AF			     xor     a
RAM:4798 CB 7B			     bit     7,	e
RAM:479A 28 01			     jr	     Z,	dy_positive
RAM:479C 2F			     cpl
RAM:479D
RAM:479D	     dy_positive:
RAM:479D 57			     ld	     d,	a
RAM:479E
RAM:479E	     keep_shifting:
RAM:479E 29			     add     hl, hl
RAM:479F EB			     ex	     de, hl
RAM:47A0 29			     add     hl, hl
RAM:47A1 EB			     ex	     de, hl
RAM:47A2 7A			     ld	     a,	d
RAM:47A3 B7			     or	     a
RAM:47A4 E0			     ret     PO
RAM:47A5 7C			     ld	     a,	h
RAM:47A6 B7			     or	     a
RAM:47A7 E0			     ret     PO
RAM:47A8 18 F4			     jr	     keep_shifting
RAM:47A8	     ; End of function normalize_BC
RAM:47A8
RAM:47AA
RAM:47AA	     ; =============== S U B R O U T I N E =======================================
RAM:47AA
RAM:47AA	     ; Something in the	quadrant has been hit
RAM:47AA	     ; HL points to its	qpos.
RAM:47AA	     ; (4062) contains the phaser/photon flag and the distance
RAM:47AA	     ; HL is loaded so L is the	flag and H the distance
RAM:47AA	     ; Then (roughly) sqrt( 2 *	(2*L/(H/4)) ) is computed.
RAM:47AA	     ; and put in C--this is the force of the hit.
RAM:47AA	     ; if L/H == 0 then	it becomes 255--this makes a photon torp
RAM:47AA	     ; have a strong impact
RAM:47AA
RAM:47AA	     ship_hit:
RAM:47AA
RAM:47AA	     ; FUNCTION	CHUNK AT RAM:4379 SIZE 00000010	BYTES
RAM:47AA	     ; FUNCTION	CHUNK AT RAM:43A3 SIZE 00000034	BYTES
RAM:47AA	     ; FUNCTION	CHUNK AT RAM:46E1 SIZE 00000006	BYTES
RAM:47AA
RAM:47AA E5			     push    hl
RAM:47AB 2A 62 40		     ld	     hl, (word_4062)			     ; starbase_damage+1
RAM:47AE CB 3C			     srl     h
RAM:47B0 CB 3C			     srl     h
RAM:47B2 CB 25			     sla     l
RAM:47B4 CD DA 4F		     call    LdivH
RAM:47B7 B7			     or	     a
RAM:47B8 20 01			     jr	     NZ, loc_47BB
RAM:47BA 2F			     cpl
RAM:47BB
RAM:47BB	     loc_47BB:
RAM:47BB E1			     pop     hl
RAM:47BC 0E 00			     ld	     c,	#0
RAM:47BE
RAM:47BE	     ; Simple sum_reduce loop finds C such that	C(C-1)/2 > A
RAM:47BE	     ; By the quadractic formula C = (1	+- sqrt( 1 + 8C	) ) / 2
RAM:47BE	     ; This is approximately sqrt( 2*C )
RAM:47BE
RAM:47BE	     sum_reduce:
RAM:47BE 0C			     inc     c
RAM:47BF 91			     sub     c
RAM:47C0 30 FC			     jr	     NC, sum_reduce
RAM:47C2 7D			     ld	     a,	l
RAM:47C3 D6 4E			     sub     #0x4E ; 'N'
RAM:47C5 20 5B			     jr	     NZ, not_bige_hit
RAM:47C7 C5			     push    bc
RAM:47C8 01 64 3C		     ld	     bc, # video+0x64
RAM:47CB 21 06 48		     ld	     hl, #aEnterpriseHit		     ; "ENTERPRISE HIT"
RAM:47CE CD 4F 4F		     call    str_hl_at_bc
RAM:47D1 C1			     pop     bc
RAM:47D2 DD 66 42		     ld	     h,	0x42(ix)			     ; level
RAM:47D5 24			     inc     h
RAM:47D6 CB 3C			     srl     h
RAM:47D8 69			     ld	     l,	c
RAM:47D9 CD EF 4F		     call    HxL
RAM:47DC 4F			     ld	     c,	a
RAM:47DD 21 58 40		     ld	     hl, #pos_blkhole
RAM:47E0
RAM:47E0	     ; Enterprise is hit!  Above we computed (level+1)/2 * shot_power
RAM:47E0	     ; The loop	below will randomly apply the calculated damaged C
RAM:47E0
RAM:47E0	     damage_systems:
RAM:47E0 23			     inc     hl
RAM:47E1 79			     ld	     a,	c
RAM:47E2 07			     rlca
RAM:47E3 CD 9A 4F		     call    rand
RAM:47E6 86			     add     a,	(hl)
RAM:47E7 77			     ld	     (hl), a
RAM:47E8 7D			     ld	     a,	l
RAM:47E9 FE 5D			     cp	     #0x5D ; ']'
RAM:47EB 20 F3			     jr	     NZ, damage_systems
RAM:47ED	     ; Gets L=ship_ngr,	H=shields
RAM:47ED 2A 5E 40		     ld	     hl, (ship_nrg)
RAM:47F0 7D			     ld	     a,	l
RAM:47F1 91			     sub     c
RAM:47F2 38 21			     jr	     C,	loc_4815
RAM:47F4 6F			     ld	     l,	a
RAM:47F5 7C			     ld	     a,	h
RAM:47F6 B7			     or	     a
RAM:47F7	     ; If no shields power, you	die
RAM:47F7 28 1C			     jr	     Z,	loc_4815
RAM:47F9	     ; Load A with shield damage, if >100% then	set shield power to 0
RAM:47F9 DD 7E 5C		     ld	     a,	0x5C(ix)			     ; shield_damage
RAM:47FC FE 64			     cp	     #100
RAM:47FE	     ; If hit C	> ship_ngr, you	die
RAM:47FE 38 02			     jr	     C,	loc_4802
RAM:4800 26 00			     ld	     h,	#0
RAM:4802
RAM:4802	     loc_4802:
RAM:4802 22 5E 40		     ld	     (ship_nrg), hl
RAM:4805 C9			     ret
RAM:4805	     ; ---------------------------------------------------------------------------
RAM:4806 45 4E 54 45+aEnterpriseHit: .ascii 'ENTERPRISE HIT'
RAM:4806 52 50 52 49+		     .db 0
RAM:4815	     ; ---------------------------------------------------------------------------
RAM:4815
RAM:4815	     loc_4815:
RAM:4815 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4818 17			     rla
RAM:4819 21 4E 40		     ld	     hl, #0x404E
RAM:481C DC 74 48		     call    C,	explosion_at_hl
RAM:481F C3 E1 46		     jp	     enterprise_destroyed
RAM:4822	     ; ---------------------------------------------------------------------------
RAM:4822
RAM:4822	     ; if position pointer is bige+1, then a starbase is hit
RAM:4822
RAM:4822	     not_bige_hit:
RAM:4822 3D			     dec     a
RAM:4823 20 23			     jr	     NZ, klingon_hit
RAM:4825	     ; Add C to	(starbase_damage).  If > 12 starbase is	destroyed
RAM:4825 DD 7E 61		     ld	     a,	0x61(ix)			     ; starbase_damage
RAM:4828 81			     add     a,	c
RAM:4829 DD 77 61		     ld	     0x61(ix), a			     ; starbase_damage
RAM:482C FE 0C			     cp	     #0xC
RAM:482E D8			     ret     C
RAM:482F 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4832 17			     rla
RAM:4833 30 08			     jr	     NC, destroy_base_at_DE
RAM:4835 CD 74 48		     call    explosion_at_hl
RAM:4838 EB			     ex	     de, hl
RAM:4839 35			     dec     (hl)
RAM:483A CD F8 42		     call    draw_srs
RAM:483D
RAM:483D	     ; Reset starbase bit in this quadrant
RAM:483D
RAM:483D	     destroy_base_at_DE:
RAM:483D 1A			     ld	     a,	(de)
RAM:483E CB 87			     res     0,	a
RAM:4840 12			     ld	     (de), a
RAM:4841 DD 35 4A		     dec     0x4A(ix)				     ; bases
RAM:4844 CA 79 43		     jp	     Z,	no_more_starbases
RAM:4847 C9			     ret
RAM:4848	     ; ---------------------------------------------------------------------------
RAM:4848
RAM:4848	     ; Klingon damage table is 10 bytes	before klingon position	table
RAM:4848	     ; If Klingon damage > 10 the klingon is killed
RAM:4848	     ; This makes them slighly weaker than starbases
RAM:4848
RAM:4848	     klingon_hit:
RAM:4848 45			     ld	     b,	l
RAM:4849 7D			     ld	     a,	l
RAM:484A D6 0A			     sub     #10
RAM:484C 6F			     ld	     l,	a
RAM:484D 7E			     ld	     a,	(hl)
RAM:484E 81			     add     a,	c
RAM:484F 77			     ld	     (hl), a
RAM:4850 FE 0A			     cp	     #10
RAM:4852 D8			     ret     C
RAM:4853 FD 21 B7 40		     ld	     iy, #stack2
RAM:4857 68			     ld	     l,	b
RAM:4858 E5			     push    hl
RAM:4859 CD 74 48		     call    explosion_at_hl
RAM:485C E1			     pop     hl
RAM:485D 45			     ld	     b,	l
RAM:485E
RAM:485E	     dec_klingon:
RAM:485E 1A			     ld	     a,	(de)
RAM:485F D6 02			     sub     #2
RAM:4861 12			     ld	     (de), a
RAM:4862	     ; Move the	last klingon in	the position list to replace the first one
RAM:4862	     ; Note that the damage table is not altered.  This	could benefit
RAM:4862	     ; or hurt the player depending on the breaks
RAM:4862 0F			     rrca
RAM:4863 E6 03			     and     #3
RAM:4865 C6 55			     add     a,	#0x55 ;	'U'
RAM:4867 6F			     ld	     l,	a
RAM:4868 7E			     ld	     a,	(hl)
RAM:4869 68			     ld	     l,	b
RAM:486A 77			     ld	     (hl), a
RAM:486B	     ; Decrement global	klingon	count, perhaps causing victory
RAM:486B DD 35 48		     dec     0x48(ix)				     ; klingons
RAM:486E CA A3 43		     jp	     Z,	victory
RAM:4871 C3 F8 42		     jp	     draw_srs
RAM:4871	     ; End of function ship_hit
RAM:4871
RAM:4874
RAM:4874	     ; =============== S U B R O U T I N E =======================================
RAM:4874
RAM:4874
RAM:4874	     explosion_at_hl:
RAM:4874 4E			     ld	     c,	(hl)
RAM:4875 06 0A			     ld	     b,	#0xA
RAM:4877 3E 1C			     ld	     a,	#0x1C
RAM:4879 CD 9A 4F		     call    rand
RAM:487C C6 08			     add     a,	#8
RAM:487E 37			     scf
RAM:487E	     ; End of function explosion_at_hl
RAM:487E
RAM:487F
RAM:487F	     ; =============== S U B R O U T I N E =======================================
RAM:487F
RAM:487F
RAM:487F	     sub_487F:
RAM:487F D5			     push    de
RAM:4880 F5			     push    af
RAM:4881 79			     ld	     a,	c
RAM:4882 CD B2 4C		     call    coord_to_xy
RAM:4885 21 00 00		     ld	     hl, #0
RAM:4888 C5			     push    bc
RAM:4889
RAM:4889	     loc_4889:
RAM:4889 7C			     ld	     a,	h
RAM:488A CD 9A 4F		     call    rand
RAM:488D 44			     ld	     b,	h
RAM:488E CB 38			     srl     b
RAM:4890 90			     sub     b
RAM:4891 82			     add     a,	d
RAM:4892 47			     ld	     b,	a
RAM:4893 7D			     ld	     a,	l
RAM:4894 CD 9A 4F		     call    rand
RAM:4897 4D			     ld	     c,	l
RAM:4898 CB 39			     srl     c
RAM:489A 91			     sub     c
RAM:489B 83			     add     a,	e
RAM:489C 4F			     ld	     c,	a
RAM:489D CD A1 4C		     call    check_xy_in_srs
RAM:48A0 E5			     push    hl
RAM:48A1 DC CE 4F		     call    C,	flipBC
RAM:48A4 E1			     pop     hl
RAM:48A5 AF			     xor     a
RAM:48A6 D3 FF			     out     (0xFF), a
RAM:48A8
RAM:48A8	     loc_48A8:
RAM:48A8 3D			     dec     a
RAM:48A9 20 FD			     jr	     NZ, loc_48A8
RAM:48AB F1			     pop     af
RAM:48AC 3D			     dec     a
RAM:48AD 20 1B			     jr	     NZ, loc_48CA
RAM:48AF 24			     inc     h
RAM:48B0 C1			     pop     bc
RAM:48B1 05			     dec     b
RAM:48B2 28 19			     jr	     Z,	loc_48CD
RAM:48B4 3E 05			     ld	     a,	#5
RAM:48B6 CB 41			     bit     0,	c
RAM:48B8 20 05			     jr	     NZ, loc_48BF
RAM:48BA 3E 08			     ld	     a,	#8
RAM:48BC CD 9A 4F		     call    rand
RAM:48BF
RAM:48BF	     loc_48BF:
RAM:48BF D3 FF			     out     (0xFF), a
RAM:48C1 C5			     push    bc
RAM:48C2 7C			     ld	     a,	h
RAM:48C3 E6 03			     and     #3
RAM:48C5 20 01			     jr	     NZ, loc_48C8
RAM:48C7 2C			     inc     l
RAM:48C8
RAM:48C8	     loc_48C8:
RAM:48C8 3E 05			     ld	     a,	#5
RAM:48CA
RAM:48CA	     loc_48CA:
RAM:48CA F5			     push    af
RAM:48CB 18 BC			     jr	     loc_4889
RAM:48CD	     ; ---------------------------------------------------------------------------
RAM:48CD
RAM:48CD	     loc_48CD:
RAM:48CD D1			     pop     de
RAM:48CE C9			     ret
RAM:48CE	     ; End of function sub_487F
RAM:48CE
RAM:48CF
RAM:48CF	     ; =============== S U B R O U T I N E =======================================
RAM:48CF
RAM:48CF	     ; Fire a phaser or	a photon shot
RAM:48CF	     ; if H=0 a	photon else a phaser
RAM:48CF	     ; if H > 127 the shot is a	tracer so draw no tail
RAM:48CF	     ; A is the	start pos, and C the angle.
RAM:48CF
RAM:48CF	     draw_shot:
RAM:48CF F5			     push    af
RAM:48D0 DD 74 62		     ld	     0x62(ix), h
RAM:48D3 CD B2 4C		     call    coord_to_xy
RAM:48D6 63			     ld	     h,	e
RAM:48D7 AF			     xor     a
RAM:48D8 5F			     ld	     e,	a
RAM:48D9 6F			     ld	     l,	a
RAM:48DA ED 53 92 49		     ld	     (weapon_x), de
RAM:48DE 22 94 49		     ld	     (weapon_y), hl
RAM:48E1 E3			     ex	     (sp), hl
RAM:48E2 D5			     push    de
RAM:48E3 E5			     push    hl
RAM:48E4 DD 77 63		     ld	     0x63(ix), a
RAM:48E7 CD 8D 47		     call    normalize_BC
RAM:48EA 22 8E 49		     ld	     (weapon_dx), hl
RAM:48ED ED 53 90 49		     ld	     (weapon_dy), de
RAM:48F1 D1			     pop     de
RAM:48F2
RAM:48F2	     keep_drawing_shot:
RAM:48F2 D5			     push    de
RAM:48F3 CD 40 49		     call    extend_shot
RAM:48F6 D1			     pop     de
RAM:48F7	     ; This branch means the shot moved	out of range
RAM:48F7 30 15			     jr	     NC, shot_hit_something
RAM:48F9 C5			     push    bc
RAM:48FA D5			     push    de
RAM:48FB CD AF 4F		     call    xy2scrnbit
RAM:48FE CD 70 4C		     call    doesHLhit
RAM:4901 D1			     pop     de
RAM:4902 C1			     pop     bc
RAM:4903 28 09			     jr	     Z,	shot_hit_something
RAM:4905 DD 7E 62		     ld	     a,	0x62(ix)
RAM:4908 B7			     or	     a
RAM:4909 CC 85 49		     call    Z,	resetBC
RAM:490C 18 E4			     jr	     keep_drawing_shot
RAM:490E	     ; ---------------------------------------------------------------------------
RAM:490E
RAM:490E	     shot_hit_something:
RAM:490E D1			     pop     de
RAM:490F E3			     ex	     (sp), hl
RAM:4910 F5			     push    af
RAM:4911 DD 7E 62		     ld	     a,	0x62(ix)
RAM:4914	     ; Avoid doing erase_tail if the weapon flag is 0 or ff
RAM:4914 3C			     inc     a
RAM:4915 28 21			     jr	     Z,	loc_4938
RAM:4917 3D			     dec     a
RAM:4918 28 1B			     jr	     Z,	loc_4935
RAM:491A ED 53 92 49		     ld	     (weapon_x), de
RAM:491E 22 94 49		     ld	     (weapon_y), hl
RAM:4921 DD 56 63		     ld	     d,	0x63(ix)
RAM:4924
RAM:4924	     erase_tail:
RAM:4924 D5			     push    de
RAM:4925 CD 40 49		     call    extend_shot
RAM:4928 D1			     pop     de
RAM:4929 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:492C 17			     rla
RAM:492D 30 09			     jr	     NC, loc_4938
RAM:492F CD 85 49		     call    resetBC
RAM:4932 15			     dec     d
RAM:4933 20 EF			     jr	     NZ, erase_tail
RAM:4935
RAM:4935	     loc_4935:
RAM:4935 CD 24 43		     call    disp_srs_ships
RAM:4938
RAM:4938	     loc_4938:							     ; cur_quadrant
RAM:4938 DD 5E 43		     ld	     e,	0x43(ix)
RAM:493B 16 40			     ld	     d,	#0x40 ;	'@'
RAM:493D F1			     pop     af
RAM:493E E1			     pop     hl
RAM:493F C9			     ret
RAM:493F	     ; End of function draw_shot
RAM:493F
RAM:4940
RAM:4940	     ; =============== S U B R O U T I N E =======================================
RAM:4940
RAM:4940	     ; extend_shot adds	to the phaser/photon line
RAM:4940
RAM:4940	     extend_shot:
RAM:4940 ED 5B 8E 49		     ld	     de, (weapon_dx)
RAM:4944 2A 92 49		     ld	     hl, (weapon_x)
RAM:4947 19			     add     hl, de
RAM:4948 D5			     push    de
RAM:4949 E5			     push    hl
RAM:494A 44			     ld	     b,	h
RAM:494B ED 5B 90 49		     ld	     de, (weapon_dy)
RAM:494F 2A 94 49		     ld	     hl, (weapon_y)
RAM:4952 19			     add     hl, de
RAM:4953 4C			     ld	     c,	h
RAM:4954 CD A1 4C		     call    check_xy_in_srs
RAM:4957 30 1B			     jr	     NC, shot_outside_srs
RAM:4959 E5			     push    hl
RAM:495A 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:495D 2F			     cpl
RAM:495E DD B6 62		     or	     0x62(ix)
RAM:4961 F4 CE 4F		     call    P,	flipBC
RAM:4964 E1			     pop     hl
RAM:4965 C5			     push    bc
RAM:4966 ED 4B 62 40		     ld	     bc, (word_4062)			     ; starbasedamage+1
RAM:496A 04			     inc     b
RAM:496B CD 46 4B		     call    periodic
RAM:496E ED 43 62 40		     ld	     (word_4062), bc			     ; starbase_damage+1
RAM:4972 37			     scf
RAM:4973 C1			     pop     bc
RAM:4974
RAM:4974	     shot_outside_srs:
RAM:4974 ED 53 90 49		     ld	     (weapon_dy), de
RAM:4978 22 94 49		     ld	     (weapon_y), hl
RAM:497B E1			     pop     hl
RAM:497C D1			     pop     de
RAM:497D ED 53 8E 49		     ld	     (weapon_dx), de
RAM:4981 22 92 49		     ld	     (weapon_x), hl
RAM:4984 C9			     ret
RAM:4984	     ; End of function extend_shot
RAM:4984
RAM:4985
RAM:4985	     ; =============== S U B R O U T I N E =======================================
RAM:4985
RAM:4985	     ; Clear the pixel at (B,C).  Seems	to expect that it is a graphics	char already.
RAM:4985
RAM:4985	     resetBC:
RAM:4985 CD AF 4F		     call    xy2scrnbit
RAM:4988 CB FE			     set     7,	(hl)
RAM:498A 2F			     cpl
RAM:498B A6			     and     (hl)
RAM:498C 77			     ld	     (hl), a
RAM:498D C9			     ret
RAM:498D	     ; End of function resetBC
RAM:498D
RAM:498D	     ; ---------------------------------------------------------------------------
RAM:498E 00 00	     weapon_dx:	     .dw 0
RAM:4990 00 00	     weapon_dy:	     .dw 0
RAM:4992 00 00	     weapon_x:	     .dw 0
RAM:4994 00 00	     weapon_y:	     .dw 0
RAM:4996	     ; ---------------------------------------------------------------------------
RAM:4996
RAM:4996	     ; This is the starting point for the klingon thread
RAM:4996	     ; Until we	get to time $0f	(about 7.5 seconds), the klingons
RAM:4996	     ; are inactive
RAM:4996
RAM:4996	     klingon_thread:
RAM:4996 CD 46 4B		     call    periodic
RAM:4999 3A 44 40		     ld	     a,	(stardate)
RAM:499C B7			     or	     a
RAM:499D 20 07			     jr	     NZ, klingon_AI
RAM:499F 3A 46 40		     ld	     a,	(stardate+2)
RAM:49A2 FE 0F			     cp	     #0xF
RAM:49A4 38 F0			     jr	     C,	klingon_thread
RAM:49A6
RAM:49A6	     klingon_AI:
RAM:49A6 3B			     dec     sp
RAM:49A7 3B			     dec     sp
RAM:49A8 11 4B 40		     ld	     de, #klingon_damages
RAM:49AB AF			     xor     a
RAM:49AC 12			     ld	     (de), a
RAM:49AD 1C			     inc     e
RAM:49AE 12			     ld	     (de), a
RAM:49AF 1C			     inc     e
RAM:49B0 12			     ld	     (de), a
RAM:49B1 DD 5E 43		     ld	     e,	0x43(ix)			     ; cur_quadrant
RAM:49B4
RAM:49B4	     ; klingon loop.  Delay about 256 ms before	considering
RAM:49B4	     ; the next	action of the klingons
RAM:49B4
RAM:49B4	     klingon_loop:
RAM:49B4 06 80			     ld	     b,	#0x80 ;	'€'
RAM:49B6
RAM:49B6	     loc_49B6:
RAM:49B6 CD 46 4B		     call    periodic
RAM:49B9 05			     dec     b
RAM:49BA 20 FA			     jr	     NZ, loc_49B6
RAM:49BC	     ; This condition here is, essentially, to decide if a starbase
RAM:49BC	     ; should be attacked.  This is possible if	no base	is under attack
RAM:49BC	     ; (ttl at (4065) is zero) or if one of the	low 4 bits of the time
RAM:49BC	     ; is set. That implies every 8 seconds a large series of attempts.
RAM:49BC DD 7E 46		     ld	     a,	0x46(ix)
RAM:49BF E6 0F			     and     #0xF
RAM:49C1 DD B6 65		     or	     0x65(ix)
RAM:49C4 20 2F			     jr	     NZ, consider_phasers
RAM:49C6	     ; Attack starbase.	 Choose	a random quadrant HL.  If it happens
RAM:49C6	     ; to be the current quadrant or does not contain a	starbase,
RAM:49C6	     ; skip the	attempted attack. Otherwise, store qpos	of the starbase
RAM:49C6	     ; at (ix+64h)
RAM:49C6 D5			     push    de
RAM:49C7	     ; Cute; ld	a,d is 'ld a,40h' because DE is in the zero page
RAM:49C7 7A			     ld	     a,	d
RAM:49C8 CD 9A 4F		     call    rand
RAM:49CB 3D			     dec     a
RAM:49CC 6F			     ld	     l,	a
RAM:49CD BB			     cp	     e
RAM:49CE 28 24			     jr	     Z,	consider_phasers_1
RAM:49D0 62			     ld	     h,	d
RAM:49D1 7E			     ld	     a,	(hl)
RAM:49D2 CB 47			     bit     0,	a
RAM:49D4 28 1E			     jr	     Z,	consider_phasers_1
RAM:49D6 DD 75 64		     ld	     0x64(ix), l			     ; sos_starbase_qpos
RAM:49D9
RAM:49D9	     ; Look for	a klingon not in the current quadrant and warp him
RAM:49D9	     ; to the sos starbase.  Initialize	the time to live counter
RAM:49D9	     ; to between 10 to	45.
RAM:49D9
RAM:49D9	     find_attacker:
RAM:49D9 7A			     ld	     a,	d
RAM:49DA CD 9A 4F		     call    rand
RAM:49DD 3D			     dec     a
RAM:49DE BB			     cp	     e
RAM:49DF 28 F8			     jr	     Z,	find_attacker
RAM:49E1 5F			     ld	     e,	a
RAM:49E2 CD AC 4A		     call    try_warp_DE_HL
RAM:49E5 7E			     ld	     a,	(hl)
RAM:49E6 E6 06			     and     #6
RAM:49E8 28 EF			     jr	     Z,	find_attacker
RAM:49EA 3E 23			     ld	     a,	#0x23 ;	'#'
RAM:49EC CD 9A 4F		     call    rand
RAM:49EF C6 14			     add     a,	#0x14
RAM:49F1 DD 77 65		     ld	     0x65(ix), a
RAM:49F4
RAM:49F4	     consider_phasers_1:
RAM:49F4 D1			     pop     de
RAM:49F5
RAM:49F5	     ; Consider	a phaser attack	if there are klingons in the
RAM:49F5	     ; current quadrant.  If there is only one klingon in the
RAM:49F5	     ; quadrant	there is a 1/40	chance it will run away.
RAM:49F5
RAM:49F5	     consider_phasers:
RAM:49F5 1A			     ld	     a,	(de)
RAM:49F6 E6 06			     and     #6
RAM:49F8 28 BA			     jr	     Z,	klingon_loop
RAM:49FA D6 02			     sub     #2
RAM:49FC 3E 28			     ld	     a,	#0x28 ;	'('
RAM:49FE CC 9A 4F		     call    Z,	rand
RAM:4A01 3D			     dec     a
RAM:4A02 20 38			     jr	     NZ, target_federation
RAM:4A04	     ; At this point the klingon wants to leave	the quadrant
RAM:4A04 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4A07 17			     rla
RAM:4A08 30 25			     jr	     NC, leave_quadrant
RAM:4A0A	     ; The SRS is up so	the klingon must navigate to leave the quadrant.
RAM:4A0A D5			     push    de
RAM:4A0B 62			     ld	     h,	d
RAM:4A0C 2E 55			     ld	     l,	#0x55 ;	'U'
RAM:4A0E
RAM:4A0E	     ; Move klingon at (HL) by adding/subtracting 30, 31, 32
RAM:4A0E
RAM:4A0E	     keep_moving:
RAM:4A0E 3E 03			     ld	     a,	#3
RAM:4A10 CD 9A 4F		     call    rand
RAM:4A13 C6 1E			     add     a,	#0x1E
RAM:4A15 5F			     ld	     e,	a
RAM:4A16 DD 7E 4E		     ld	     a,	0x4E(ix)			     ; pos_enterprise
RAM:4A19 96			     sub     (hl)
RAM:4A1A 7E			     ld	     a,	(hl)
RAM:4A1B 38 03			     jr	     C,	loc_4A20
RAM:4A1D 93			     sub     e
RAM:4A1E 18 01			     jr	     loc_4A21
RAM:4A20	     ; ---------------------------------------------------------------------------
RAM:4A20
RAM:4A20	     loc_4A20:
RAM:4A20 83			     add     a,	e
RAM:4A21
RAM:4A21	     loc_4A21:
RAM:4A21 38 06			     jr	     C,	klingon_escaped
RAM:4A23 5F			     ld	     e,	a
RAM:4A24 CD 88 4A		     call    try_move_klingon
RAM:4A27 18 E5			     jr	     keep_moving
RAM:4A29	     ; ---------------------------------------------------------------------------
RAM:4A29
RAM:4A29	     klingon_escaped:
RAM:4A29 56			     ld	     d,	(hl)
RAM:4A2A 5E			     ld	     e,	(hl)
RAM:4A2B CD C6 4C		     call    ship_d2e
RAM:4A2E D1			     pop     de
RAM:4A2F
RAM:4A2F	     leave_quadrant:
RAM:4A2F 7A			     ld	     a,	d
RAM:4A30 CD 9A 4F		     call    rand
RAM:4A33 6F			     ld	     l,	a
RAM:4A34 CD AC 4A		     call    try_warp_DE_HL
RAM:4A37 28 F6			     jr	     Z,	leave_quadrant
RAM:4A39 C3 B4 49		     jp	     klingon_loop
RAM:4A3C	     ; ---------------------------------------------------------------------------
RAM:4A3C
RAM:4A3C	     ; Attempt to fire upon the	big E then the starbase	if any
RAM:4A3C
RAM:4A3C	     target_federation:						     ; pos_enterprise
RAM:4A3C DD 46 4E		     ld	     b,	0x4E(ix)
RAM:4A3F CD BD 4A		     call    attack_on_B
RAM:4A42 1A			     ld	     a,	(de)
RAM:4A43 E6 01			     and     #1
RAM:4A45 CA B4 49		     jp	     Z,	klingon_loop
RAM:4A48 DD 46 4F		     ld	     b,	0x4F(ix)			     ; pos_starbase
RAM:4A4B CD BD 4A		     call    attack_on_B
RAM:4A4E 3E 0C			     ld	     a,	#0xC
RAM:4A50 CD 9A 4F		     call    rand
RAM:4A53 3D			     dec     a
RAM:4A54 20 2F			     jr	     NZ, to_klingon_loop
RAM:4A56	     ; This is where we	try to warp another klingon to the current quadrant
RAM:4A56	     ; 1 in 12 chance of getting here
RAM:4A56	     ; Another tricky ld a,40h
RAM:4A56 7A			     ld	     a,	d
RAM:4A57 CD 9A 4F		     call    rand
RAM:4A5A 3D			     dec     a
RAM:4A5B BB			     cp	     e
RAM:4A5C 28 27			     jr	     Z,	to_klingon_loop
RAM:4A5E	     ; A is a random quadrant different	from the current
RAM:4A5E 62			     ld	     h,	d
RAM:4A5F 6F			     ld	     l,	a
RAM:4A60 EB			     ex	     de, hl
RAM:4A61 CD AC 4A		     call    try_warp_DE_HL
RAM:4A64 EB			     ex	     de, hl
RAM:4A65 28 1E			     jr	     Z,	to_klingon_loop
RAM:4A67 1A			     ld	     a,	(de)
RAM:4A68 E6 06			     and     #6
RAM:4A6A 0F			     rrca
RAM:4A6B C6 54			     add     a,	#0x54 ;	'T'
RAM:4A6D 6F			     ld	     l,	a
RAM:4A6E D5			     push    de
RAM:4A6F
RAM:4A6F	     find_warpin_space:
RAM:4A6F 3E 41			     ld	     a,	#0x41 ;	'A'
RAM:4A71 CD 9A 4F		     call    rand
RAM:4A74 C6 DE			     add     a,	#0xDE ;	'Þ'
RAM:4A76 5F			     ld	     e,	a
RAM:4A77 16 8C			     ld	     d,	#0x8C ;	'Œ'
RAM:4A79 E5			     push    hl
RAM:4A7A CD C6 4C		     call    ship_d2e
RAM:4A7D E1			     pop     hl
RAM:4A7E 20 EF			     jr	     NZ, find_warpin_space
RAM:4A80 73			     ld	     (hl), e
RAM:4A81 D1			     pop     de
RAM:4A82 CD F8 42		     call    draw_srs
RAM:4A85
RAM:4A85	     to_klingon_loop:
RAM:4A85 C3 B4 49		     jp	     klingon_loop
RAM:4A88
RAM:4A88	     ; =============== S U B R O U T I N E =======================================
RAM:4A88
RAM:4A88	     ; Try to move the klingon to at current pos (HL) to E.
RAM:4A88	     ; It looks	like a klingon can die if it accidentally runs
RAM:4A88	     ; into a black hole! (4058	is black hole position)
RAM:4A88	     ; ship_d2e	must conditionally set E to the	next or	prev position.
RAM:4A88
RAM:4A88	     try_move_klingon:
RAM:4A88 56			     ld	     d,	(hl)
RAM:4A89 E5			     push    hl
RAM:4A8A CD C6 4C		     call    ship_d2e
RAM:4A8D 7D			     ld	     a,	l
RAM:4A8E 28 0B			     jr	     Z,	move_klingon
RAM:4A90 5A			     ld	     e,	d
RAM:4A91 FE 58			     cp	     #0x58 ; 'X'
RAM:4A93 20 06			     jr	     NZ, move_klingon
RAM:4A95 31 B7 40		     ld	     sp, #stack2
RAM:4A98 C3 5E 48		     jp	     dec_klingon
RAM:4A9B	     ; ---------------------------------------------------------------------------
RAM:4A9B
RAM:4A9B	     ; Move klingon at (HL) qpos to BC screen location
RAM:4A9B	     ; E is the	destination qpos and (HL) is updated
RAM:4A9B	     ; There is	also a 60-period (~120 ms) delay after the move
RAM:4A9B
RAM:4A9B	     move_klingon:						     ; "<*>"
RAM:4A9B 21 56 44		     ld	     hl, #klingon
RAM:4A9E CD 4F 4F		     call    str_hl_at_bc
RAM:4AA1 E1			     pop     hl
RAM:4AA2 73			     ld	     (hl), e
RAM:4AA3 06 3C			     ld	     b,	#0x3C ;	'<'
RAM:4AA5
RAM:4AA5	     loc_4AA5:
RAM:4AA5 CD 46 4B		     call    periodic
RAM:4AA8 05			     dec     b
RAM:4AA9 20 FA			     jr	     NZ, loc_4AA5
RAM:4AAB C9			     ret
RAM:4AAB	     ; End of function try_move_klingon
RAM:4AAB
RAM:4AAC
RAM:4AAC	     ; =============== S U B R O U T I N E =======================================
RAM:4AAC
RAM:4AAC	     ; If possible, warp a klingon from	quad (DE) to (HL)
RAM:4AAC	     ; On return, nz means did warp, z means did not
RAM:4AAC
RAM:4AAC	     try_warp_DE_HL:
RAM:4AAC 7E			     ld	     a,	(hl)
RAM:4AAD E6 06			     and     #6
RAM:4AAF FE 06			     cp	     #6
RAM:4AB1 C8			     ret     Z
RAM:4AB2 1A			     ld	     a,	(de)
RAM:4AB3 E6 06			     and     #6
RAM:4AB5 C8			     ret     Z
RAM:4AB6 1A			     ld	     a,	(de)
RAM:4AB7 3D			     dec     a
RAM:4AB8 3D			     dec     a
RAM:4AB9 12			     ld	     (de), a
RAM:4ABA 34			     inc     (hl)
RAM:4ABB 34			     inc     (hl)
RAM:4ABC C9			     ret
RAM:4ABC	     ; End of function try_warp_DE_HL
RAM:4ABC
RAM:4ABD
RAM:4ABD	     ; =============== S U B R O U T I N E =======================================
RAM:4ABD
RAM:4ABD	     ; Get a klingon to	attack on location B
RAM:4ABD	     ; First compute (10-level)/2 and put random value in C
RAM:4ABD	     ; If random > klingons, return.  So klingons more aggressive
RAM:4ABD	     ; at higher levels.
RAM:4ABD	     ; The rhythm here is: take	a shot.	 If you're 'close', take
RAM:4ABD	     ; another shot and	return.	Otherwise move closer.	If you
RAM:4ABD	     ; can't move anymore, take another shot and return
RAM:4ABD	     ; Otherwise go to the top of the loop
RAM:4ABD
RAM:4ABD	     attack_on_B:
RAM:4ABD 3E 10			     ld	     a,	#0x10
RAM:4ABF DD 96 42		     sub     0x42(ix)				     ; level
RAM:4AC2 1F			     rra
RAM:4AC3 CD 9A 4F		     call    rand
RAM:4AC6 4F			     ld	     c,	a
RAM:4AC7 1A			     ld	     a,	(de)
RAM:4AC8 E6 06			     and     #6
RAM:4ACA 0F			     rrca
RAM:4ACB B9			     cp	     c
RAM:4ACC D8			     ret     C
RAM:4ACD	     ; Get HL pointing to chosen klingon.
RAM:4ACD 79			     ld	     a,	c
RAM:4ACE C6 54			     add     a,	#0x54 ;	'T'
RAM:4AD0 6F			     ld	     l,	a
RAM:4AD1 62			     ld	     h,	d
RAM:4AD2 C5			     push    bc
RAM:4AD3
RAM:4AD3	     fire_and_move:
RAM:4AD3 7E			     ld	     a,	(hl)
RAM:4AD4 C1			     pop     bc
RAM:4AD5 C5			     push    bc
RAM:4AD6 E5			     push    hl
RAM:4AD7 CD B2 4C		     call    coord_to_xy
RAM:4ADA EB			     ex	     de, hl
RAM:4ADB 78			     ld	     a,	b
RAM:4ADC CD B2 4C		     call    coord_to_xy
RAM:4ADF	     ; DE is X,Y of klingon, HL	is X,Y of target
RAM:4ADF 7B			     ld	     a,	e
RAM:4AE0 95			     sub     l
RAM:4AE1 07			     rlca
RAM:4AE2 4F			     ld	     c,	a
RAM:4AE3 7A			     ld	     a,	d
RAM:4AE4 94			     sub     h
RAM:4AE5 47			     ld	     b,	a
RAM:4AE6 E1			     pop     hl
RAM:4AE7	     ; Now BC is a vector in the target	direction
RAM:4AE7 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4AEA 17			     rla
RAM:4AEB	     ; This shot happens only if we're not on SRS.  Stay on SRS!
RAM:4AEB 30 3C			     jr	     NC, find_and_take_shot
RAM:4AED	     ; This chunk computes D = ABS(B) +	ABS(C),	a simple distance.
RAM:4AED 78			     ld	     a,	b
RAM:4AEE CB 78			     bit     7,	b
RAM:4AF0 28 01			     jr	     Z,	loc_4AF3
RAM:4AF2 2F			     cpl
RAM:4AF3
RAM:4AF3	     loc_4AF3:
RAM:4AF3 57			     ld	     d,	a
RAM:4AF4 79			     ld	     a,	c
RAM:4AF5 CB 79			     bit     7,	c
RAM:4AF7 28 01			     jr	     Z,	loc_4AFA
RAM:4AF9 2F			     cpl
RAM:4AFA
RAM:4AFA	     loc_4AFA:
RAM:4AFA 82			     add     a,	d
RAM:4AFB 57			     ld	     d,	a
RAM:4AFC 3E 36			     ld	     a,	#0x36 ;	'6'
RAM:4AFE CD 9A 4F		     call    rand
RAM:4B01 C6 0A			     add     a,	#0xA
RAM:4B03	     ; if D < rand(11..64) take	a shot
RAM:4B03	     ; in essense, shoot again if we're close enough and return
RAM:4B03 BA			     cp	     d
RAM:4B04 30 23			     jr	     NC, find_and_take_shot
RAM:4B06 C5			     push    bc
RAM:4B07 7E			     ld	     a,	(hl)
RAM:4B08	     ; Now look	at moving closer to the	target
RAM:4B08	     ; Based on	looking	at B/2 then C/2	create a new position in A
RAM:4B08 CB 00			     rlc     b
RAM:4B0A 28 08			     jr	     Z,	loc_4B14
RAM:4B0C 38 04			     jr	     C,	loc_4B12
RAM:4B0E 3C			     inc     a
RAM:4B0F 3C			     inc     a
RAM:4B10 18 02			     jr	     loc_4B14
RAM:4B12	     ; ---------------------------------------------------------------------------
RAM:4B12
RAM:4B12	     loc_4B12:
RAM:4B12 3D			     dec     a
RAM:4B13 3D			     dec     a
RAM:4B14
RAM:4B14	     loc_4B14:
RAM:4B14 CB 01			     rlc     c
RAM:4B16 28 08			     jr	     Z,	loc_4B20
RAM:4B18 38 04			     jr	     C,	loc_4B1E
RAM:4B1A C6 20			     add     a,	#0x20 ;	' '
RAM:4B1C 18 02			     jr	     loc_4B20
RAM:4B1E	     ; ---------------------------------------------------------------------------
RAM:4B1E
RAM:4B1E	     loc_4B1E:
RAM:4B1E D6 20			     sub     #0x20 ; ' '
RAM:4B20
RAM:4B20	     loc_4B20:
RAM:4B20 5F			     ld	     e,	a
RAM:4B21	     ; E is the	new position, try to move there.
RAM:4B21	     ; If we do	move, go and try again
RAM:4B21	     ; Otherwise, we fall through to take a shot which will be the
RAM:4B21	     ; return of attack_on_B.
RAM:4B21 CD 88 4A		     call    try_move_klingon
RAM:4B24 C1			     pop     bc
RAM:4B25 7A			     ld	     a,	d
RAM:4B26 BB			     cp	     e
RAM:4B27 20 AA			     jr	     NZ, fire_and_move
RAM:4B29
RAM:4B29	     ; By using	tracer shots, see if klingon at	(HL) can hit a fed target
RAM:4B29	     ; by shooting the the direction of	BC.
RAM:4B29	     ; The tracer is a success if it hits either a starbase or
RAM:4B29	     ; or the big e.  The cp 50h is a location-based check on this
RAM:4B29	     ; If the tracer works a real shot is fired.  Klingon phasers
RAM:4B29	     ; use the Enterprise's phaser %age; so low shields pose a risk
RAM:4B29	     ; to your starbases.
RAM:4B29
RAM:4B29	     find_and_take_shot:
RAM:4B29 7E			     ld	     a,	(hl)
RAM:4B2A D1			     pop     de
RAM:4B2B F5			     push    af
RAM:4B2C	     ; Change this to ld h,01 or ld h,0	to get visible tracer shots
RAM:4B2C 26 FF			     ld	     h,	#0xFF
RAM:4B2E C5			     push    bc
RAM:4B2F CD CF 48		     call    draw_shot
RAM:4B32 C1			     pop     bc
RAM:4B33 7D			     ld	     a,	l
RAM:4B34 E1			     pop     hl
RAM:4B35 D0			     ret     NC
RAM:4B36 FE 50			     cp	     #0x50 ; 'P'
RAM:4B38 D0			     ret     NC
RAM:4B39 E5			     push    hl
RAM:4B3A CD 10 47		     call    phaser_pct
RAM:4B3D F1			     pop     af
RAM:4B3E CD CF 48		     call    draw_shot
RAM:4B41 D0			     ret     NC
RAM:4B42 C3 AA 47		     jp	     ship_hit
RAM:4B42	     ; End of function attack_on_B
RAM:4B42
RAM:4B42	     ; ---------------------------------------------------------------------------
RAM:4B45 00			     .db    0
RAM:4B46	     ; ---------------------------------------------------------------------------
RAM:4B46
RAM:4B46	     ; A lot gets done here.  Looks like we context switch to another thread
RAM:4B46	     ; if the time is right.  Otherwise	we generally update the	display	with
RAM:4B46	     ; things that change like stardates, energy to shield warnings, quadrant,
RAM:4B46	     ; starbase	destroyed and so on.
RAM:4B46	     ; 4045,46 seems to	track the time.
RAM:4B46	     ; Most of the time	we simply delay	4ms and	context	switch.
RAM:4B46	     ; But once	a second we do the processing here.
RAM:4B46	     ; Gotta crunch the	numbers, but it	works out to 95	seconds	per stardate.
RAM:4B46	     ; I can almost bet	that it'll really be 100 or 60 seconds per stardate.
RAM:4B46	     ; PNP: I read the timer as	2 milliseconds so a stardate is	48 seconds
RAM:4B46	     ; 4045 - counts 2 milliseconds (aprox)
RAM:4B46	     ; 4046 - counts 512 milliseconds (about half second)
RAM:4B46	     ; 4044 - counts stardates (95 * 512 ms = 48 seconds).
RAM:4B46	     ; (45,46) only count from 0 to $5eff
RAM:4B46
RAM:4B46	     periodic:
RAM:4B46 08			     ex	     af, af'
RAM:4B47 D9			     exx
RAM:4B48 ED 73 50 4B		     ld	     (loc_4B4E+2), sp
RAM:4B4C FD F9			     ld	     sp, iy
RAM:4B4E
RAM:4B4E	     loc_4B4E:
RAM:4B4E FD 21 00 00		     ld	     iy, #0
RAM:4B52 3E FF			     ld	     a,	#0xFF
RAM:4B54
RAM:4B54	     ; PNP: dec	a = 4 tstates, jr nz = 12 tstates if taken
RAM:4B54	     ; so loop takes 16*256=4080 tstates or about 2ms at 2 MHz
RAM:4B54	     ; or 2.3 ms at 1.77 MHz
RAM:4B54
RAM:4B54	     unit_delay:
RAM:4B54 3D			     dec     a
RAM:4B55 20 FD			     jr	     NZ, unit_delay
RAM:4B57 DD 34 45		     inc     0x45(ix)
RAM:4B5A C0			     ret     NZ
RAM:4B5B DD 7E 46		     ld	     a,	0x46(ix)
RAM:4B5E 3C			     inc     a
RAM:4B5F FE 5F			     cp	     #0x5F ; '_'
RAM:4B61 20 04			     jr	     NZ, loc_4B67
RAM:4B63 AF			     xor     a
RAM:4B64 DD 34 44		     inc     0x44(ix)				     ; stardate
RAM:4B67
RAM:4B67	     loc_4B67:
RAM:4B67 DD 77 46		     ld	     0x46(ix), a
RAM:4B6A E5			     push    hl
RAM:4B6B C5			     push    bc
RAM:4B6C D5			     push    de
RAM:4B6D E6 03			     and     #3
RAM:4B6F DD 5E 43		     ld	     e,	0x43(ix)			     ; cur_quadrant
RAM:4B72 16 40			     ld	     d,	#0x40 ;	'@'
RAM:4B74 20 07			     jr	     NZ, loc_4B7D
RAM:4B76 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4B79 B7			     or	     a
RAM:4B7A FC 9F 4D		     call    M,	draw_stats
RAM:4B7D
RAM:4B7D	     loc_4B7D:
RAM:4B7D 01 84 3F		     ld	     bc, # video+0x384
RAM:4B80 0A			     ld	     a,	(bc)
RAM:4B81 FE 45			     cp	     #0x45 ; 'E'
RAM:4B83 CC 0C 4E		     call    Z,	clreol
RAM:4B86 28 11			     jr	     Z,	loc_4B99
RAM:4B88 3A 5F 40		     ld	     a,	(shields)
RAM:4B8B B7			     or	     a
RAM:4B8C 20 0B			     jr	     NZ, loc_4B99
RAM:4B8E 21 BC 45		     ld	     hl, # aEnergyToShields+2
RAM:4B91 CD 4F 4F		     call    str_hl_at_bc
RAM:4B94 0B			     dec     bc
RAM:4B95 0B			     dec     bc
RAM:4B96 3E 21			     ld	     a,	#0x21 ;	'!'
RAM:4B98 02			     ld	     (bc), a
RAM:4B99
RAM:4B99	     loc_4B99:
RAM:4B99 CD 36 4C		     call    repair
RAM:4B9C	     ; Point BC	at 4 chars past	middle of second from bottom line.
RAM:4B9C	     ; Now check for a starbase	SOS reports.  This can disable the
RAM:4B9C	     ; message,	decrement the TTL and even destroy the starbase
RAM:4B9C 0E A4			     ld	     c,	#0xA4 ;	'¤'
RAM:4B9E 2A 64 40		     ld	     hl, (sos_starbase_qpos)
RAM:4BA1 7B			     ld	     a,	e
RAM:4BA2 5D			     ld	     e,	l
RAM:4BA3 95			     sub     l
RAM:4BA4 28 0A			     jr	     Z,	cancel_sos
RAM:4BA6 1A			     ld	     a,	(de)
RAM:4BA7 E6 01			     and     #1
RAM:4BA9 28 05			     jr	     Z,	cancel_sos
RAM:4BAB 1A			     ld	     a,	(de)
RAM:4BAC E6 06			     and     #6
RAM:4BAE 20 04			     jr	     NZ, continue_alert
RAM:4BB0
RAM:4BB0	     ; A is zero here
RAM:4BB0
RAM:4BB0	     cancel_sos:
RAM:4BB0 32 65 40		     ld	     (sos_starbase_ttl), a
RAM:4BB3 67			     ld	     h,	a
RAM:4BB4
RAM:4BB4	     ; H is either zero	(no alert) or contents of sos_starbase_ttl
RAM:4BB4
RAM:4BB4	     continue_alert:
RAM:4BB4 7C			     ld	     a,	h
RAM:4BB5 B7			     or	     a
RAM:4BB6 28 2D			     jr	     Z,	check_docked
RAM:4BB8	     ; decrement starbase ttl counter
RAM:4BB8 DD 35 65		     dec     0x65(ix)
RAM:4BBB 20 0B			     jr	     NZ, display_starbase_sos
RAM:4BBD 21 32 44		     ld	     hl, # aTheLastStarbaseHasBeenDestroyed+9
RAM:4BC0 CD 4F 4F		     call    str_hl_at_bc
RAM:4BC3 CD 3D 48		     call    destroy_base_at_DE
RAM:4BC6 18 1D			     jr	     check_docked
RAM:4BC8	     ; ---------------------------------------------------------------------------
RAM:4BC8
RAM:4BC8	     display_starbase_sos:
RAM:4BC8 0A			     ld	     a,	(bc)
RAM:4BC9 FE 20			     cp	     #0x20 ; ' '
RAM:4BCB	     ; Check for space to alternate flashing SOS display
RAM:4BCB 20 15			     jr	     NZ, loc_4BE2
RAM:4BCD 21 29 4C		     ld	     hl, #aSosStarbase			     ; "SOS-STARBASE"
RAM:4BD0 CD 4F 4F		     call    str_hl_at_bc
RAM:4BD3 7B			     ld	     a,	e
RAM:4BD4 E6 07			     and     #7
RAM:4BD6 CD 57 4F		     call    print_a
RAM:4BD9 7B			     ld	     a,	e
RAM:4BDA E6 38			     and     #0x38 ; '8'
RAM:4BDC 0F			     rrca
RAM:4BDD 0F			     rrca
RAM:4BDE 0F			     rrca
RAM:4BDF CD 57 4F		     call    print_a
RAM:4BE2
RAM:4BE2	     loc_4BE2:
RAM:4BE2 CD 0C 4E		     call    clreol
RAM:4BE5
RAM:4BE5	     ; Check if	enterprise is currently	docked--if so, display message
RAM:4BE5
RAM:4BE5	     check_docked:
RAM:4BE5 01 40 3C		     ld	     bc, # video+0x40
RAM:4BE8 DD 5E 43		     ld	     e,	0x43(ix)			     ; cur_quadrant
RAM:4BEB 1A			     ld	     a,	(de)
RAM:4BEC E6 01			     and     #1
RAM:4BEE 28 23			     jr	     Z,	loc_4C13
RAM:4BF0 2A 4E 40		     ld	     hl, (pos_enterprise)
RAM:4BF3 7C			     ld	     a,	h
RAM:4BF4 95			     sub     l
RAM:4BF5 38 04			     jr	     C,	loc_4BFB
RAM:4BF7 FE 20			     cp	     #0x20 ; ' '
RAM:4BF9 28 08			     jr	     Z,	loc_4C03
RAM:4BFB
RAM:4BFB	     loc_4BFB:
RAM:4BFB 7D			     ld	     a,	l
RAM:4BFC 94			     sub     h
RAM:4BFD 38 14			     jr	     C,	loc_4C13
RAM:4BFF FE 20			     cp	     #0x20 ; ' '
RAM:4C01 20 10			     jr	     NZ, loc_4C13
RAM:4C03
RAM:4C03	     loc_4C03:
RAM:4C03 0A			     ld	     a,	(bc)
RAM:4C04 FE 45			     cp	     #0x45 ; 'E'
RAM:4C06 21 17 4C		     ld	     hl, #aEnterpriseDocked		     ; "ENTERPRISE DOCKED"
RAM:4C09 C4 4F 4F		     call    NZ, str_hl_at_bc
RAM:4C0C CD 36 4C		     call    repair
RAM:4C0F	     ; load up docked enterprise with 3	photon torps
RAM:4C0F DD 36 60 03		     ld	     0x60(ix), #3			     ; photons
RAM:4C13
RAM:4C13	     ; finish_periodic
RAM:4C13
RAM:4C13	     loc_4C13:
RAM:4C13 D1			     pop     de
RAM:4C14 C1			     pop     bc
RAM:4C15 E1			     pop     hl
RAM:4C16 C9			     ret
RAM:4C16	     ; ---------------------------------------------------------------------------
RAM:4C17 45 4E 54 45+aEnterpriseDocked:.ascii 'ENTERPRISE DOCKED'
RAM:4C17 52 50 52 49+		     .db 0
RAM:4C29 53 4F 53 2D+aSosStarbase:   .ascii 'SOS-STARBASE'
RAM:4C29 53 54 41 52+		     .db 0
RAM:4C36
RAM:4C36	     ; =============== S U B R O U T I N E =======================================
RAM:4C36
RAM:4C36	     ; Repair damage.  Seems rather random; but	I'd guess that if bit 7 of C
RAM:4C36	     ; is set, it means	we're docked and guarantee 4 times faster repair and
RAM:4C36	     ; ship's energy replenishment.  Thing is, C appears to result from message
RAM:4C36	     ; display by the caller!
RAM:4C36
RAM:4C36	     repair:
RAM:4C36 21 59 40		     ld	     hl, #imp_damage
RAM:4C39
RAM:4C39	     loc_4C39:
RAM:4C39 3E 8B			     ld	     a,	#0x8B ;	'‹'
RAM:4C3B CD 9A 4F		     call    rand
RAM:4C3E 7E			     ld	     a,	(hl)
RAM:4C3F F2 46 4C		     jp	     P,	loc_4C46
RAM:4C42 D6 01			     sub     #1
RAM:4C44 38 08			     jr	     C,	loc_4C4E
RAM:4C46
RAM:4C46	     loc_4C46:
RAM:4C46 CB 79			     bit     7,	c
RAM:4C48 20 05			     jr	     NZ, loc_4C4F
RAM:4C4A D6 04			     sub     #4
RAM:4C4C 30 01			     jr	     NC, loc_4C4F
RAM:4C4E
RAM:4C4E	     loc_4C4E:
RAM:4C4E AF			     xor     a
RAM:4C4F
RAM:4C4F	     loc_4C4F:
RAM:4C4F 77			     ld	     (hl), a
RAM:4C50 23			     inc     hl
RAM:4C51 7D			     ld	     a,	l
RAM:4C52 FE 5E			     cp	     #0x5E ; '^'
RAM:4C54 20 E3			     jr	     NZ, loc_4C39
RAM:4C56 3E 8B			     ld	     a,	#0x8B ;	'‹'
RAM:4C58 CD 9A 4F		     call    rand
RAM:4C5B F2 5F 4C		     jp	     P,	loc_4C5F
RAM:4C5E 34			     inc     (hl)
RAM:4C5F
RAM:4C5F	     loc_4C5F:
RAM:4C5F CB 79			     bit     7,	c
RAM:4C61 20 04			     jr	     NZ, loc_4C67
RAM:4C63 7E			     ld	     a,	(hl)
RAM:4C64 C6 04			     add     a,	#4
RAM:4C66 77			     ld	     (hl), a
RAM:4C67
RAM:4C67	     loc_4C67:
RAM:4C67 7E			     ld	     a,	(hl)
RAM:4C68 FE 65			     cp	     #0x65 ; 'e'
RAM:4C6A 38 02			     jr	     C,	loc_4C6E
RAM:4C6C 3E 64			     ld	     a,	#0x64 ;	'd'
RAM:4C6E
RAM:4C6E	     loc_4C6E:
RAM:4C6E 77			     ld	     (hl), a
RAM:4C6F C9			     ret
RAM:4C6F	     ; End of function repair
RAM:4C6F
RAM:4C70
RAM:4C70	     ; =============== S U B R O U T I N E =======================================
RAM:4C70
RAM:4C70	     ; HL points to the	screen.	 We map	to a position and check	for collision
RAM:4C70	     ; with an object in the quadrant.	Then we	figure out what, if anything,
RAM:4C70	     ; we hit and then return XXXX.....
RAM:4C70	     ; (The 3CC0 base of short range scan goes to 1E60,	hence the 60!)
RAM:4C70
RAM:4C70	     doesHLhit:
RAM:4C70 E5			     push    hl
RAM:4C71 CB 3C			     srl     h
RAM:4C73 CB 1D			     rr	     l
RAM:4C75 7D			     ld	     a,	l
RAM:4C76 D6 60			     sub     #0x60 ; '`'
RAM:4C78 5F			     ld	     e,	a
RAM:4C79 CD DC 4C		     call    ship_fits
RAM:4C7C 7E			     ld	     a,	(hl)
RAM:4C7D D1			     pop     de
RAM:4C7E 28 1F			     jr	     Z,	loc_4C9F
RAM:4C80 CD 80 4F		     call    pos2scrn
RAM:4C83 7D			     ld	     a,	l
RAM:4C84 FE 50			     cp	     #0x50 ; 'P'
RAM:4C86 38 0D			     jr	     C,	loc_4C95
RAM:4C88 FE 55			     cp	     #0x55 ; 'U'
RAM:4C8A 38 04			     jr	     C,	loc_4C90
RAM:4C8C FE 58			     cp	     #0x58 ; 'X'
RAM:4C8E 20 05			     jr	     NZ, loc_4C95
RAM:4C90
RAM:4C90	     loc_4C90:
RAM:4C90 7B			     ld	     a,	e
RAM:4C91 91			     sub     c
RAM:4C92 C8			     ret     Z
RAM:4C93 18 0A			     jr	     loc_4C9F
RAM:4C95	     ; ---------------------------------------------------------------------------
RAM:4C95
RAM:4C95	     loc_4C95:
RAM:4C95 7B			     ld	     a,	e
RAM:4C96 91			     sub     c
RAM:4C97 D8			     ret     C
RAM:4C98 FE 03			     cp	     #3
RAM:4C9A 30 03			     jr	     NC, loc_4C9F
RAM:4C9C AF			     xor     a
RAM:4C9D 37			     scf
RAM:4C9E C9			     ret
RAM:4C9F	     ; ---------------------------------------------------------------------------
RAM:4C9F
RAM:4C9F	     loc_4C9F:
RAM:4C9F B7			     or	     a
RAM:4CA0 C9			     ret
RAM:4CA0	     ; End of function doesHLhit
RAM:4CA0
RAM:4CA1
RAM:4CA1	     ; =============== S U B R O U T I N E =======================================
RAM:4CA1
RAM:4CA1	     ;
RAM:4CA1	     ; Returns nc if x,y outside of SRS, c otherwise
RAM:4CA1
RAM:4CA1	     check_xy_in_srs:
RAM:4CA1 04			     inc     b
RAM:4CA2 FA B0 4C		     jp	     M,	loc_4CB0
RAM:4CA5 05			     dec     b
RAM:4CA6 28 08			     jr	     Z,	loc_4CB0
RAM:4CA8 79			     ld	     a,	c
RAM:4CA9 FE 09			     cp	     #9
RAM:4CAB 38 03			     jr	     C,	loc_4CB0
RAM:4CAD FE 21			     cp	     #0x21 ; '!'
RAM:4CAF D8			     ret     C
RAM:4CB0
RAM:4CB0	     loc_4CB0:
RAM:4CB0 AF			     xor     a
RAM:4CB1 C9			     ret
RAM:4CB1	     ; End of function check_xy_in_srs
RAM:4CB1
RAM:4CB2
RAM:4CB2	     ; =============== S U B R O U T I N E =======================================
RAM:4CB2
RAM:4CB2	     ; Takes coordinate	in A and returns (pixel) coordinate X,Y	in DE
RAM:4CB2	     ; A = Ay |	Ax (Ay is three	bits, Ax is 5 bits)
RAM:4CB2	     ; D = 4 * Ax + 2
RAM:4CB2	     ; E = 3*Ay	+ 10
RAM:4CB2	     ; The resulting position is the bottom left of the	cell
RAM:4CB2
RAM:4CB2	     coord_to_xy:
RAM:4CB2 5F			     ld	     e,	a
RAM:4CB3 E6 1F			     and     #0x1F
RAM:4CB5 07			     rlca
RAM:4CB6 3C			     inc     a
RAM:4CB7 07			     rlca
RAM:4CB8 57			     ld	     d,	a
RAM:4CB9 7B			     ld	     a,	e
RAM:4CBA E6 E0			     and     #0xE0 ; 'à'
RAM:4CBC 07			     rlca
RAM:4CBD 07			     rlca
RAM:4CBE 07			     rlca
RAM:4CBF 5F			     ld	     e,	a
RAM:4CC0 07			     rlca
RAM:4CC1 83			     add     a,	e
RAM:4CC2 C6 0A			     add     a,	#0xA
RAM:4CC4 5F			     ld	     e,	a
RAM:4CC5 C9			     ret
RAM:4CC5	     ; End of function coord_to_xy
RAM:4CC5
RAM:4CC6
RAM:4CC6	     ; =============== S U B R O U T I N E =======================================
RAM:4CC6
RAM:4CC6	     ; Like ship_fits, but E is	checked	for position validity (and if not, return
RAM:4CC6	     ; as a collision with with	L = 0).	 Otherwise, clear screen position D and
RAM:4CC6	     ; check for collision at E	as in ship_fits.
RAM:4CC6
RAM:4CC6	     ship_d2e:
RAM:4CC6 7B			     ld	     a,	e
RAM:4CC7 2E 00			     ld	     l,	#0
RAM:4CC9 E6 1F			     and     #0x1F
RAM:4CCB 28 5D			     jr	     Z,	s_overlap
RAM:4CCD FE 1F			     cp	     #0x1F
RAM:4CCF 28 59			     jr	     Z,	s_overlap
RAM:4CD1 7A			     ld	     a,	d
RAM:4CD2 CD 80 4F		     call    pos2scrn
RAM:4CD5 3E 80			     ld	     a,	#0x80 ;	'€'
RAM:4CD7 02			     ld	     (bc), a
RAM:4CD8 03			     inc     bc
RAM:4CD9 02			     ld	     (bc), a
RAM:4CDA 03			     inc     bc
RAM:4CDB 02			     ld	     (bc), a
RAM:4CDB	     ; End of function ship_d2e
RAM:4CDB
RAM:4CDC
RAM:4CDC	     ; =============== S U B R O U T I N E =======================================
RAM:4CDC
RAM:4CDC	     ; Check quadrant to see if	a ship at position E would collide with	anything.
RAM:4CDC	     ; Ships at	position D are ruled out.  If there is a collision, Z is clear,
RAM:4CDC	     ; BC is screen location of	position D and $4000 + L is what we hit.
RAM:4CDC	     ; Otherwise, Z is set and BC is the screen	location of E.
RAM:4CDC
RAM:4CDC	     ship_fits:
RAM:4CDC 21 4D 40		     ld	     hl, # klingon_damages+2
RAM:4CDF CD 37 4D		     call    shpOVship
RAM:4CE2 28 46			     jr	     Z,	s_overlap
RAM:4CE4 44			     ld	     b,	h
RAM:4CE5 DD 4E 43		     ld	     c,	0x43(ix)			     ; cur_quadrant
RAM:4CE8 0A			     ld	     a,	(bc)
RAM:4CE9 E6 01			     and     #1
RAM:4CEB 28 05			     jr	     Z,	loc_4CF2
RAM:4CED CD 37 4D		     call    shpOVship
RAM:4CF0 28 38			     jr	     Z,	s_overlap
RAM:4CF2
RAM:4CF2	     loc_4CF2:
RAM:4CF2 0A			     ld	     a,	(bc)
RAM:4CF3 2E 4F			     ld	     l,	#0x4F ;	'O'
RAM:4CF5 E6 18			     and     #0x18
RAM:4CF7 0F			     rrca
RAM:4CF8 0F			     rrca
RAM:4CF9 0F			     rrca
RAM:4CFA 3C			     inc     a
RAM:4CFB 3C			     inc     a
RAM:4CFC 47			     ld	     b,	a
RAM:4CFD
RAM:4CFD	     loc_4CFD:
RAM:4CFD CD 30 4D		     call    shpOVstar
RAM:4D00 28 28			     jr	     Z,	s_overlap
RAM:4D02 05			     dec     b
RAM:4D03 20 F8			     jr	     NZ, loc_4CFD
RAM:4D05 44			     ld	     b,	h
RAM:4D06 0A			     ld	     a,	(bc)
RAM:4D07 2E 54			     ld	     l,	#0x54 ;	'T'
RAM:4D09 E6 06			     and     #6
RAM:4D0B 0F			     rrca
RAM:4D0C 47			     ld	     b,	a
RAM:4D0D 28 08			     jr	     Z,	loc_4D17
RAM:4D0F
RAM:4D0F	     loc_4D0F:
RAM:4D0F CD 37 4D		     call    shpOVship
RAM:4D12 28 16			     jr	     Z,	s_overlap
RAM:4D14 05			     dec     b
RAM:4D15 20 F8			     jr	     NZ, loc_4D0F
RAM:4D17
RAM:4D17	     loc_4D17:
RAM:4D17 44			     ld	     b,	h
RAM:4D18 2E 57			     ld	     l,	#0x57 ;	'W'
RAM:4D1A 0A			     ld	     a,	(bc)
RAM:4D1B E6 20			     and     #0x20 ; ' '
RAM:4D1D 28 05			     jr	     Z,	loc_4D24
RAM:4D1F CD 30 4D		     call    shpOVstar
RAM:4D22 28 06			     jr	     Z,	s_overlap
RAM:4D24
RAM:4D24	     loc_4D24:
RAM:4D24 7B			     ld	     a,	e
RAM:4D25 CD 80 4F		     call    pos2scrn
RAM:4D28 AF			     xor     a
RAM:4D29 C9			     ret
RAM:4D2A	     ; ---------------------------------------------------------------------------
RAM:4D2A
RAM:4D2A	     s_overlap:
RAM:4D2A 7A			     ld	     a,	d
RAM:4D2B CD 80 4F		     call    pos2scrn
RAM:4D2E 3C			     inc     a
RAM:4D2F C9			     ret
RAM:4D2F	     ; End of function ship_fits
RAM:4D2F
RAM:4D30
RAM:4D30	     ; =============== S U B R O U T I N E =======================================
RAM:4D30
RAM:4D30	     ; Return z	flag set if pos	(hl+1) is == E or E + 1
RAM:4D30	     ; Essentially, does the ship at (hl+1) hit	the star at E.
RAM:4D30
RAM:4D30	     shpOVstar:
RAM:4D30 23			     inc     hl
RAM:4D31 7E			     ld	     a,	(hl)
RAM:4D32 BB			     cp	     e
RAM:4D33 C8			     ret     Z
RAM:4D34 3D			     dec     a
RAM:4D35 BB			     cp	     e
RAM:4D36 C9			     ret
RAM:4D36	     ; End of function shpOVstar
RAM:4D36
RAM:4D37
RAM:4D37	     ; =============== S U B R O U T I N E =======================================
RAM:4D37
RAM:4D37	     ; Return z	flag set if pos	(hl+1) is == E - 1, E or E + 1 but not D
RAM:4D37	     ; In other	words, does the	ship (hl+1) overlap with the ship at E.
RAM:4D37	     ; But D is	ruled out, perhaps to not compare the ship with	itself?
RAM:4D37
RAM:4D37	     shpOVship:
RAM:4D37 23			     inc     hl
RAM:4D38 7E			     ld	     a,	(hl)
RAM:4D39 BA			     cp	     d
RAM:4D3A 28 09			     jr	     Z,	loc_4D45
RAM:4D3C BB			     cp	     e
RAM:4D3D C8			     ret     Z
RAM:4D3E 3C			     inc     a
RAM:4D3F BB			     cp	     e
RAM:4D40 C8			     ret     Z
RAM:4D41 D6 02			     sub     #2
RAM:4D43 BB			     cp	     e
RAM:4D44 C9			     ret
RAM:4D45	     ; ---------------------------------------------------------------------------
RAM:4D45
RAM:4D45	     loc_4D45:
RAM:4D45 B7			     or	     a
RAM:4D46 C9			     ret
RAM:4D46	     ; End of function shpOVship
RAM:4D46
RAM:4D46	     ; ---------------------------------------------------------------------------
RAM:4D47 53 54 41 52+aStardate:	     .ascii 'STARDATE'
RAM:4D47 44 41 54 45+		     .db 0
RAM:4D50 51 55 41 44+aQuadrant:	     .ascii 'QUADRANT'
RAM:4D50 52 41 4E 54+		     .db 0
RAM:4D59 53 48 49 45+aShieldEnergy:  .ascii 'SHIELD ENERGY'
RAM:4D59 4C 44 20 45+		     .db 0
RAM:4D67 53 48 49 50+aShipsEnergy:   .ascii 'SHIPS ENERGY'
RAM:4D67 53 20 45 4E+		     .db 0
RAM:4D74 50 48 4F 54+aPhotonTorps:   .ascii 'PHOTON TORPS'
RAM:4D74 4F 4E 20 54+		     .db 0
RAM:4D81 43 4F 4E 44+aCondition:     .ascii 'CONDITION '
RAM:4D81 49 54 49 4F+		     .db 0
RAM:4D8C 47 52 45 45+aGreen:	     .ascii 'GREEN '
RAM:4D8C 4E 20 00		     .db 0
RAM:4D93 59 45 4C 4C+aYellow:	     .ascii 'YELLOW'
RAM:4D93 4F 57 00		     .db 0
RAM:4D9A 52 45 44 21+aRed:	     .ascii 'RED!'
RAM:4D9A 00			     .db 0
RAM:4D9F
RAM:4D9F	     ; =============== S U B R O U T I N E =======================================
RAM:4D9F
RAM:4D9F
RAM:4D9F	     draw_stats:
RAM:4D9F 01 00 3F		     ld	     bc, # video+0x300
RAM:4DA2 21 47 4D		     ld	     hl, #aStardate			     ; "STARDATE"
RAM:4DA5 CD 4F 4F		     call    str_hl_at_bc
RAM:4DA8 DD 7E 44		     ld	     a,	0x44(ix)			     ; stardate
RAM:4DAB CD 57 4F		     call    print_a
RAM:4DAE	     ; Show current quadrant
RAM:4DAE 0E 18			     ld	     c,	#0x18
RAM:4DB0 CD 4F 4F		     call    str_hl_at_bc
RAM:4DB3 7B			     ld	     a,	e
RAM:4DB4 E6 07			     and     #7
RAM:4DB6 CD 57 4F		     call    print_a
RAM:4DB9 7B			     ld	     a,	e
RAM:4DBA 0F			     rrca
RAM:4DBB 0F			     rrca
RAM:4DBC 0F			     rrca
RAM:4DBD E6 07			     and     #7
RAM:4DBF CD 57 4F		     call    print_a
RAM:4DC2	     ; Show shield energy
RAM:4DC2 0E 2D			     ld	     c,	#0x2D ;	'-'
RAM:4DC4 CD 4F 4F		     call    str_hl_at_bc
RAM:4DC7 DD 7E 5F		     ld	     a,	0x5F(ix)			     ; shields
RAM:4DCA CD 57 4F		     call    print_a
RAM:4DCD 3E 25			     ld	     a,	#0x25 ;	'%'
RAM:4DCF 02			     ld	     (bc), a
RAM:4DD0 03			     inc     bc
RAM:4DD1 CD 0C 4E		     call    clreol
RAM:4DD4	     ; Show ship energy
RAM:4DD4 CD 4F 4F		     call    str_hl_at_bc
RAM:4DD7 DD 7E 5E		     ld	     a,	0x5E(ix)			     ; ship_nrg
RAM:4DDA CD 57 4F		     call    print_a
RAM:4DDD 3E 25			     ld	     a,	#0x25 ;	'%'
RAM:4DDF 02			     ld	     (bc), a
RAM:4DE0 3E 20			     ld	     a,	#0x20 ;	' '
RAM:4DE2 03			     inc     bc
RAM:4DE3 02			     ld	     (bc), a
RAM:4DE4	     ; Show photon torpedos
RAM:4DE4 0E 58			     ld	     c,	#0x58 ;	'X'
RAM:4DE6 CD 4F 4F		     call    str_hl_at_bc
RAM:4DE9 DD 7E 60		     ld	     a,	0x60(ix)			     ; photons
RAM:4DEC CD 57 4F		     call    print_a
RAM:4DEF	     ; Show condition (alert) status.
RAM:4DEF	     ;	 Red if	any klingons in	the quadrant
RAM:4DEF	     ;	 Yellow	if ship's energy is <= 40%
RAM:4DEF	     ;	 Green,	otherwise.
RAM:4DEF 0E 6D			     ld	     c,	#0x6D ;	'm'
RAM:4DF1 CD 4F 4F		     call    str_hl_at_bc
RAM:4DF4 21 8C 4D		     ld	     hl, #aGreen			     ; "GREEN "
RAM:4DF7 DD 7E 5E		     ld	     a,	0x5E(ix)			     ; ship_nrg
RAM:4DFA FE 29			     cp	     #0x29 ; ')'
RAM:4DFC 30 03			     jr	     NC, loc_4E01
RAM:4DFE 21 93 4D		     ld	     hl, #aYellow			     ; "YELLOW"
RAM:4E01
RAM:4E01	     loc_4E01:
RAM:4E01 1A			     ld	     a,	(de)
RAM:4E02 E6 06			     and     #6
RAM:4E04 28 03			     jr	     Z,	loc_4E09
RAM:4E06 21 9A 4D		     ld	     hl, #aRed				     ; "RED!"
RAM:4E09
RAM:4E09	     loc_4E09:
RAM:4E09 C3 4F 4F		     jp	     str_hl_at_bc
RAM:4E09	     ; End of function draw_stats
RAM:4E09
RAM:4E0C
RAM:4E0C	     ; =============== S U B R O U T I N E =======================================
RAM:4E0C
RAM:4E0C	     ; Clear from BC to	end of display line with spaces.
RAM:4E0C	     ; BC ends up pointing to last char	on line; A munged.
RAM:4E0C
RAM:4E0C	     clreol:
RAM:4E0C 3E 20			     ld	     a,	#0x20 ;	' '
RAM:4E0E 02			     ld	     (bc), a
RAM:4E0F 03			     inc     bc
RAM:4E10 79			     ld	     a,	c
RAM:4E11 E6 3F			     and     #0x3F ; '?'                             ; end of line?
RAM:4E13 20 F7			     jr	     NZ, clreol				     ; no, loop
RAM:4E15 C9			     ret
RAM:4E15	     ; End of function clreol
RAM:4E15
RAM:4E16
RAM:4E16	     ; =============== S U B R O U T I N E =======================================
RAM:4E16
RAM:4E16	     ; Input integer to	HL, display on screen at BC. Preserves DE
RAM:4E16
RAM:4E16	     getint_HL:
RAM:4E16 D5			     push    de
RAM:4E17 C5			     push    bc
RAM:4E18 CD 0C 4E		     call    clreol
RAM:4E1B C1			     pop     bc
RAM:4E1C C5			     push    bc
RAM:4E1D
RAM:4E1D	     loc_4E1D:
RAM:4E1D CD 39 4E		     call    getchar
RAM:4E20 20 FB			     jr	     NZ, loc_4E1D			     ; loop until <ENTER>
RAM:4E22 C1			     pop     bc
RAM:4E23 ED 62			     sbc     hl, hl				     ; bug? C is undetermined?
RAM:4E25
RAM:4E25	     ; Read (BC) as ASCII int into HL.	Note how 'A' could mean 17.
RAM:4E25
RAM:4E25	     atoibchl:							     ; get digit
RAM:4E25 0A			     ld	     a,	(bc)
RAM:4E26 D6 30			     sub     #0x30 ; '0'                             ; convert ascii to decimal
RAM:4E28 30 02			     jr	     NC, loc_4E2C			     ; valid digit, continue
RAM:4E2A D1			     pop     de
RAM:4E2B C9			     ret
RAM:4E2C	     ; ---------------------------------------------------------------------------
RAM:4E2C
RAM:4E2C	     ; HL = HL * 10 + A.
RAM:4E2C
RAM:4E2C	     loc_4E2C:							     ; =HL*2
RAM:4E2C 29			     add     hl, hl
RAM:4E2D E5			     push    hl
RAM:4E2E 29			     add     hl, hl				     ; =HL*4
RAM:4E2F 29			     add     hl, hl				     ; =HL*8
RAM:4E30 D1			     pop     de					     ; DE=HL*2
RAM:4E31 19			     add     hl, de				     ; =HL*10
RAM:4E32 16 00			     ld	     d,	#0
RAM:4E34 5F			     ld	     e,	a				     ; digit
RAM:4E35 19			     add     hl, de				     ; add digit
RAM:4E36 03			     inc     bc					     ; next buffer location
RAM:4E37 18 EC			     jr	     atoibchl
RAM:4E37	     ; End of function getint_HL
RAM:4E37
RAM:4E39
RAM:4E39	     ; =============== S U B R O U T I N E =======================================
RAM:4E39
RAM:4E39	     ; Read a character	from keyboard, display at BC.  Return Z	if 'enter'.
RAM:4E39	     ; Seems like it actually moves and	displays the enterprise	as needed.
RAM:4E39	     ; Possibly	only gets numbers.
RAM:4E39
RAM:4E39	     getchar:
RAM:4E39
RAM:4E39	     ; FUNCTION	CHUNK AT RAM:4389 SIZE 00000015	BYTES
RAM:4E39	     ; FUNCTION	CHUNK AT RAM:43D7 SIZE 0000002D	BYTES
RAM:4E39
RAM:4E39 E5			     push    hl
RAM:4E3A D5			     push    de
RAM:4E3B 16 FF			     ld	     d,	#0xFF
RAM:4E3D
RAM:4E3D	     loc_4E3D:
RAM:4E3D CD 46 4B		     call    periodic
RAM:4E40 DD 7E 45		     ld	     a,	0x45(ix)
RAM:4E43 E6 3F			     and     #0x3F ; '?'
RAM:4E45 3A 40 38		     ld	     a,	(0x3840)			     ; keyboard	(arrow key line)
RAM:4E48 6F			     ld	     l,	a
RAM:4E49 C2 06 4F		     jp	     NZ, loc_4F06
RAM:4E4C E6 78			     and     #0x78 ; 'x'                             ; mask off <SPACE>
RAM:4E4E 28 04			     jr	     Z,	loc_4E54
RAM:4E50 3A C0 3C		     ld	     a,	(video+0xC0)
RAM:4E53 B7			     or	     a
RAM:4E54
RAM:4E54	     loc_4E54:
RAM:4E54 F2 06 4F		     jp	     P,	loc_4F06
RAM:4E57 D5			     push    de
RAM:4E58 E5			     push    hl
RAM:4E59 C5			     push    bc
RAM:4E5A DD 7E 59		     ld	     a,	0x59(ix)			     ; imp_damage
RAM:4E5D FE 64			     cp	     #100
RAM:4E5F 38 42			     jr	     C,	loc_4EA3
RAM:4E61 21 6D 45		     ld	     hl, #aImpulseEngines		     ; "IMPULSE	ENGINES"
RAM:4E64 01 40 3C		     ld	     bc, # video+0x40
RAM:4E67 CD 4F 4F		     call    str_hl_at_bc
RAM:4E6A 21 04 44		     ld	     hl, #aInoperable			     ; " INOPERABLE"
RAM:4E6D CD 4F 4F		     call    str_hl_at_bc
RAM:4E70 CD 0C 4E		     call    clreol
RAM:4E73 C3 03 4F		     jp	     loc_4F03
RAM:4E73	     ; ---------------------------------------------------------------------------
RAM:4E76 53 57 4F 4C+aSwollowedByABlackHole:.ascii 'SWOLLOWED BY A BLACK HOLE!'
RAM:4E76 4C 4F 57 45+		     .db 0
RAM:4E91 42 55 52 4E+aBurntToACrisp: .ascii 'BURNT TO A CRISP!'
RAM:4E91 54 20 54 4F+		     .db 0
RAM:4EA3	     ; ---------------------------------------------------------------------------
RAM:4EA3
RAM:4EA3	     loc_4EA3:							     ; pos_enterprise
RAM:4EA3 DD 5E 4E		     ld	     e,	0x4E(ix)
RAM:4EA6 53			     ld	     d,	e
RAM:4EA7 CB 75			     bit     6,	l
RAM:4EA9 28 01			     jr	     Z,	loc_4EAC
RAM:4EAB 1C			     inc     e
RAM:4EAC
RAM:4EAC	     loc_4EAC:
RAM:4EAC CB 6D			     bit     5,	l
RAM:4EAE 28 01			     jr	     Z,	loc_4EB1
RAM:4EB0 1D			     dec     e
RAM:4EB1
RAM:4EB1	     loc_4EB1:
RAM:4EB1 CB 65			     bit     4,	l
RAM:4EB3 28 06			     jr	     Z,	loc_4EBB
RAM:4EB5 7B			     ld	     a,	e
RAM:4EB6 C6 20			     add     a,	#0x20 ;	' '
RAM:4EB8 38 01			     jr	     C,	loc_4EBB
RAM:4EBA 5F			     ld	     e,	a
RAM:4EBB
RAM:4EBB	     loc_4EBB:
RAM:4EBB CB 5D			     bit     3,	l
RAM:4EBD 28 06			     jr	     Z,	loc_4EC5
RAM:4EBF 7B			     ld	     a,	e
RAM:4EC0 D6 20			     sub     #0x20 ; ' '
RAM:4EC2 38 01			     jr	     C,	loc_4EC5
RAM:4EC4 5F			     ld	     e,	a
RAM:4EC5
RAM:4EC5	     loc_4EC5:
RAM:4EC5 CD C6 4C		     call    ship_d2e
RAM:4EC8 28 30			     jr	     Z,	loc_4EFA
RAM:4ECA 7D			     ld	     a,	l
RAM:4ECB FE 58			     cp	     #0x58 ; 'X'
RAM:4ECD 20 06			     jr	     NZ, loc_4ED5
RAM:4ECF 21 76 4E		     ld	     hl, #aSwollowedByABlackHole	     ; "SWOLLOWED BY A BLACK HOLE!"
RAM:4ED2 C3 89 43		     jp	     ent_dead
RAM:4ED5	     ; ---------------------------------------------------------------------------
RAM:4ED5
RAM:4ED5	     loc_4ED5:
RAM:4ED5 FE 55			     cp	     #0x55 ; 'U'
RAM:4ED7 30 24			     jr	     NC, loc_4EFD
RAM:4ED9 FE 50			     cp	     #0x50 ; 'P'
RAM:4EDB 38 20			     jr	     C,	loc_4EFD
RAM:4EDD 7E			     ld	     a,	(hl)
RAM:4EDE CD 80 4F		     call    pos2scrn
RAM:4EE1 3E 2A			     ld	     a,	#0x2A ;	'*'
RAM:4EE3 02			     ld	     (bc), a
RAM:4EE4
RAM:4EE4	     loc_4EE4:
RAM:4EE4 3E 0B			     ld	     a,	#0xB
RAM:4EE6 CD 9A 4F		     call    rand
RAM:4EE9 D3 FF			     out     (0xFF), a
RAM:4EEB AF			     xor     a
RAM:4EEC
RAM:4EEC	     loc_4EEC:
RAM:4EEC 3D			     dec     a
RAM:4EED 20 FD			     jr	     NZ, loc_4EEC
RAM:4EEF 15			     dec     d
RAM:4EF0 20 F2			     jr	     NZ, loc_4EE4
RAM:4EF2 21 91 4E		     ld	     hl, #aBurntToACrisp		     ; "BURNT TO A CRISP!"
RAM:4EF5 D3 FF			     out     (0xFF), a
RAM:4EF7 C3 89 43		     jp	     ent_dead
RAM:4EFA	     ; ---------------------------------------------------------------------------
RAM:4EFA
RAM:4EFA	     loc_4EFA:							     ; pos_enterprise
RAM:4EFA DD 73 4E		     ld	     0x4E(ix), e
RAM:4EFD
RAM:4EFD	     loc_4EFD:							     ; "\"V\""
RAM:4EFD 21 4E 44		     ld	     hl, #aV
RAM:4F00 CD 4F 4F		     call    str_hl_at_bc
RAM:4F03
RAM:4F03	     loc_4F03:
RAM:4F03 C1			     pop     bc
RAM:4F04 E1			     pop     hl
RAM:4F05 D1			     pop     de
RAM:4F06
RAM:4F06	     loc_4F06:
RAM:4F06 7D			     ld	     a,	l
RAM:4F07 B2			     or	     d
RAM:4F08 AA			     xor     d
RAM:4F09 55			     ld	     d,	l
RAM:4F0A 3D			     dec     a
RAM:4F0B 28 3D			     jr	     Z,	loc_4F4A
RAM:4F0D 3D			     dec     a
RAM:4F0E 20 0E			     jr	     NZ, loc_4F1E
RAM:4F10 0B			     dec     bc
RAM:4F11 0A			     ld	     a,	(bc)
RAM:4F12 FE 20			     cp	     #0x20 ; ' '
RAM:4F14 03			     inc     bc
RAM:4F15 CA 3D 4E		     jp	     Z,	loc_4E3D
RAM:4F18 0B			     dec     bc
RAM:4F19 3E 20			     ld	     a,	#0x20 ;	' '
RAM:4F1B 02			     ld	     (bc), a
RAM:4F1C 18 2C			     jr	     loc_4F4A
RAM:4F1E	     ; ---------------------------------------------------------------------------
RAM:4F1E
RAM:4F1E	     loc_4F1E:
RAM:4F1E 2A 4D 4F		     ld	     hl, (word_4F4D)
RAM:4F21 3A 10 38		     ld	     a,	(0x3810)			     ; read keyboard
RAM:4F24 32 4D 4F		     ld	     (word_4F4D), a
RAM:4F27 B5			     or	     l
RAM:4F28 AD			     xor     l
RAM:4F29 1E 00			     ld	     e,	#0
RAM:4F2B
RAM:4F2B	     loc_4F2B:
RAM:4F2B CB 0F			     rrc     a
RAM:4F2D 38 16			     jr	     C,	loc_4F45
RAM:4F2F 13			     inc     de
RAM:4F30 20 F9			     jr	     NZ, loc_4F2B
RAM:4F32 1E 08			     ld	     e,	#8
RAM:4F34 3A 20 38		     ld	     a,	(0x3820)			     ; read keyboard
RAM:4F37 32 4E 4F		     ld	     (word_4F4D+1), a
RAM:4F3A B4			     or	     h
RAM:4F3B AC			     xor     h
RAM:4F3C E6 03			     and     #3
RAM:4F3E CA 3D 4E		     jp	     Z,	loc_4E3D
RAM:4F41 0F			     rrca
RAM:4F42 38 01			     jr	     C,	loc_4F45
RAM:4F44 1C			     inc     e
RAM:4F45
RAM:4F45	     loc_4F45:
RAM:4F45 7B			     ld	     a,	e
RAM:4F46 C6 30			     add     a,	#0x30 ;	'0'
RAM:4F48 02			     ld	     (bc), a
RAM:4F49 03			     inc     bc
RAM:4F4A
RAM:4F4A	     loc_4F4A:
RAM:4F4A D1			     pop     de
RAM:4F4B E1			     pop     hl
RAM:4F4C C9			     ret
RAM:4F4C	     ; End of function getchar
RAM:4F4C
RAM:4F4C	     ; ---------------------------------------------------------------------------
RAM:4F4D 00 00	     word_4F4D:	     .dw 0
RAM:4F4F
RAM:4F4F	     ; =============== S U B R O U T I N E =======================================
RAM:4F4F
RAM:4F4F
RAM:4F4F	     str_hl_at_bc:
RAM:4F4F 7E			     ld	     a,	(hl)
RAM:4F50 23			     inc     hl
RAM:4F51 B7			     or	     a
RAM:4F52 C8			     ret     Z
RAM:4F53 02			     ld	     (bc), a
RAM:4F54 03			     inc     bc
RAM:4F55 18 F8			     jr	     str_hl_at_bc
RAM:4F55	     ; End of function str_hl_at_bc
RAM:4F55
RAM:4F57
RAM:4F57	     ; =============== S U B R O U T I N E =======================================
RAM:4F57
RAM:4F57	     ;
RAM:4F57	     ; ; Display A in decimal at (BC)
RAM:4F57
RAM:4F57	     print_a:
RAM:4F57 D5			     push    de
RAM:4F58 E5			     push    hl
RAM:4F59 03			     inc     bc
RAM:4F5A 1E 30			     ld	     e,	#0x30 ;	'0'
RAM:4F5C 6F			     ld	     l,	a
RAM:4F5D 26 64			     ld	     h,	#100
RAM:4F5F CD DA 4F		     call    LdivH
RAM:4F62 B7			     or	     a
RAM:4F63 28 03			     jr	     Z,	loc_4F68
RAM:4F65 83			     add     a,	e
RAM:4F66 02			     ld	     (bc), a
RAM:4F67 03			     inc     bc
RAM:4F68
RAM:4F68	     loc_4F68:
RAM:4F68 55			     ld	     d,	l
RAM:4F69 6C			     ld	     l,	h
RAM:4F6A 26 0A			     ld	     h,	#10
RAM:4F6C CD DA 4F		     call    LdivH
RAM:4F6F B7			     or	     a
RAM:4F70 20 04			     jr	     NZ, loc_4F76
RAM:4F72 82			     add     a,	d
RAM:4F73 28 04			     jr	     Z,	loc_4F79
RAM:4F75 AF			     xor     a
RAM:4F76
RAM:4F76	     loc_4F76:
RAM:4F76 83			     add     a,	e
RAM:4F77 02			     ld	     (bc), a
RAM:4F78 03			     inc     bc
RAM:4F79
RAM:4F79	     loc_4F79:
RAM:4F79 7C			     ld	     a,	h
RAM:4F7A 83			     add     a,	e
RAM:4F7B 02			     ld	     (bc), a
RAM:4F7C 03			     inc     bc
RAM:4F7D E1			     pop     hl
RAM:4F7E D1			     pop     de
RAM:4F7F C9			     ret
RAM:4F7F	     ; End of function print_a
RAM:4F7F
RAM:4F80
RAM:4F80	     ; =============== S U B R O U T I N E =======================================
RAM:4F80
RAM:4F80	     ;
RAM:4F80	     ; ; BC = 3CC0h + A	* 2; Basicially	translates a coordinate	to the screen position.
RAM:4F80
RAM:4F80	     pos2scrn:
RAM:4F80 E5			     push    hl
RAM:4F81 01 C0 3C		     ld	     bc, # video+0xC0
RAM:4F84 26 00			     ld	     h,	#0
RAM:4F86 6F			     ld	     l,	a
RAM:4F87 29			     add     hl, hl
RAM:4F88 09			     add     hl, bc
RAM:4F89 44			     ld	     b,	h
RAM:4F8A 4D			     ld	     c,	l
RAM:4F8B E1			     pop     hl
RAM:4F8C C9			     ret
RAM:4F8C	     ; End of function pos2scrn
RAM:4F8C
RAM:4F8D
RAM:4F8D	     ; =============== S U B R O U T I N E =======================================
RAM:4F8D
RAM:4F8D
RAM:4F8D	     cls:
RAM:4F8D 01 00 3C		     ld	     bc, #video				     ; start of	screen
RAM:4F90
RAM:4F90	     clc:							     ; space
RAM:4F90 3E 20			     ld	     a,	#0x20 ;	' '
RAM:4F92 02			     ld	     (bc), a				     ; set character
RAM:4F93 03			     inc     bc					     ; next location
RAM:4F94 78			     ld	     a,	b
RAM:4F95 FE 40			     cp	     #0x40 ; '@'                             ; end of screen?
RAM:4F97 20 F7			     jr	     NZ, clc				     ; no, loop
RAM:4F99 C9			     ret
RAM:4F99	     ; End of function cls
RAM:4F99
RAM:4F9A
RAM:4F9A	     ; =============== S U B R O U T I N E =======================================
RAM:4F9A
RAM:4F9A	     ;
RAM:4F9A	     ; Get pseudo-random number	from 1 to A.  Uses seed	* 257 +	101 which
RAM:4F9A	     ; does have a period of 65536.  That is, will generate all	values.	 Decent.
RAM:4F9A
RAM:4F9A	     rand:
RAM:4F9A E5			     push    hl
RAM:4F9B C5			     push    bc
RAM:4F9C 2A 40 40		     ld	     hl, (rand_seed)
RAM:4F9F 45			     ld	     b,	l
RAM:4FA0 0E 65			     ld	     c,	#0x65 ;	'e'
RAM:4FA2 09			     add     hl, bc
RAM:4FA3 22 40 40		     ld	     (rand_seed), hl
RAM:4FA6 6F			     ld	     l,	a
RAM:4FA7 CD EF 4F		     call    HxL
RAM:4FAA 7C			     ld	     a,	h
RAM:4FAB 3C			     inc     a
RAM:4FAC C1			     pop     bc
RAM:4FAD E1			     pop     hl
RAM:4FAE C9			     ret
RAM:4FAE	     ; End of function rand
RAM:4FAE
RAM:4FAF
RAM:4FAF	     ; =============== S U B R O U T I N E =======================================
RAM:4FAF
RAM:4FAF	     ; Take X,Y	from B,C.  Computes bit	to set in char in A and	HL
RAM:4FAF	     ; pointing	to the screen location to mask.	 I haven't absolutely
RAM:4FAF	     ; verified	this, but it must be close.
RAM:4FAF
RAM:4FAF	     xy2scrnbit:
RAM:4FAF C5			     push    bc
RAM:4FB0 69			     ld	     l,	c
RAM:4FB1 26 03			     ld	     h,	#3
RAM:4FB3 CD DA 4F		     call    LdivH
RAM:4FB6 68			     ld	     l,	b
RAM:4FB7 CB 25			     sla     l
RAM:4FB9 1F			     rra
RAM:4FBA CB 1D			     rr	     l
RAM:4FBC 1F			     rra
RAM:4FBD CB 1D			     rr	     l
RAM:4FBF CB 14			     rl	     h
RAM:4FC1 4C			     ld	     c,	h
RAM:4FC2 C6 3C			     add     a,	#0x3C ;	'<'
RAM:4FC4 67			     ld	     h,	a
RAM:4FC5 3E 80			     ld	     a,	#0x80 ;	'€'
RAM:4FC7 0C			     inc     c
RAM:4FC8
RAM:4FC8	     loc_4FC8:
RAM:4FC8 07			     rlca
RAM:4FC9 0D			     dec     c
RAM:4FCA 20 FC			     jr	     NZ, loc_4FC8
RAM:4FCC C1			     pop     bc
RAM:4FCD C9			     ret
RAM:4FCD	     ; End of function xy2scrnbit
RAM:4FCD
RAM:4FCE
RAM:4FCE	     ; =============== S U B R O U T I N E =======================================
RAM:4FCE
RAM:4FCE	     ; compliment pixel	(B,C).	Note how it wipes out a	non-graphics character but
RAM:4FCE	     ; otherwise flips the state of the	pixel.
RAM:4FCE
RAM:4FCE	     flipBC:
RAM:4FCE CD AF 4F		     call    xy2scrnbit
RAM:4FD1 CB 7E			     bit     7,	(hl)
RAM:4FD3 28 01			     jr	     Z,	loc_4FD6
RAM:4FD5 AE			     xor     (hl)
RAM:4FD6
RAM:4FD6	     loc_4FD6:
RAM:4FD6 CB FF			     set     7,	a
RAM:4FD8 77			     ld	     (hl), a
RAM:4FD9 C9			     ret
RAM:4FD9	     ; End of function flipBC
RAM:4FD9
RAM:4FDA
RAM:4FDA	     ; =============== S U B R O U T I N E =======================================
RAM:4FDA
RAM:4FDA	     ; A = L = L / H; H	= L % H
RAM:4FDA	     ; If H == 0 returns A = L = 255, H	= L
RAM:4FDA
RAM:4FDA	     LdivH:
RAM:4FDA C5			     push    bc
RAM:4FDB 44			     ld	     b,	h
RAM:4FDC AF			     xor     a
RAM:4FDD 67			     ld	     h,	a
RAM:4FDE
RAM:4FDE	     loc_4FDE:
RAM:4FDE 4F			     ld	     c,	a
RAM:4FDF 3E 08			     ld	     a,	#8
RAM:4FE1
RAM:4FE1	     loc_4FE1:
RAM:4FE1 29			     add     hl, hl
RAM:4FE2 ED 42			     sbc     hl, bc
RAM:4FE4 23			     inc     hl
RAM:4FE5 30 02			     jr	     NC, loc_4FE9
RAM:4FE7 09			     add     hl, bc
RAM:4FE8 2B			     dec     hl
RAM:4FE9
RAM:4FE9	     loc_4FE9:
RAM:4FE9 3D			     dec     a
RAM:4FEA 20 F5			     jr	     NZ, loc_4FE1
RAM:4FEC C1			     pop     bc
RAM:4FED 7D			     ld	     a,	l
RAM:4FEE C9			     ret
RAM:4FEE	     ; End of function LdivH
RAM:4FEE
RAM:4FEF	     ; ---------------------------------------------------------------------------
RAM:4FEF
RAM:4FEF	     ; Compute A = H * L (and also HL =	H * L).
RAM:4FEF
RAM:4FEF	     HxL:
RAM:4FEF C5			     push    bc
RAM:4FF0 4D			     ld	     c,	l
RAM:4FF1 AF			     xor     a
RAM:4FF2 47			     ld	     b,	a
RAM:4FF3 6F			     ld	     l,	a
RAM:4FF4 3E 08			     ld	     a,	#8
RAM:4FF6
RAM:4FF6	     loc_4FF6:
RAM:4FF6 29			     add     hl, hl
RAM:4FF7 30 01			     jr	     NC, loc_4FFA
RAM:4FF9 09			     add     hl, bc
RAM:4FFA
RAM:4FFA	     loc_4FFA:
RAM:4FFA 3D			     dec     a
RAM:4FFB 20 F9			     jr	     NZ, loc_4FF6
RAM:4FFD 7D			     ld	     a,	l
RAM:4FFE C1			     pop     bc
RAM:4FFF C9			     ret
RAM:4FFF	     ; end of 'RAM'
RAM:4FFF
RAM:4FFF	     ; end of file
