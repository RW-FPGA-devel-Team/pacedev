#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>

static const uint8_t tile_data_c2bpp[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $3B '0'
  0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x10, 0x15, 0x00,
  0x10, 0x15, 0x00, 0x10, 0x15, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00,  // $3C '1'
  0x01, 0x50, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x10, 0x00, 0x01, 0x55, 0x00, 0x01, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $3D '2'
  0x10, 0x01, 0x00, 0x00, 0x01, 0x00, 0x15, 0x55, 0x00, 0x10, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x10, 0x15, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $3E '3'
  0x10, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x55, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x01, 0x00, 0x10, 0x01, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00,  // $3F '4'
  0x15, 0x01, 0x00, 0x15, 0x01, 0x00, 0x15, 0x55, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $40 '5'
  0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x15, 0x55, 0x00, 0x00, 0x15, 0x00,
  0x00, 0x15, 0x00, 0x00, 0x15, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $41 '6'
  0x10, 0x01, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x15, 0x55, 0x00,
  0x10, 0x15, 0x00, 0x10, 0x15, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $42 '7'
  0x00, 0x15, 0x00, 0x00, 0x15, 0x00, 0x00, 0x15, 0x00, 0x01, 0x50, 0x00,
  0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x00,  // $43 '8'
  0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x15, 0x55, 0x00, 0x10, 0x01, 0x00,
  0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x15, 0x55, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00,  // $44 '9'
  0x10, 0x01, 0x00, 0x10, 0x01, 0x00, 0x15, 0x55, 0x00, 0x00, 0x15, 0x00,
  0x00, 0x15, 0x00, 0x00, 0x15, 0x00, 0x00, 0x15, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xA8, 0x00,  // $45 'A'
  0x08, 0x08, 0x00, 0x08, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0x80, 0x08, 0x00,
  0x80, 0x08, 0x00, 0x80, 0xA8, 0x00, 0x80, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x80, 0x00,  // $46 'B'
  0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0xAA, 0xA8, 0x00, 0x80, 0x08, 0x00,
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $47 'C'
  0x80, 0x08, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00,
  0xA8, 0x00, 0x00, 0xA8, 0x08, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x80, 0x00,  // $48 'D'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xA8, 0x08, 0x00,
  0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xAA, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $49 'E'
  0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xAA, 0x80, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $4A 'F'
  0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xAA, 0x80, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $4B 'G'
  0x80, 0x08, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0xA8, 0x00,
  0x80, 0xA8, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $4C 'H'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0xA8, 0x08, 0x00,
  0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // $4D 'I'
  0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,
  0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,  // $4E 'J'
  0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00,
  0x00, 0xA8, 0x00, 0x80, 0xA8, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $4F 'K'
  0x80, 0xA8, 0x00, 0x80, 0x80, 0x00, 0xAA, 0x80, 0x00, 0xAA, 0xA8, 0x00,
  0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,  // $50 'L'
  0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00,
  0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $51 'M'
  0xA8, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0xAA, 0xA8, 0x00, 0x80, 0x08, 0x00,
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $52 'N'
  0x80, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0xAA, 0xA8, 0x00,
  0x80, 0xA8, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $53 'O'
  0x80, 0xA8, 0x00, 0x80, 0xA8, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00,
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $54 'P'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0xA8, 0x00, 0x00,
  0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $55 'Q'
  0x80, 0xA8, 0x00, 0x80, 0xA8, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00,
  0x80, 0x08, 0x00, 0x80, 0x80, 0x00, 0xA8, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $56 'R'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00, 0xAA, 0x80, 0x00,
  0xAA, 0x80, 0x00, 0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $57 'S'
  0x80, 0x08, 0x00, 0x80, 0x00, 0x00, 0xAA, 0xA8, 0x00, 0x00, 0xA8, 0x00,
  0x00, 0xA8, 0x00, 0x80, 0xA8, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $58 'T'
  0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0A, 0x80, 0x00,
  0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $59 'U'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xA8, 0x08, 0x00,
  0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x08, 0x00,  // $5A 'V'
  0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00, 0xA8, 0x08, 0x00,
  0xAA, 0xA8, 0x00, 0x0A, 0x80, 0x00, 0x08, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $5B 'W'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0xAA, 0xA8, 0x00,
  0xAA, 0xA8, 0x00, 0xA8, 0x08, 0x00, 0x80, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00,  // $5C 'X'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x80, 0x08, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xA8, 0x00,  // $5D 'Y'
  0x80, 0xA8, 0x00, 0x80, 0xA8, 0x00, 0xAA, 0xA8, 0x00, 0x0A, 0x80, 0x00,
  0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xA8, 0x00,  // $5E 'Z'
  0x80, 0x08, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x00, 0x0A, 0x80, 0x00,
  0x80, 0x00, 0x00, 0x80, 0xA8, 0x00, 0xAA, 0xA8, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,  // $5F '>'
  0xA8, 0x00, 0x00, 0x0A, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00,
  0x0A, 0x80, 0x00, 0xA8, 0x00, 0x00, 0x80, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $60 '.'
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x80, 0x00,  // $61 '('
  0x0A, 0x80, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00,
  0xA8, 0x00, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x80, 0x00,  // $62 ')'
  0x0A, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00,
  0x00, 0xA8, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // $63 '/'
  0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x08, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $64 '-'
  0x00, 0x00, 0x00, 0xAA, 0xAA, 0xA0, 0xAA, 0xAA, 0xA0, 0xAA, 0xAA, 0xA0,
  0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // $65 '<'
  0x00, 0xA8, 0x00, 0x0A, 0x80, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00,
  0x0A, 0x80, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x08, 0x00
};

uint8_t vbm[280*192];

uint8_t	zero = 0;

int patch_snk (char *infile, char *outfile)
{
	// 15*8 = 120 pixels
	// "RETROPORTS" = 10*10 = 100 pixels
	// left/right margin = 10 pixels
	// height = 2*8=16 
	// top/bottom margin = 2/3 pixels
	uint8_t vfl[24][8*15];
	const char *text = "RETROPORTS";

	// render into 1-bit memory
	memset (vfl, 0, 24*8*15);	
	for (int y=0; y<11; y++)
		for (int x=0; x<strlen(text); x++)
		{
			int c = x % 5;
			int r = x / 5;
			int lm = (10*8 - 5*10) / 2;
			
			uint8_t t = toupper(text[x]) - 'A' + 10;
			uint32_t data = tile_data_c2bpp[t*11*3+y*3+0];
			data = (data << 8) | tile_data_c2bpp[t*11*3+y*3+1];
			data = (data << 8) | tile_data_c2bpp[t*11*3+y*3+2];
				
			for (int p=0; p<10; p++)
			{
				if (data & (3<<22))
					vfl[2+r*11+y][lm+c*10+p] = 1;
				data <<= 2;
			}
		}
		
	// now patch SFIX ROM
	FILE *fp = fopen (infile, "rb");
	if (!fp)
	  return (-1);
	FILE *s1 = fopen (outfile, "wb");
	if (!s1)
	  return (-1);

	static const uint16_t max_330_mega[2][15] =
	{
		{ 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F, 0x5E, 0x60, 0x7D },
		{ 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x40, 0x5F, 0x7C, 0x7E }
	};

	static const uint16_t pro_gear_spec[2][17] =
	{
		{ 0x7F, 0x9A, 0x9C, 0x9E, 0xFF, 0xBB, 0xBD, 0xBF, 0xDA, 0xDC, 0xDE, 0xFA, 0xFC, 0x100, 0x102, 0x104, 0x106 },
		{ 0x99, 0x9B, 0x9D, 0x9F, 0xBA, 0xBC, 0xBE, 0xD9, 0xDB, 0xDD, 0xDF, 0xFB, 0xFD, 0x101, 0x103, 0x105, 0x107 }
	};

	static const uint16_t SNK[3][10] = 
	{
		{ 0x200, 0x201, 0x202, 0x203, 0x204, 0x205, 0x206, 0x207, 0x208, 0x209 },
		{ 0x20A, 0x20B, 0x20C, 0x20D, 0x20E, 0x20F, 0x214, 0x215, 0x216, 0x217 },
		{ 0x218, 0x219, 0x21A, 0x21B, 0x21C, 0x21D, 0x21E, 0x21F, 0x240, 0x25E }
	};

	int n = 0;
	for (int t=0; t<128*1024/32; t++)
	{
		uint32_t buf32[32];

		fread (buf32, 1, 32, fp);

		// render tile 'n'
		if (n<30 && t == SNK[n/10][n%10])
		//if ((n < 30 && t == max_330_mega[n%2][n/2]))
				//n >= 30 && m < 34 && t == pro_gear_spec[m%2][m/2]))
		{
			for (int c=0; c<4; c++)
			{
				for (int r=0; r<8; r++)
				{
					//unsigned x = (n/2)*8+(1-(c/2))*4+(c%2)*2;
					unsigned x = (n%10)*8+(1-(c/2))*4+(c%2)*2;
					// do 2 pixels from each column
					uint8_t data = 0;
					#if 0
						if (vfl[(n%2)*8+r][x+1])
							data |= 0x10;
						if (vfl[(n%2)*8+r][x+0])
							data |= 0x01;
					#else
						if (vfl[(n/10)*8+r][x+1])
							data |= 0x50;
						if (vfl[(n/10)*8+r][x+0])
							data |= 0x05;
					#endif
						
					fwrite (&data, 1, 1, s1);
				}
			}
			n++;
		}
		else
			fwrite (buf32, 1, 32, s1);
	}
	
	fclose (fp);
	fclose (s1);
	
	return (0);
}

int main (int argc, char *argv[])
{
  if (patch_snk ("029-s1.bin", "029-s1-rp.bin") != 0)
    printf ("failed!\n");
  
  return (0);
}
